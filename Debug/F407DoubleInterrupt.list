
F407DoubleInterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ba0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007d28  08007d28  00017d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d44  08007d44  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007d44  08007d44  00017d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d4c  08007d4c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d4c  08007d4c  00017d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d50  08007d50  00017d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000810  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008a0  200008a0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000164fe  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c7c  00000000  00000000  000365be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  0003a240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd0  00000000  00000000  0003b3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f29  00000000  00000000  0003c390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000188ec  00000000  00000000  000602b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb5e4  00000000  00000000  00078ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00144189  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004940  00000000  00000000  001441dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007d10 	.word	0x08007d10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007d10 	.word	0x08007d10

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	61bb      	str	r3, [r7, #24]
 80004e6:	4b76      	ldr	r3, [pc, #472]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a75      	ldr	r2, [pc, #468]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 80004ec:	f043 0310 	orr.w	r3, r3, #16
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b73      	ldr	r3, [pc, #460]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0310 	and.w	r3, r3, #16
 80004fa:	61bb      	str	r3, [r7, #24]
 80004fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	4b6f      	ldr	r3, [pc, #444]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a6e      	ldr	r2, [pc, #440]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b6c      	ldr	r3, [pc, #432]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b68      	ldr	r3, [pc, #416]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a67      	ldr	r2, [pc, #412]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b65      	ldr	r3, [pc, #404]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b61      	ldr	r3, [pc, #388]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a60      	ldr	r2, [pc, #384]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b5e      	ldr	r3, [pc, #376]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b5a      	ldr	r3, [pc, #360]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a59      	ldr	r2, [pc, #356]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b57      	ldr	r3, [pc, #348]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b53      	ldr	r3, [pc, #332]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a52      	ldr	r2, [pc, #328]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b50      	ldr	r3, [pc, #320]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0308 	and.w	r3, r3, #8
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2108      	movs	r1, #8
 800058e:	484d      	ldr	r0, [pc, #308]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 8000590:	f000 ff36 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2101      	movs	r1, #1
 8000598:	484b      	ldr	r0, [pc, #300]	; (80006c8 <MX_GPIO_Init+0x1fc>)
 800059a:	f000 ff31 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800059e:	2200      	movs	r2, #0
 80005a0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005a4:	4849      	ldr	r0, [pc, #292]	; (80006cc <MX_GPIO_Init+0x200>)
 80005a6:	f000 ff2b 	bl	8001400 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005aa:	2308      	movs	r3, #8
 80005ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	4619      	mov	r1, r3
 80005c0:	4840      	ldr	r0, [pc, #256]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 80005c2:	f000 fd69 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	4619      	mov	r1, r3
 80005dc:	483a      	ldr	r0, [pc, #232]	; (80006c8 <MX_GPIO_Init+0x1fc>)
 80005de:	f000 fd5b 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005e2:	2308      	movs	r3, #8
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	2302      	movs	r3, #2
 80005e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005f2:	2305      	movs	r3, #5
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	4832      	ldr	r0, [pc, #200]	; (80006c8 <MX_GPIO_Init+0x1fc>)
 80005fe:	f000 fd4b 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000602:	2301      	movs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000606:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800060a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	482e      	ldr	r0, [pc, #184]	; (80006d0 <MX_GPIO_Init+0x204>)
 8000618:	f000 fd3e 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800061c:	2304      	movs	r3, #4
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4619      	mov	r1, r3
 800062e:	4829      	ldr	r0, [pc, #164]	; (80006d4 <MX_GPIO_Init+0x208>)
 8000630:	f000 fd32 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	2302      	movs	r3, #2
 800063c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000646:	2305      	movs	r3, #5
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	4619      	mov	r1, r3
 8000650:	4820      	ldr	r0, [pc, #128]	; (80006d4 <MX_GPIO_Init+0x208>)
 8000652:	f000 fd21 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000656:	f24f 0310 	movw	r3, #61456	; 0xf010
 800065a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4817      	ldr	r0, [pc, #92]	; (80006cc <MX_GPIO_Init+0x200>)
 8000670:	f000 fd12 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000674:	2320      	movs	r3, #32
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4619      	mov	r1, r3
 8000686:	4811      	ldr	r0, [pc, #68]	; (80006cc <MX_GPIO_Init+0x200>)
 8000688:	f000 fd06 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800068c:	2302      	movs	r3, #2
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000690:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	4808      	ldr	r0, [pc, #32]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 80006a2:	f000 fcf9 	bl	8001098 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	2006      	movs	r0, #6
 80006ac:	f000 fcbd 	bl	800102a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006b0:	2006      	movs	r0, #6
 80006b2:	f000 fcd6 	bl	8001062 <HAL_NVIC_EnableIRQ>

}
 80006b6:	bf00      	nop
 80006b8:	3730      	adds	r7, #48	; 0x30
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40020800 	.word	0x40020800
 80006cc:	40020c00 	.word	0x40020c00
 80006d0:	40020000 	.word	0x40020000
 80006d4:	40020400 	.word	0x40020400

080006d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2C1_Init+0x50>)
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <MX_I2C1_Init+0x54>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_I2C1_Init+0x50>)
 80006e4:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_I2C1_Init+0x58>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_I2C1_Init+0x50>)
 8000716:	f002 faaf 	bl	8002c78 <HAL_I2C_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000720:	f000 f9b8 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000ac 	.word	0x200000ac
 800072c:	40005400 	.word	0x40005400
 8000730:	000186a0 	.word	0x000186a0

08000734 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <HAL_I2C_MspInit+0x84>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d12c      	bne.n	80007b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <HAL_I2C_MspInit+0x88>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a17      	ldr	r2, [pc, #92]	; (80007bc <HAL_I2C_MspInit+0x88>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <HAL_I2C_MspInit+0x88>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000772:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000778:	2312      	movs	r3, #18
 800077a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800077c:	2301      	movs	r3, #1
 800077e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000784:	2304      	movs	r3, #4
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	480c      	ldr	r0, [pc, #48]	; (80007c0 <HAL_I2C_MspInit+0x8c>)
 8000790:	f000 fc82 	bl	8001098 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_I2C_MspInit+0x88>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <HAL_I2C_MspInit+0x88>)
 800079e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a2:	6413      	str	r3, [r2, #64]	; 0x40
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_I2C_MspInit+0x88>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	; 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40005400 	.word	0x40005400
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020400 	.word	0x40020400

080007c4 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_I2S3_Init+0x54>)
 80007ca:	4a14      	ldr	r2, [pc, #80]	; (800081c <MX_I2S3_Init+0x58>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2S3_Init+0x54>)
 80007d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_I2S3_Init+0x54>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_I2S3_Init+0x54>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_I2S3_Init+0x54>)
 80007e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_I2S3_Init+0x54>)
 80007ec:	4a0c      	ldr	r2, [pc, #48]	; (8000820 <MX_I2S3_Init+0x5c>)
 80007ee:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_I2S3_Init+0x54>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_I2S3_Init+0x54>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_I2S3_Init+0x54>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_I2S3_Init+0x54>)
 8000804:	f002 fb7c 	bl	8002f00 <HAL_I2S_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800080e:	f000 f941 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000100 	.word	0x20000100
 800081c:	40003c00 	.word	0x40003c00
 8000820:	00017700 	.word	0x00017700

08000824 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08e      	sub	sp, #56	; 0x38
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a31      	ldr	r2, [pc, #196]	; (8000914 <HAL_I2S_MspInit+0xf0>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d15a      	bne.n	800090a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000854:	2301      	movs	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000858:	23c0      	movs	r3, #192	; 0xc0
 800085a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800085c:	2302      	movs	r3, #2
 800085e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4618      	mov	r0, r3
 8000866:	f003 fc6f 	bl	8004148 <HAL_RCCEx_PeriphCLKConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000870:	f000 f910 	bl	8000a94 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	4b27      	ldr	r3, [pc, #156]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	4a26      	ldr	r2, [pc, #152]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 800087e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000882:	6413      	str	r3, [r2, #64]	; 0x40
 8000884:	4b24      	ldr	r3, [pc, #144]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	4b20      	ldr	r3, [pc, #128]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	4a1f      	ldr	r2, [pc, #124]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	6313      	str	r3, [r2, #48]	; 0x30
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	4a18      	ldr	r2, [pc, #96]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 80008b6:	f043 0304 	orr.w	r3, r3, #4
 80008ba:	6313      	str	r3, [r2, #48]	; 0x30
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <HAL_I2S_MspInit+0xf4>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	f003 0304 	and.w	r3, r3, #4
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008c8:	2310      	movs	r3, #16
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d8:	2306      	movs	r3, #6
 80008da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e0:	4619      	mov	r1, r3
 80008e2:	480e      	ldr	r0, [pc, #56]	; (800091c <HAL_I2S_MspInit+0xf8>)
 80008e4:	f000 fbd8 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008e8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008fa:	2306      	movs	r3, #6
 80008fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	4806      	ldr	r0, [pc, #24]	; (8000920 <HAL_I2S_MspInit+0xfc>)
 8000906:	f000 fbc7 	bl	8001098 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800090a:	bf00      	nop
 800090c:	3738      	adds	r7, #56	; 0x38
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40003c00 	.word	0x40003c00
 8000918:	40023800 	.word	0x40023800
 800091c:	40020000 	.word	0x40020000
 8000920:	40020800 	.word	0x40020800

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000928:	f000 fa0e 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092c:	f000 f80e 	bl	800094c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000930:	f7ff fdcc 	bl	80004cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000934:	f7ff fed0 	bl	80006d8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000938:	f7ff ff44 	bl	80007c4 <MX_I2S3_Init>
  MX_SPI1_Init();
 800093c:	f000 f8b0 	bl	8000aa0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000940:	f006 fd9e 	bl	8007480 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000944:	f006 fdc2 	bl	80074cc <MX_USB_HOST_Process>
 8000948:	e7fc      	b.n	8000944 <main+0x20>
	...

0800094c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b094      	sub	sp, #80	; 0x50
 8000950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000952:	f107 0320 	add.w	r3, r7, #32
 8000956:	2230      	movs	r2, #48	; 0x30
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f007 f8d2 	bl	8007b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000970:	2300      	movs	r3, #0
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	4b28      	ldr	r3, [pc, #160]	; (8000a18 <SystemClock_Config+0xcc>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	4a27      	ldr	r2, [pc, #156]	; (8000a18 <SystemClock_Config+0xcc>)
 800097a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097e:	6413      	str	r3, [r2, #64]	; 0x40
 8000980:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <SystemClock_Config+0xcc>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800098c:	2300      	movs	r3, #0
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <SystemClock_Config+0xd0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a21      	ldr	r2, [pc, #132]	; (8000a1c <SystemClock_Config+0xd0>)
 8000996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <SystemClock_Config+0xd0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a8:	2301      	movs	r3, #1
 80009aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b2:	2302      	movs	r3, #2
 80009b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009bc:	2308      	movs	r3, #8
 80009be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009ca:	2307      	movs	r3, #7
 80009cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ce:	f107 0320 	add.w	r3, r7, #32
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 ff34 	bl	8003840 <HAL_RCC_OscConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009de:	f000 f859 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e2:	230f      	movs	r3, #15
 80009e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e6:	2302      	movs	r3, #2
 80009e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	2105      	movs	r1, #5
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 f995 	bl	8003d30 <HAL_RCC_ClockConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a0c:	f000 f842 	bl	8000a94 <Error_Handler>
  }
}
 8000a10:	bf00      	nop
 8000a12:	3750      	adds	r7, #80	; 0x50
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40007000 	.word	0x40007000

08000a20 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	80fb      	strh	r3, [r7, #6]
	currentMs = HAL_GetTick();
 8000a2a:	f000 f9f3 	bl	8000e14 <HAL_GetTick>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <HAL_GPIO_EXTI_Callback+0x64>)
 8000a32:	6013      	str	r3, [r2, #0]
	if((GPIO_Pin == GPIO_PIN_0) && (currentMs - previousMs > 10) ){
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d11b      	bne.n	8000a72 <HAL_GPIO_EXTI_Callback+0x52>
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_GPIO_EXTI_Callback+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x68>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	1ad3      	subs	r3, r2, r3
 8000a44:	2b0a      	cmp	r3, #10
 8000a46:	d914      	bls.n	8000a72 <HAL_GPIO_EXTI_Callback+0x52>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin)){
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480f      	ldr	r0, [pc, #60]	; (8000a8c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000a4e:	f000 fcbf 	bl	80013d0 <HAL_GPIO_ReadPin>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d006      	beq.n	8000a66 <HAL_GPIO_EXTI_Callback+0x46>
			// Rising
			HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a5e:	480c      	ldr	r0, [pc, #48]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x70>)
 8000a60:	f000 fcce 	bl	8001400 <HAL_GPIO_WritePin>
 8000a64:	e005      	b.n	8000a72 <HAL_GPIO_EXTI_Callback+0x52>
		}
		else{
			// Falling
			HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a6c:	4808      	ldr	r0, [pc, #32]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x70>)
 8000a6e:	f000 fcc7 	bl	8001400 <HAL_GPIO_WritePin>
		}
	}
	previousMs = currentMs;
 8000a72:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <HAL_GPIO_EXTI_Callback+0x64>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x68>)
 8000a78:	6013      	str	r3, [r2, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2000014c 	.word	0x2000014c
 8000a88:	20000148 	.word	0x20000148
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	40020c00 	.word	0x40020c00

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <Error_Handler+0x8>
	...

08000aa0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000aa6:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <MX_SPI1_Init+0x68>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000aac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000aec:	220a      	movs	r2, #10
 8000aee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000af2:	f003 fc69 	bl	80043c8 <HAL_SPI_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000afc:	f7ff ffca 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000150 	.word	0x20000150
 8000b08:	40013000 	.word	0x40013000

08000b0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <HAL_SPI_MspInit+0x84>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d12b      	bne.n	8000b86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_SPI_MspInit+0x88>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <HAL_SPI_MspInit+0x88>)
 8000b38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_SPI_MspInit+0x88>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_SPI_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <HAL_SPI_MspInit+0x88>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_SPI_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b66:	23e0      	movs	r3, #224	; 0xe0
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b76:	2305      	movs	r3, #5
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <HAL_SPI_MspInit+0x8c>)
 8000b82:	f000 fa89 	bl	8001098 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40013000 	.word	0x40013000
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <HAL_MspInit+0x4c>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bda:	2007      	movs	r0, #7
 8000bdc:	f000 fa1a 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c38:	f000 f8d8 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f000 fbf5 	bl	8001434 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <OTG_FS_IRQHandler+0x10>)
 8000c56:	f000 fe6f 	bl	8001938 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2000058c 	.word	0x2000058c

08000c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c6c:	4a14      	ldr	r2, [pc, #80]	; (8000cc0 <_sbrk+0x5c>)
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <_sbrk+0x60>)
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <_sbrk+0x64>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <_sbrk+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d207      	bcs.n	8000ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c94:	f006 fefc 	bl	8007a90 <__errno>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ca2:	e009      	b.n	8000cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <_sbrk+0x64>)
 8000cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20020000 	.word	0x20020000
 8000cc4:	00000400 	.word	0x00000400
 8000cc8:	200001a8 	.word	0x200001a8
 8000ccc:	200008a0 	.word	0x200008a0

08000cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <SystemInit+0x20>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <SystemInit+0x20>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf8:	480d      	ldr	r0, [pc, #52]	; (8000d30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cfa:	490e      	ldr	r1, [pc, #56]	; (8000d34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cfc:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d00:	e002      	b.n	8000d08 <LoopCopyDataInit>

08000d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d06:	3304      	adds	r3, #4

08000d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d0c:	d3f9      	bcc.n	8000d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d10:	4c0b      	ldr	r4, [pc, #44]	; (8000d40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d14:	e001      	b.n	8000d1a <LoopFillZerobss>

08000d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d18:	3204      	adds	r2, #4

08000d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d1c:	d3fb      	bcc.n	8000d16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d1e:	f7ff ffd7 	bl	8000cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d22:	f006 febb 	bl	8007a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d26:	f7ff fdfd 	bl	8000924 <main>
  bx  lr    
 8000d2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000d38:	08007d54 	.word	0x08007d54
  ldr r2, =_sbss
 8000d3c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000d40:	200008a0 	.word	0x200008a0

08000d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <HAL_Init+0x40>)
 8000d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d58:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <HAL_Init+0x40>)
 8000d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <HAL_Init+0x40>)
 8000d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 f94f 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f000 f808 	bl	8000d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7c:	f7ff ff0e 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023c00 	.word	0x40023c00

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_InitTick+0x54>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_InitTick+0x58>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f967 	bl	800107e <HAL_SYSTICK_Config>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00e      	b.n	8000dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d80a      	bhi.n	8000dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dc8:	f000 f92f 	bl	800102a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dcc:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <HAL_InitTick+0x5c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000004 	.word	0x20000004

08000dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x20>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x24>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_IncTick+0x24>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	200001ac 	.word	0x200001ac

08000e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_GetTick+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	200001ac 	.word	0x200001ac

08000e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e34:	f7ff ffee 	bl	8000e14 <HAL_GetTick>
 8000e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e44:	d005      	beq.n	8000e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_Delay+0x44>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4413      	add	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e52:	bf00      	nop
 8000e54:	f7ff ffde 	bl	8000e14 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d8f7      	bhi.n	8000e54 <HAL_Delay+0x28>
  {
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db0b      	blt.n	8000f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 021f 	and.w	r2, r3, #31
 8000ef0:	4907      	ldr	r1, [pc, #28]	; (8000f10 <__NVIC_EnableIRQ+0x38>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	2001      	movs	r0, #1
 8000efa:	fa00 f202 	lsl.w	r2, r0, r2
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe0:	d301      	bcc.n	8000fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00f      	b.n	8001006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <SysTick_Config+0x40>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff4:	f7ff ff8e 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SysTick_Config+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Config+0x40>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff29 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103c:	f7ff ff3e 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8001040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f7ff ff8e 	bl	8000f68 <NVIC_EncodePriority>
 800104c:	4602      	mov	r2, r0
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5d 	bl	8000f14 <__NVIC_SetPriority>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff31 	bl	8000ed8 <__NVIC_EnableIRQ>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffa2 	bl	8000fd0 <SysTick_Config>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
 80010b2:	e16b      	b.n	800138c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010b4:	2201      	movs	r2, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f040 815a 	bne.w	8001386 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d005      	beq.n	80010ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d130      	bne.n	800114c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001120:	2201      	movs	r2, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	091b      	lsrs	r3, r3, #4
 8001136:	f003 0201 	and.w	r2, r3, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b03      	cmp	r3, #3
 8001156:	d017      	beq.n	8001188 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d123      	bne.n	80011dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	08da      	lsrs	r2, r3, #3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3208      	adds	r2, #8
 800119c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	220f      	movs	r2, #15
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	691a      	ldr	r2, [r3, #16]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	08da      	lsrs	r2, r3, #3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3208      	adds	r2, #8
 80011d6:	69b9      	ldr	r1, [r7, #24]
 80011d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0203 	and.w	r2, r3, #3
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 80b4 	beq.w	8001386 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b60      	ldr	r3, [pc, #384]	; (80013a4 <HAL_GPIO_Init+0x30c>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	4a5f      	ldr	r2, [pc, #380]	; (80013a4 <HAL_GPIO_Init+0x30c>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
 800122e:	4b5d      	ldr	r3, [pc, #372]	; (80013a4 <HAL_GPIO_Init+0x30c>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800123a:	4a5b      	ldr	r2, [pc, #364]	; (80013a8 <HAL_GPIO_Init+0x310>)
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	3302      	adds	r3, #2
 8001242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	220f      	movs	r2, #15
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a52      	ldr	r2, [pc, #328]	; (80013ac <HAL_GPIO_Init+0x314>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d02b      	beq.n	80012be <HAL_GPIO_Init+0x226>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a51      	ldr	r2, [pc, #324]	; (80013b0 <HAL_GPIO_Init+0x318>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d025      	beq.n	80012ba <HAL_GPIO_Init+0x222>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a50      	ldr	r2, [pc, #320]	; (80013b4 <HAL_GPIO_Init+0x31c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d01f      	beq.n	80012b6 <HAL_GPIO_Init+0x21e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4f      	ldr	r2, [pc, #316]	; (80013b8 <HAL_GPIO_Init+0x320>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d019      	beq.n	80012b2 <HAL_GPIO_Init+0x21a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4e      	ldr	r2, [pc, #312]	; (80013bc <HAL_GPIO_Init+0x324>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d013      	beq.n	80012ae <HAL_GPIO_Init+0x216>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4d      	ldr	r2, [pc, #308]	; (80013c0 <HAL_GPIO_Init+0x328>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00d      	beq.n	80012aa <HAL_GPIO_Init+0x212>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4c      	ldr	r2, [pc, #304]	; (80013c4 <HAL_GPIO_Init+0x32c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d007      	beq.n	80012a6 <HAL_GPIO_Init+0x20e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4b      	ldr	r2, [pc, #300]	; (80013c8 <HAL_GPIO_Init+0x330>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d101      	bne.n	80012a2 <HAL_GPIO_Init+0x20a>
 800129e:	2307      	movs	r3, #7
 80012a0:	e00e      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012a2:	2308      	movs	r3, #8
 80012a4:	e00c      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012a6:	2306      	movs	r3, #6
 80012a8:	e00a      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012aa:	2305      	movs	r3, #5
 80012ac:	e008      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012ae:	2304      	movs	r3, #4
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012b2:	2303      	movs	r3, #3
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012be:	2300      	movs	r3, #0
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	f002 0203 	and.w	r2, r2, #3
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	4093      	lsls	r3, r2
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d0:	4935      	ldr	r1, [pc, #212]	; (80013a8 <HAL_GPIO_Init+0x310>)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012de:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <HAL_GPIO_Init+0x334>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001302:	4a32      	ldr	r2, [pc, #200]	; (80013cc <HAL_GPIO_Init+0x334>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001308:	4b30      	ldr	r3, [pc, #192]	; (80013cc <HAL_GPIO_Init+0x334>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800132c:	4a27      	ldr	r2, [pc, #156]	; (80013cc <HAL_GPIO_Init+0x334>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <HAL_GPIO_Init+0x334>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001356:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <HAL_GPIO_Init+0x334>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_GPIO_Init+0x334>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001380:	4a12      	ldr	r2, [pc, #72]	; (80013cc <HAL_GPIO_Init+0x334>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	2b0f      	cmp	r3, #15
 8001390:	f67f ae90 	bls.w	80010b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40013800 	.word	0x40013800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	40020400 	.word	0x40020400
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020c00 	.word	0x40020c00
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40021400 	.word	0x40021400
 80013c4:	40021800 	.word	0x40021800
 80013c8:	40021c00 	.word	0x40021c00
 80013cc:	40013c00 	.word	0x40013c00

080013d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013e8:	2301      	movs	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	e001      	b.n	80013f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
 800140c:	4613      	mov	r3, r2
 800140e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001410:	787b      	ldrb	r3, [r7, #1]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001416:	887a      	ldrh	r2, [r7, #2]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800141c:	e003      	b.n	8001426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	041a      	lsls	r2, r3, #16
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	619a      	str	r2, [r3, #24]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001440:	695a      	ldr	r2, [r3, #20]
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	4013      	ands	r3, r2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d006      	beq.n	8001458 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fae4 	bl	8000a20 <HAL_GPIO_EXTI_Callback>
  }
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40013c00 	.word	0x40013c00

08001464 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001466:	b08f      	sub	sp, #60	; 0x3c
 8001468:	af0a      	add	r7, sp, #40	; 0x28
 800146a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e054      	b.n	8001520 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d106      	bne.n	8001496 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f006 f853 	bl	800753c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2203      	movs	r2, #3
 800149a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 f882 	bl	80045be <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	687e      	ldr	r6, [r7, #4]
 80014c2:	466d      	mov	r5, sp
 80014c4:	f106 0410 	add.w	r4, r6, #16
 80014c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80014d8:	1d33      	adds	r3, r6, #4
 80014da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014dc:	6838      	ldr	r0, [r7, #0]
 80014de:	f002 fffc 	bl	80044da <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2101      	movs	r1, #1
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 f879 	bl	80045e0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	687e      	ldr	r6, [r7, #4]
 80014f6:	466d      	mov	r5, sp
 80014f8:	f106 0410 	add.w	r4, r6, #16
 80014fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001504:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001508:	e885 0003 	stmia.w	r5, {r0, r1}
 800150c:	1d33      	adds	r3, r6, #4
 800150e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001510:	6838      	ldr	r0, [r7, #0]
 8001512:	f003 fa01 	bl	8004918 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001528 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af04      	add	r7, sp, #16
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	4608      	mov	r0, r1
 8001532:	4611      	mov	r1, r2
 8001534:	461a      	mov	r2, r3
 8001536:	4603      	mov	r3, r0
 8001538:	70fb      	strb	r3, [r7, #3]
 800153a:	460b      	mov	r3, r1
 800153c:	70bb      	strb	r3, [r7, #2]
 800153e:	4613      	mov	r3, r2
 8001540:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001548:	2b01      	cmp	r3, #1
 800154a:	d101      	bne.n	8001550 <HAL_HCD_HC_Init+0x28>
 800154c:	2302      	movs	r3, #2
 800154e:	e076      	b.n	800163e <HAL_HCD_HC_Init+0x116>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	212c      	movs	r1, #44	; 0x2c
 800155e:	fb01 f303 	mul.w	r3, r1, r3
 8001562:	4413      	add	r3, r2
 8001564:	333d      	adds	r3, #61	; 0x3d
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	212c      	movs	r1, #44	; 0x2c
 8001570:	fb01 f303 	mul.w	r3, r1, r3
 8001574:	4413      	add	r3, r2
 8001576:	3338      	adds	r3, #56	; 0x38
 8001578:	787a      	ldrb	r2, [r7, #1]
 800157a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	212c      	movs	r1, #44	; 0x2c
 8001582:	fb01 f303 	mul.w	r3, r1, r3
 8001586:	4413      	add	r3, r2
 8001588:	3340      	adds	r3, #64	; 0x40
 800158a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800158c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	212c      	movs	r1, #44	; 0x2c
 8001594:	fb01 f303 	mul.w	r3, r1, r3
 8001598:	4413      	add	r3, r2
 800159a:	3339      	adds	r3, #57	; 0x39
 800159c:	78fa      	ldrb	r2, [r7, #3]
 800159e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	212c      	movs	r1, #44	; 0x2c
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	333f      	adds	r3, #63	; 0x3f
 80015ae:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	78ba      	ldrb	r2, [r7, #2]
 80015b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015bc:	b2d0      	uxtb	r0, r2
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	212c      	movs	r1, #44	; 0x2c
 80015c2:	fb01 f303 	mul.w	r3, r1, r3
 80015c6:	4413      	add	r3, r2
 80015c8:	333a      	adds	r3, #58	; 0x3a
 80015ca:	4602      	mov	r2, r0
 80015cc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80015ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	da09      	bge.n	80015ea <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	212c      	movs	r1, #44	; 0x2c
 80015dc:	fb01 f303 	mul.w	r3, r1, r3
 80015e0:	4413      	add	r3, r2
 80015e2:	333b      	adds	r3, #59	; 0x3b
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	e008      	b.n	80015fc <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	212c      	movs	r1, #44	; 0x2c
 80015f0:	fb01 f303 	mul.w	r3, r1, r3
 80015f4:	4413      	add	r3, r2
 80015f6:	333b      	adds	r3, #59	; 0x3b
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	212c      	movs	r1, #44	; 0x2c
 8001602:	fb01 f303 	mul.w	r3, r1, r3
 8001606:	4413      	add	r3, r2
 8001608:	333c      	adds	r3, #60	; 0x3c
 800160a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800160e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	787c      	ldrb	r4, [r7, #1]
 8001616:	78ba      	ldrb	r2, [r7, #2]
 8001618:	78f9      	ldrb	r1, [r7, #3]
 800161a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800161c:	9302      	str	r3, [sp, #8]
 800161e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	4623      	mov	r3, r4
 800162c:	f003 fafa 	bl	8004c24 <USB_HC_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800163c:	7bfb      	ldrb	r3, [r7, #15]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	bd90      	pop	{r4, r7, pc}

08001646 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b084      	sub	sp, #16
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	460b      	mov	r3, r1
 8001650:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <HAL_HCD_HC_Halt+0x1e>
 8001660:	2302      	movs	r3, #2
 8001662:	e00f      	b.n	8001684 <HAL_HCD_HC_Halt+0x3e>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	78fa      	ldrb	r2, [r7, #3]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f003 fd4a 	bl	800510e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001682:	7bfb      	ldrb	r3, [r7, #15]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	4608      	mov	r0, r1
 8001696:	4611      	mov	r1, r2
 8001698:	461a      	mov	r2, r3
 800169a:	4603      	mov	r3, r0
 800169c:	70fb      	strb	r3, [r7, #3]
 800169e:	460b      	mov	r3, r1
 80016a0:	70bb      	strb	r3, [r7, #2]
 80016a2:	4613      	mov	r3, r2
 80016a4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	212c      	movs	r1, #44	; 0x2c
 80016ac:	fb01 f303 	mul.w	r3, r1, r3
 80016b0:	4413      	add	r3, r2
 80016b2:	333b      	adds	r3, #59	; 0x3b
 80016b4:	78ba      	ldrb	r2, [r7, #2]
 80016b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	212c      	movs	r1, #44	; 0x2c
 80016be:	fb01 f303 	mul.w	r3, r1, r3
 80016c2:	4413      	add	r3, r2
 80016c4:	333f      	adds	r3, #63	; 0x3f
 80016c6:	787a      	ldrb	r2, [r7, #1]
 80016c8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016ca:	7c3b      	ldrb	r3, [r7, #16]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d112      	bne.n	80016f6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	212c      	movs	r1, #44	; 0x2c
 80016d6:	fb01 f303 	mul.w	r3, r1, r3
 80016da:	4413      	add	r3, r2
 80016dc:	3342      	adds	r3, #66	; 0x42
 80016de:	2203      	movs	r2, #3
 80016e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	212c      	movs	r1, #44	; 0x2c
 80016e8:	fb01 f303 	mul.w	r3, r1, r3
 80016ec:	4413      	add	r3, r2
 80016ee:	333d      	adds	r3, #61	; 0x3d
 80016f0:	7f3a      	ldrb	r2, [r7, #28]
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	e008      	b.n	8001708 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016f6:	78fb      	ldrb	r3, [r7, #3]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	212c      	movs	r1, #44	; 0x2c
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	3342      	adds	r3, #66	; 0x42
 8001704:	2202      	movs	r2, #2
 8001706:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001708:	787b      	ldrb	r3, [r7, #1]
 800170a:	2b03      	cmp	r3, #3
 800170c:	f200 80c6 	bhi.w	800189c <HAL_HCD_HC_SubmitRequest+0x210>
 8001710:	a201      	add	r2, pc, #4	; (adr r2, 8001718 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001716:	bf00      	nop
 8001718:	08001729 	.word	0x08001729
 800171c:	08001889 	.word	0x08001889
 8001720:	0800178d 	.word	0x0800178d
 8001724:	0800180b 	.word	0x0800180b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001728:	7c3b      	ldrb	r3, [r7, #16]
 800172a:	2b01      	cmp	r3, #1
 800172c:	f040 80b8 	bne.w	80018a0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001730:	78bb      	ldrb	r3, [r7, #2]
 8001732:	2b00      	cmp	r3, #0
 8001734:	f040 80b4 	bne.w	80018a0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001738:	8b3b      	ldrh	r3, [r7, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d108      	bne.n	8001750 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	212c      	movs	r1, #44	; 0x2c
 8001744:	fb01 f303 	mul.w	r3, r1, r3
 8001748:	4413      	add	r3, r2
 800174a:	3355      	adds	r3, #85	; 0x55
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	212c      	movs	r1, #44	; 0x2c
 8001756:	fb01 f303 	mul.w	r3, r1, r3
 800175a:	4413      	add	r3, r2
 800175c:	3355      	adds	r3, #85	; 0x55
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d109      	bne.n	8001778 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001764:	78fb      	ldrb	r3, [r7, #3]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	212c      	movs	r1, #44	; 0x2c
 800176a:	fb01 f303 	mul.w	r3, r1, r3
 800176e:	4413      	add	r3, r2
 8001770:	3342      	adds	r3, #66	; 0x42
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001776:	e093      	b.n	80018a0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	212c      	movs	r1, #44	; 0x2c
 800177e:	fb01 f303 	mul.w	r3, r1, r3
 8001782:	4413      	add	r3, r2
 8001784:	3342      	adds	r3, #66	; 0x42
 8001786:	2202      	movs	r2, #2
 8001788:	701a      	strb	r2, [r3, #0]
      break;
 800178a:	e089      	b.n	80018a0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800178c:	78bb      	ldrb	r3, [r7, #2]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d11d      	bne.n	80017ce <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	212c      	movs	r1, #44	; 0x2c
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	3355      	adds	r3, #85	; 0x55
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d109      	bne.n	80017ba <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	212c      	movs	r1, #44	; 0x2c
 80017ac:	fb01 f303 	mul.w	r3, r1, r3
 80017b0:	4413      	add	r3, r2
 80017b2:	3342      	adds	r3, #66	; 0x42
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017b8:	e073      	b.n	80018a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	212c      	movs	r1, #44	; 0x2c
 80017c0:	fb01 f303 	mul.w	r3, r1, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	3342      	adds	r3, #66	; 0x42
 80017c8:	2202      	movs	r2, #2
 80017ca:	701a      	strb	r2, [r3, #0]
      break;
 80017cc:	e069      	b.n	80018a2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	212c      	movs	r1, #44	; 0x2c
 80017d4:	fb01 f303 	mul.w	r3, r1, r3
 80017d8:	4413      	add	r3, r2
 80017da:	3354      	adds	r3, #84	; 0x54
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	212c      	movs	r1, #44	; 0x2c
 80017e8:	fb01 f303 	mul.w	r3, r1, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	3342      	adds	r3, #66	; 0x42
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
      break;
 80017f4:	e055      	b.n	80018a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	212c      	movs	r1, #44	; 0x2c
 80017fc:	fb01 f303 	mul.w	r3, r1, r3
 8001800:	4413      	add	r3, r2
 8001802:	3342      	adds	r3, #66	; 0x42
 8001804:	2202      	movs	r2, #2
 8001806:	701a      	strb	r2, [r3, #0]
      break;
 8001808:	e04b      	b.n	80018a2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800180a:	78bb      	ldrb	r3, [r7, #2]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d11d      	bne.n	800184c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	212c      	movs	r1, #44	; 0x2c
 8001816:	fb01 f303 	mul.w	r3, r1, r3
 800181a:	4413      	add	r3, r2
 800181c:	3355      	adds	r3, #85	; 0x55
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d109      	bne.n	8001838 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	212c      	movs	r1, #44	; 0x2c
 800182a:	fb01 f303 	mul.w	r3, r1, r3
 800182e:	4413      	add	r3, r2
 8001830:	3342      	adds	r3, #66	; 0x42
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001836:	e034      	b.n	80018a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	212c      	movs	r1, #44	; 0x2c
 800183e:	fb01 f303 	mul.w	r3, r1, r3
 8001842:	4413      	add	r3, r2
 8001844:	3342      	adds	r3, #66	; 0x42
 8001846:	2202      	movs	r2, #2
 8001848:	701a      	strb	r2, [r3, #0]
      break;
 800184a:	e02a      	b.n	80018a2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	212c      	movs	r1, #44	; 0x2c
 8001852:	fb01 f303 	mul.w	r3, r1, r3
 8001856:	4413      	add	r3, r2
 8001858:	3354      	adds	r3, #84	; 0x54
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d109      	bne.n	8001874 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	212c      	movs	r1, #44	; 0x2c
 8001866:	fb01 f303 	mul.w	r3, r1, r3
 800186a:	4413      	add	r3, r2
 800186c:	3342      	adds	r3, #66	; 0x42
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
      break;
 8001872:	e016      	b.n	80018a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	212c      	movs	r1, #44	; 0x2c
 800187a:	fb01 f303 	mul.w	r3, r1, r3
 800187e:	4413      	add	r3, r2
 8001880:	3342      	adds	r3, #66	; 0x42
 8001882:	2202      	movs	r2, #2
 8001884:	701a      	strb	r2, [r3, #0]
      break;
 8001886:	e00c      	b.n	80018a2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	212c      	movs	r1, #44	; 0x2c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	3342      	adds	r3, #66	; 0x42
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
      break;
 800189a:	e002      	b.n	80018a2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800189c:	bf00      	nop
 800189e:	e000      	b.n	80018a2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80018a0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	212c      	movs	r1, #44	; 0x2c
 80018a8:	fb01 f303 	mul.w	r3, r1, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	3344      	adds	r3, #68	; 0x44
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	8b3a      	ldrh	r2, [r7, #24]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	202c      	movs	r0, #44	; 0x2c
 80018bc:	fb00 f303 	mul.w	r3, r0, r3
 80018c0:	440b      	add	r3, r1
 80018c2:	334c      	adds	r3, #76	; 0x4c
 80018c4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	212c      	movs	r1, #44	; 0x2c
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	3360      	adds	r3, #96	; 0x60
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	212c      	movs	r1, #44	; 0x2c
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	3350      	adds	r3, #80	; 0x50
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018ea:	78fb      	ldrb	r3, [r7, #3]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	212c      	movs	r1, #44	; 0x2c
 80018f0:	fb01 f303 	mul.w	r3, r1, r3
 80018f4:	4413      	add	r3, r2
 80018f6:	3339      	adds	r3, #57	; 0x39
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	212c      	movs	r1, #44	; 0x2c
 8001902:	fb01 f303 	mul.w	r3, r1, r3
 8001906:	4413      	add	r3, r2
 8001908:	3361      	adds	r3, #97	; 0x61
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	222c      	movs	r2, #44	; 0x2c
 8001916:	fb02 f303 	mul.w	r3, r2, r3
 800191a:	3338      	adds	r3, #56	; 0x38
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	18d1      	adds	r1, r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	f003 fa9e 	bl	8004e68 <USB_HC_StartXfer>
 800192c:	4603      	mov	r3, r0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop

08001938 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f002 ff9f 	bl	8004892 <USB_GetMode>
 8001954:	4603      	mov	r3, r0
 8001956:	2b01      	cmp	r3, #1
 8001958:	f040 80f6 	bne.w	8001b48 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f002 ff83 	bl	800486c <USB_ReadInterrupts>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80ec 	beq.w	8001b46 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f002 ff7a 	bl	800486c <USB_ReadInterrupts>
 8001978:	4603      	mov	r3, r0
 800197a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800197e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001982:	d104      	bne.n	800198e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800198c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f002 ff6a 	bl	800486c <USB_ReadInterrupts>
 8001998:	4603      	mov	r3, r0
 800199a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019a2:	d104      	bne.n	80019ae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f002 ff5a 	bl	800486c <USB_ReadInterrupts>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019c2:	d104      	bne.n	80019ce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f002 ff4a 	bl	800486c <USB_ReadInterrupts>
 80019d8:	4603      	mov	r3, r0
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d103      	bne.n	80019ea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2202      	movs	r2, #2
 80019e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 ff3c 	bl	800486c <USB_ReadInterrupts>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019fe:	d11c      	bne.n	8001a3a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a08:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10f      	bne.n	8001a3a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a1a:	2110      	movs	r1, #16
 8001a1c:	6938      	ldr	r0, [r7, #16]
 8001a1e:	f002 fe2b 	bl	8004678 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a22:	6938      	ldr	r0, [r7, #16]
 8001a24:	f002 fe5c 	bl	80046e0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 f832 	bl	8004a98 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f005 fdff 	bl	8007638 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 ff14 	bl	800486c <USB_ReadInterrupts>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a4e:	d102      	bne.n	8001a56 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f001 f89e 	bl	8002b92 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 ff06 	bl	800486c <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d106      	bne.n	8001a78 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f005 fdc8 	bl	8007600 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2208      	movs	r2, #8
 8001a76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 fef5 	bl	800486c <USB_ReadInterrupts>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f003 0310 	and.w	r3, r3, #16
 8001a88:	2b10      	cmp	r3, #16
 8001a8a:	d101      	bne.n	8001a90 <HAL_HCD_IRQHandler+0x158>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_HCD_IRQHandler+0x15a>
 8001a90:	2300      	movs	r3, #0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d012      	beq.n	8001abc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	699a      	ldr	r2, [r3, #24]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0210 	bic.w	r2, r2, #16
 8001aa4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 ffa1 	bl	80029ee <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	699a      	ldr	r2, [r3, #24]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0210 	orr.w	r2, r2, #16
 8001aba:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 fed3 	bl	800486c <USB_ReadInterrupts>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001acc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ad0:	d13a      	bne.n	8001b48 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f003 fb08 	bl	80050ec <USB_HC_ReadInterrupt>
 8001adc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	e025      	b.n	8001b30 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d018      	beq.n	8001b2a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	015a      	lsls	r2, r3, #5
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b0e:	d106      	bne.n	8001b1e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	4619      	mov	r1, r3
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f8ab 	bl	8001c72 <HCD_HC_IN_IRQHandler>
 8001b1c:	e005      	b.n	8001b2a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	4619      	mov	r1, r3
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 fbf9 	bl	800231c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d3d4      	bcc.n	8001ae4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b42:	615a      	str	r2, [r3, #20]
 8001b44:	e000      	b.n	8001b48 <HAL_HCD_IRQHandler+0x210>
      return;
 8001b46:	bf00      	nop
    }
  }
}
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_HCD_Start+0x16>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e013      	b.n	8001b8c <HAL_HCD_Start+0x3e>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2101      	movs	r1, #1
 8001b72:	4618      	mov	r0, r3
 8001b74:	f002 fff4 	bl	8004b60 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f002 fd0d 	bl	800459c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_HCD_Stop+0x16>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e00d      	b.n	8001bc6 <HAL_HCD_Stop+0x32>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 fbe2 	bl	8005380 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f002 ff96 	bl	8004b0c <USB_ResetPort>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	212c      	movs	r1, #44	; 0x2c
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	3360      	adds	r3, #96	; 0x60
 8001c04:	781b      	ldrb	r3, [r3, #0]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	212c      	movs	r1, #44	; 0x2c
 8001c24:	fb01 f303 	mul.w	r3, r1, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	3350      	adds	r3, #80	; 0x50
 8001c2c:	681b      	ldr	r3, [r3, #0]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f002 ffda 	bl	8004c00 <USB_GetCurrentFrame>
 8001c4c:	4603      	mov	r3, r0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f002 ffb5 	bl	8004bd2 <USB_GetHostSpeed>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	015a      	lsls	r2, r3, #5
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4413      	add	r3, r2
 8001c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d11a      	bne.n	8001cd8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	015a      	lsls	r2, r3, #5
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4413      	add	r3, r2
 8001caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cae:	461a      	mov	r2, r3
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	212c      	movs	r1, #44	; 0x2c
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3361      	adds	r3, #97	; 0x61
 8001cc2:	2206      	movs	r2, #6
 8001cc4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 fa1c 	bl	800510e <USB_HC_Halt>
 8001cd6:	e0af      	b.n	8001e38 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	015a      	lsls	r2, r3, #5
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4413      	add	r3, r2
 8001ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cee:	d11b      	bne.n	8001d28 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	015a      	lsls	r2, r3, #5
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	212c      	movs	r1, #44	; 0x2c
 8001d0a:	fb01 f303 	mul.w	r3, r1, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	3361      	adds	r3, #97	; 0x61
 8001d12:	2207      	movs	r2, #7
 8001d14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f003 f9f4 	bl	800510e <USB_HC_Halt>
 8001d26:	e087      	b.n	8001e38 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	015a      	lsls	r2, r3, #5
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0320 	and.w	r3, r3, #32
 8001d3a:	2b20      	cmp	r3, #32
 8001d3c:	d109      	bne.n	8001d52 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	015a      	lsls	r2, r3, #5
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4413      	add	r3, r2
 8001d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	2320      	movs	r3, #32
 8001d4e:	6093      	str	r3, [r2, #8]
 8001d50:	e072      	b.n	8001e38 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	015a      	lsls	r2, r3, #5
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d11a      	bne.n	8001d9e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	015a      	lsls	r2, r3, #5
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d74:	461a      	mov	r2, r3
 8001d76:	2308      	movs	r3, #8
 8001d78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	212c      	movs	r1, #44	; 0x2c
 8001d80:	fb01 f303 	mul.w	r3, r1, r3
 8001d84:	4413      	add	r3, r2
 8001d86:	3361      	adds	r3, #97	; 0x61
 8001d88:	2205      	movs	r2, #5
 8001d8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	4611      	mov	r1, r2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 f9b9 	bl	800510e <USB_HC_Halt>
 8001d9c:	e04c      	b.n	8001e38 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db4:	d11b      	bne.n	8001dee <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	212c      	movs	r1, #44	; 0x2c
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3361      	adds	r3, #97	; 0x61
 8001dd8:	2208      	movs	r2, #8
 8001dda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	4611      	mov	r1, r2
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 f991 	bl	800510e <USB_HC_Halt>
 8001dec:	e024      	b.n	8001e38 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	015a      	lsls	r2, r3, #5
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4413      	add	r3, r2
 8001df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e00:	2b80      	cmp	r3, #128	; 0x80
 8001e02:	d119      	bne.n	8001e38 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e10:	461a      	mov	r2, r3
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	212c      	movs	r1, #44	; 0x2c
 8001e1c:	fb01 f303 	mul.w	r3, r1, r3
 8001e20:	4413      	add	r3, r2
 8001e22:	3361      	adds	r3, #97	; 0x61
 8001e24:	2206      	movs	r2, #6
 8001e26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	4611      	mov	r1, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 f96b 	bl	800510e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e4e:	d112      	bne.n	8001e76 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 f957 	bl	800510e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	015a      	lsls	r2, r3, #5
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e72:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e74:	e24e      	b.n	8002314 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	015a      	lsls	r2, r3, #5
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	f040 80df 	bne.w	800204c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d019      	beq.n	8001eca <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	212c      	movs	r1, #44	; 0x2c
 8001e9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3348      	adds	r3, #72	; 0x48
 8001ea4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	0159      	lsls	r1, r3, #5
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	440b      	add	r3, r1
 8001eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001eb8:	1ad2      	subs	r2, r2, r3
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	202c      	movs	r0, #44	; 0x2c
 8001ec0:	fb00 f303 	mul.w	r3, r0, r3
 8001ec4:	440b      	add	r3, r1
 8001ec6:	3350      	adds	r3, #80	; 0x50
 8001ec8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	212c      	movs	r1, #44	; 0x2c
 8001ed0:	fb01 f303 	mul.w	r3, r1, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3361      	adds	r3, #97	; 0x61
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	212c      	movs	r1, #44	; 0x2c
 8001ee2:	fb01 f303 	mul.w	r3, r1, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	335c      	adds	r3, #92	; 0x5c
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	015a      	lsls	r2, r3, #5
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efa:	461a      	mov	r2, r3
 8001efc:	2301      	movs	r3, #1
 8001efe:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	212c      	movs	r1, #44	; 0x2c
 8001f06:	fb01 f303 	mul.w	r3, r1, r3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	333f      	adds	r3, #63	; 0x3f
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d009      	beq.n	8001f28 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	212c      	movs	r1, #44	; 0x2c
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	333f      	adds	r3, #63	; 0x3f
 8001f22:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d111      	bne.n	8001f4c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 f8eb 	bl	800510e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f44:	461a      	mov	r2, r3
 8001f46:	2310      	movs	r3, #16
 8001f48:	6093      	str	r3, [r2, #8]
 8001f4a:	e03a      	b.n	8001fc2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	212c      	movs	r1, #44	; 0x2c
 8001f52:	fb01 f303 	mul.w	r3, r1, r3
 8001f56:	4413      	add	r3, r2
 8001f58:	333f      	adds	r3, #63	; 0x3f
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d009      	beq.n	8001f74 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	212c      	movs	r1, #44	; 0x2c
 8001f66:	fb01 f303 	mul.w	r3, r1, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	333f      	adds	r3, #63	; 0x3f
 8001f6e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d126      	bne.n	8001fc2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	0151      	lsls	r1, r2, #5
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	440a      	add	r2, r1
 8001f8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f92:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	212c      	movs	r1, #44	; 0x2c
 8001f9a:	fb01 f303 	mul.w	r3, r1, r3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3360      	adds	r3, #96	; 0x60
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	b2d9      	uxtb	r1, r3
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	202c      	movs	r0, #44	; 0x2c
 8001fb0:	fb00 f303 	mul.w	r3, r0, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3360      	adds	r3, #96	; 0x60
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f005 fb49 	bl	8007654 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d12b      	bne.n	8002022 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	212c      	movs	r1, #44	; 0x2c
 8001fd0:	fb01 f303 	mul.w	r3, r1, r3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3348      	adds	r3, #72	; 0x48
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	202c      	movs	r0, #44	; 0x2c
 8001fe0:	fb00 f202 	mul.w	r2, r0, r2
 8001fe4:	440a      	add	r2, r1
 8001fe6:	3240      	adds	r2, #64	; 0x40
 8001fe8:	8812      	ldrh	r2, [r2, #0]
 8001fea:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 818e 	beq.w	8002314 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	212c      	movs	r1, #44	; 0x2c
 8001ffe:	fb01 f303 	mul.w	r3, r1, r3
 8002002:	4413      	add	r3, r2
 8002004:	3354      	adds	r3, #84	; 0x54
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	f083 0301 	eor.w	r3, r3, #1
 800200c:	b2d8      	uxtb	r0, r3
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	212c      	movs	r1, #44	; 0x2c
 8002014:	fb01 f303 	mul.w	r3, r1, r3
 8002018:	4413      	add	r3, r2
 800201a:	3354      	adds	r3, #84	; 0x54
 800201c:	4602      	mov	r2, r0
 800201e:	701a      	strb	r2, [r3, #0]
}
 8002020:	e178      	b.n	8002314 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	212c      	movs	r1, #44	; 0x2c
 8002028:	fb01 f303 	mul.w	r3, r1, r3
 800202c:	4413      	add	r3, r2
 800202e:	3354      	adds	r3, #84	; 0x54
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	f083 0301 	eor.w	r3, r3, #1
 8002036:	b2d8      	uxtb	r0, r3
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	212c      	movs	r1, #44	; 0x2c
 800203e:	fb01 f303 	mul.w	r3, r1, r3
 8002042:	4413      	add	r3, r2
 8002044:	3354      	adds	r3, #84	; 0x54
 8002046:	4602      	mov	r2, r0
 8002048:	701a      	strb	r2, [r3, #0]
}
 800204a:	e163      	b.n	8002314 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	015a      	lsls	r2, r3, #5
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4413      	add	r3, r2
 8002054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b02      	cmp	r3, #2
 8002060:	f040 80f6 	bne.w	8002250 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	212c      	movs	r1, #44	; 0x2c
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	4413      	add	r3, r2
 8002070:	3361      	adds	r3, #97	; 0x61
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d109      	bne.n	800208c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	3360      	adds	r3, #96	; 0x60
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	e0c9      	b.n	8002220 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	3361      	adds	r3, #97	; 0x61
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b05      	cmp	r3, #5
 800209e:	d109      	bne.n	80020b4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	212c      	movs	r1, #44	; 0x2c
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	3360      	adds	r3, #96	; 0x60
 80020ae:	2205      	movs	r2, #5
 80020b0:	701a      	strb	r2, [r3, #0]
 80020b2:	e0b5      	b.n	8002220 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	212c      	movs	r1, #44	; 0x2c
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	4413      	add	r3, r2
 80020c0:	3361      	adds	r3, #97	; 0x61
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b06      	cmp	r3, #6
 80020c6:	d009      	beq.n	80020dc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	212c      	movs	r1, #44	; 0x2c
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	3361      	adds	r3, #97	; 0x61
 80020d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d150      	bne.n	800217e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	212c      	movs	r1, #44	; 0x2c
 80020e2:	fb01 f303 	mul.w	r3, r1, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	335c      	adds	r3, #92	; 0x5c
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	202c      	movs	r0, #44	; 0x2c
 80020f4:	fb00 f303 	mul.w	r3, r0, r3
 80020f8:	440b      	add	r3, r1
 80020fa:	335c      	adds	r3, #92	; 0x5c
 80020fc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	212c      	movs	r1, #44	; 0x2c
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	4413      	add	r3, r2
 800210a:	335c      	adds	r3, #92	; 0x5c
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d912      	bls.n	8002138 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	212c      	movs	r1, #44	; 0x2c
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	4413      	add	r3, r2
 800211e:	335c      	adds	r3, #92	; 0x5c
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	3360      	adds	r3, #96	; 0x60
 8002132:	2204      	movs	r2, #4
 8002134:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002136:	e073      	b.n	8002220 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	212c      	movs	r1, #44	; 0x2c
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	4413      	add	r3, r2
 8002144:	3360      	adds	r3, #96	; 0x60
 8002146:	2202      	movs	r2, #2
 8002148:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4413      	add	r3, r2
 8002152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002160:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002168:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4413      	add	r3, r2
 8002172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002176:	461a      	mov	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800217c:	e050      	b.n	8002220 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	212c      	movs	r1, #44	; 0x2c
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	4413      	add	r3, r2
 800218a:	3361      	adds	r3, #97	; 0x61
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d122      	bne.n	80021d8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	3360      	adds	r3, #96	; 0x60
 80021a0:	2202      	movs	r2, #2
 80021a2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021ba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021c2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d0:	461a      	mov	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e023      	b.n	8002220 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	212c      	movs	r1, #44	; 0x2c
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	3361      	adds	r3, #97	; 0x61
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b07      	cmp	r3, #7
 80021ea:	d119      	bne.n	8002220 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	335c      	adds	r3, #92	; 0x5c
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	202c      	movs	r0, #44	; 0x2c
 8002204:	fb00 f303 	mul.w	r3, r0, r3
 8002208:	440b      	add	r3, r1
 800220a:	335c      	adds	r3, #92	; 0x5c
 800220c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	212c      	movs	r1, #44	; 0x2c
 8002214:	fb01 f303 	mul.w	r3, r1, r3
 8002218:	4413      	add	r3, r2
 800221a:	3360      	adds	r3, #96	; 0x60
 800221c:	2204      	movs	r2, #4
 800221e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4413      	add	r3, r2
 8002228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222c:	461a      	mov	r2, r3
 800222e:	2302      	movs	r3, #2
 8002230:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	b2d9      	uxtb	r1, r3
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	202c      	movs	r0, #44	; 0x2c
 800223c:	fb00 f303 	mul.w	r3, r0, r3
 8002240:	4413      	add	r3, r2
 8002242:	3360      	adds	r3, #96	; 0x60
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f005 fa03 	bl	8007654 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800224e:	e061      	b.n	8002314 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b10      	cmp	r3, #16
 8002264:	d156      	bne.n	8002314 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	4413      	add	r3, r2
 8002272:	333f      	adds	r3, #63	; 0x3f
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d111      	bne.n	800229e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	335c      	adds	r3, #92	; 0x5c
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f002 ff39 	bl	800510e <USB_HC_Halt>
 800229c:	e031      	b.n	8002302 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	333f      	adds	r3, #63	; 0x3f
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	333f      	adds	r3, #63	; 0x3f
 80022c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d11d      	bne.n	8002302 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	335c      	adds	r3, #92	; 0x5c
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d110      	bne.n	8002302 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	3361      	adds	r3, #97	; 0x61
 80022ee:	2203      	movs	r2, #3
 80022f0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f002 ff06 	bl	800510e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4413      	add	r3, r2
 800230a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230e:	461a      	mov	r2, r3
 8002310:	2310      	movs	r3, #16
 8002312:	6093      	str	r3, [r2, #8]
}
 8002314:	bf00      	nop
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	4413      	add	r3, r2
 800233e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b04      	cmp	r3, #4
 800234a:	d11a      	bne.n	8002382 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002358:	461a      	mov	r2, r3
 800235a:	2304      	movs	r3, #4
 800235c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	212c      	movs	r1, #44	; 0x2c
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	4413      	add	r3, r2
 800236a:	3361      	adds	r3, #97	; 0x61
 800236c:	2206      	movs	r2, #6
 800236e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f002 fec7 	bl	800510e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002380:	e331      	b.n	80029e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	4413      	add	r3, r2
 800238a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0320 	and.w	r3, r3, #32
 8002394:	2b20      	cmp	r3, #32
 8002396:	d12e      	bne.n	80023f6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a4:	461a      	mov	r2, r3
 80023a6:	2320      	movs	r3, #32
 80023a8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	212c      	movs	r1, #44	; 0x2c
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	333d      	adds	r3, #61	; 0x3d
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	f040 8313 	bne.w	80029e6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	212c      	movs	r1, #44	; 0x2c
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	333d      	adds	r3, #61	; 0x3d
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	212c      	movs	r1, #44	; 0x2c
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	3360      	adds	r3, #96	; 0x60
 80023e0:	2202      	movs	r2, #2
 80023e2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	4611      	mov	r1, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 fe8d 	bl	800510e <USB_HC_Halt>
}
 80023f4:	e2f7      	b.n	80029e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800240c:	d112      	bne.n	8002434 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	4413      	add	r3, r2
 8002416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241a:	461a      	mov	r2, r3
 800241c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002420:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f002 fe6e 	bl	800510e <USB_HC_Halt>
}
 8002432:	e2d8      	b.n	80029e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	4413      	add	r3, r2
 800243c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b01      	cmp	r3, #1
 8002448:	d140      	bne.n	80024cc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	4413      	add	r3, r2
 8002456:	335c      	adds	r3, #92	; 0x5c
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	4413      	add	r3, r2
 8002464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246e:	2b40      	cmp	r3, #64	; 0x40
 8002470:	d111      	bne.n	8002496 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	212c      	movs	r1, #44	; 0x2c
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4413      	add	r3, r2
 800247e:	333d      	adds	r3, #61	; 0x3d
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	4413      	add	r3, r2
 800248c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002490:	461a      	mov	r2, r3
 8002492:	2340      	movs	r3, #64	; 0x40
 8002494:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	4413      	add	r3, r2
 800249e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a2:	461a      	mov	r2, r3
 80024a4:	2301      	movs	r3, #1
 80024a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	212c      	movs	r1, #44	; 0x2c
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	4413      	add	r3, r2
 80024b4:	3361      	adds	r3, #97	; 0x61
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f002 fe22 	bl	800510e <USB_HC_Halt>
}
 80024ca:	e28c      	b.n	80029e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024de:	2b40      	cmp	r3, #64	; 0x40
 80024e0:	d12c      	bne.n	800253c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	212c      	movs	r1, #44	; 0x2c
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	3361      	adds	r3, #97	; 0x61
 80024f0:	2204      	movs	r2, #4
 80024f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	333d      	adds	r3, #61	; 0x3d
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	335c      	adds	r3, #92	; 0x5c
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	4611      	mov	r1, r2
 8002522:	4618      	mov	r0, r3
 8002524:	f002 fdf3 	bl	800510e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	4413      	add	r3, r2
 8002530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002534:	461a      	mov	r2, r3
 8002536:	2340      	movs	r3, #64	; 0x40
 8002538:	6093      	str	r3, [r2, #8]
}
 800253a:	e254      	b.n	80029e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b08      	cmp	r3, #8
 8002550:	d11a      	bne.n	8002588 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	4413      	add	r3, r2
 800255a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255e:	461a      	mov	r2, r3
 8002560:	2308      	movs	r3, #8
 8002562:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	212c      	movs	r1, #44	; 0x2c
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	3361      	adds	r3, #97	; 0x61
 8002572:	2205      	movs	r2, #5
 8002574:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f002 fdc4 	bl	800510e <USB_HC_Halt>
}
 8002586:	e22e      	b.n	80029e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	2b10      	cmp	r3, #16
 800259c:	d140      	bne.n	8002620 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	335c      	adds	r3, #92	; 0x5c
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	3361      	adds	r3, #97	; 0x61
 80025be:	2203      	movs	r2, #3
 80025c0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	212c      	movs	r1, #44	; 0x2c
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	333d      	adds	r3, #61	; 0x3d
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d112      	bne.n	80025fc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	333c      	adds	r3, #60	; 0x3c
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d108      	bne.n	80025fc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	212c      	movs	r1, #44	; 0x2c
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	4413      	add	r3, r2
 80025f6:	333d      	adds	r3, #61	; 0x3d
 80025f8:	2201      	movs	r2, #1
 80025fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f002 fd81 	bl	800510e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	4413      	add	r3, r2
 8002614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002618:	461a      	mov	r2, r3
 800261a:	2310      	movs	r3, #16
 800261c:	6093      	str	r3, [r2, #8]
}
 800261e:	e1e2      	b.n	80029e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002632:	2b80      	cmp	r3, #128	; 0x80
 8002634:	d164      	bne.n	8002700 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d111      	bne.n	8002662 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	3361      	adds	r3, #97	; 0x61
 800264c:	2206      	movs	r2, #6
 800264e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f002 fd57 	bl	800510e <USB_HC_Halt>
 8002660:	e044      	b.n	80026ec <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	212c      	movs	r1, #44	; 0x2c
 8002668:	fb01 f303 	mul.w	r3, r1, r3
 800266c:	4413      	add	r3, r2
 800266e:	335c      	adds	r3, #92	; 0x5c
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	202c      	movs	r0, #44	; 0x2c
 800267a:	fb00 f303 	mul.w	r3, r0, r3
 800267e:	440b      	add	r3, r1
 8002680:	335c      	adds	r3, #92	; 0x5c
 8002682:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	212c      	movs	r1, #44	; 0x2c
 800268a:	fb01 f303 	mul.w	r3, r1, r3
 800268e:	4413      	add	r3, r2
 8002690:	335c      	adds	r3, #92	; 0x5c
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d920      	bls.n	80026da <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	212c      	movs	r1, #44	; 0x2c
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	335c      	adds	r3, #92	; 0x5c
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	212c      	movs	r1, #44	; 0x2c
 80026b0:	fb01 f303 	mul.w	r3, r1, r3
 80026b4:	4413      	add	r3, r2
 80026b6:	3360      	adds	r3, #96	; 0x60
 80026b8:	2204      	movs	r2, #4
 80026ba:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	b2d9      	uxtb	r1, r3
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	202c      	movs	r0, #44	; 0x2c
 80026c6:	fb00 f303 	mul.w	r3, r0, r3
 80026ca:	4413      	add	r3, r2
 80026cc:	3360      	adds	r3, #96	; 0x60
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f004 ffbe 	bl	8007654 <HAL_HCD_HC_NotifyURBChange_Callback>
 80026d8:	e008      	b.n	80026ec <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	212c      	movs	r1, #44	; 0x2c
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	3360      	adds	r3, #96	; 0x60
 80026e8:	2202      	movs	r2, #2
 80026ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f8:	461a      	mov	r2, r3
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	6093      	str	r3, [r2, #8]
}
 80026fe:	e172      	b.n	80029e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002716:	d11b      	bne.n	8002750 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	212c      	movs	r1, #44	; 0x2c
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	4413      	add	r3, r2
 8002724:	3361      	adds	r3, #97	; 0x61
 8002726:	2208      	movs	r2, #8
 8002728:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f002 fcea 	bl	800510e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	4413      	add	r3, r2
 8002742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002746:	461a      	mov	r2, r3
 8002748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800274c:	6093      	str	r3, [r2, #8]
}
 800274e:	e14a      	b.n	80029e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b02      	cmp	r3, #2
 8002764:	f040 813f 	bne.w	80029e6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	212c      	movs	r1, #44	; 0x2c
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	3361      	adds	r3, #97	; 0x61
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d17d      	bne.n	8002878 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	212c      	movs	r1, #44	; 0x2c
 8002782:	fb01 f303 	mul.w	r3, r1, r3
 8002786:	4413      	add	r3, r2
 8002788:	3360      	adds	r3, #96	; 0x60
 800278a:	2201      	movs	r2, #1
 800278c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	333f      	adds	r3, #63	; 0x3f
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d00a      	beq.n	80027b8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	333f      	adds	r3, #63	; 0x3f
 80027b0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	f040 8100 	bne.w	80029b8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d113      	bne.n	80027e8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	212c      	movs	r1, #44	; 0x2c
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	3355      	adds	r3, #85	; 0x55
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	f083 0301 	eor.w	r3, r3, #1
 80027d4:	b2d8      	uxtb	r0, r3
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	3355      	adds	r3, #85	; 0x55
 80027e4:	4602      	mov	r2, r0
 80027e6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	f040 80e3 	bne.w	80029b8 <HCD_HC_OUT_IRQHandler+0x69c>
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	334c      	adds	r3, #76	; 0x4c
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 80d8 	beq.w	80029b8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	212c      	movs	r1, #44	; 0x2c
 800280e:	fb01 f303 	mul.w	r3, r1, r3
 8002812:	4413      	add	r3, r2
 8002814:	334c      	adds	r3, #76	; 0x4c
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	202c      	movs	r0, #44	; 0x2c
 800281e:	fb00 f202 	mul.w	r2, r0, r2
 8002822:	440a      	add	r2, r1
 8002824:	3240      	adds	r2, #64	; 0x40
 8002826:	8812      	ldrh	r2, [r2, #0]
 8002828:	4413      	add	r3, r2
 800282a:	3b01      	subs	r3, #1
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	202c      	movs	r0, #44	; 0x2c
 8002832:	fb00 f202 	mul.w	r2, r0, r2
 8002836:	440a      	add	r2, r1
 8002838:	3240      	adds	r2, #64	; 0x40
 800283a:	8812      	ldrh	r2, [r2, #0]
 800283c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80b5 	beq.w	80029b8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	212c      	movs	r1, #44	; 0x2c
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	4413      	add	r3, r2
 800285a:	3355      	adds	r3, #85	; 0x55
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	f083 0301 	eor.w	r3, r3, #1
 8002862:	b2d8      	uxtb	r0, r3
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	212c      	movs	r1, #44	; 0x2c
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	3355      	adds	r3, #85	; 0x55
 8002872:	4602      	mov	r2, r0
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	e09f      	b.n	80029b8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	212c      	movs	r1, #44	; 0x2c
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	3361      	adds	r3, #97	; 0x61
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b03      	cmp	r3, #3
 800288a:	d109      	bne.n	80028a0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	212c      	movs	r1, #44	; 0x2c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	3360      	adds	r3, #96	; 0x60
 800289a:	2202      	movs	r2, #2
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	e08b      	b.n	80029b8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	212c      	movs	r1, #44	; 0x2c
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	3361      	adds	r3, #97	; 0x61
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d109      	bne.n	80028c8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	212c      	movs	r1, #44	; 0x2c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	3360      	adds	r3, #96	; 0x60
 80028c2:	2202      	movs	r2, #2
 80028c4:	701a      	strb	r2, [r3, #0]
 80028c6:	e077      	b.n	80029b8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	212c      	movs	r1, #44	; 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	3361      	adds	r3, #97	; 0x61
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b05      	cmp	r3, #5
 80028da:	d109      	bne.n	80028f0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	3360      	adds	r3, #96	; 0x60
 80028ea:	2205      	movs	r2, #5
 80028ec:	701a      	strb	r2, [r3, #0]
 80028ee:	e063      	b.n	80029b8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	212c      	movs	r1, #44	; 0x2c
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	3361      	adds	r3, #97	; 0x61
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b06      	cmp	r3, #6
 8002902:	d009      	beq.n	8002918 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	3361      	adds	r3, #97	; 0x61
 8002912:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002914:	2b08      	cmp	r3, #8
 8002916:	d14f      	bne.n	80029b8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	212c      	movs	r1, #44	; 0x2c
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	335c      	adds	r3, #92	; 0x5c
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	202c      	movs	r0, #44	; 0x2c
 8002930:	fb00 f303 	mul.w	r3, r0, r3
 8002934:	440b      	add	r3, r1
 8002936:	335c      	adds	r3, #92	; 0x5c
 8002938:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	335c      	adds	r3, #92	; 0x5c
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d912      	bls.n	8002974 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	335c      	adds	r3, #92	; 0x5c
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	212c      	movs	r1, #44	; 0x2c
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	4413      	add	r3, r2
 800296c:	3360      	adds	r3, #96	; 0x60
 800296e:	2204      	movs	r2, #4
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e021      	b.n	80029b8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	212c      	movs	r1, #44	; 0x2c
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	3360      	adds	r3, #96	; 0x60
 8002982:	2202      	movs	r2, #2
 8002984:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	4413      	add	r3, r2
 800298e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800299c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029a4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b2:	461a      	mov	r2, r3
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c4:	461a      	mov	r2, r3
 80029c6:	2302      	movs	r3, #2
 80029c8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	b2d9      	uxtb	r1, r3
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	202c      	movs	r0, #44	; 0x2c
 80029d4:	fb00 f303 	mul.w	r3, r0, r3
 80029d8:	4413      	add	r3, r2
 80029da:	3360      	adds	r3, #96	; 0x60
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f004 fe37 	bl	8007654 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029e6:	bf00      	nop
 80029e8:	3720      	adds	r7, #32
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b08a      	sub	sp, #40	; 0x28
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	0c5b      	lsrs	r3, r3, #17
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a22:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d004      	beq.n	8002a34 <HCD_RXQLVL_IRQHandler+0x46>
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b05      	cmp	r3, #5
 8002a2e:	f000 80a9 	beq.w	8002b84 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a32:	e0aa      	b.n	8002b8a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 80a6 	beq.w	8002b88 <HCD_RXQLVL_IRQHandler+0x19a>
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	212c      	movs	r1, #44	; 0x2c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	3344      	adds	r3, #68	; 0x44
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 809b 	beq.w	8002b88 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	212c      	movs	r1, #44	; 0x2c
 8002a58:	fb01 f303 	mul.w	r3, r1, r3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3350      	adds	r3, #80	; 0x50
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	441a      	add	r2, r3
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	202c      	movs	r0, #44	; 0x2c
 8002a6c:	fb00 f303 	mul.w	r3, r0, r3
 8002a70:	440b      	add	r3, r1
 8002a72:	334c      	adds	r3, #76	; 0x4c
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d87a      	bhi.n	8002b70 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	212c      	movs	r1, #44	; 0x2c
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	3344      	adds	r3, #68	; 0x44
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	b292      	uxth	r2, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	f001 fe92 	bl	80047bc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3344      	adds	r3, #68	; 0x44
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	441a      	add	r2, r3
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	202c      	movs	r0, #44	; 0x2c
 8002ab2:	fb00 f303 	mul.w	r3, r0, r3
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3344      	adds	r3, #68	; 0x44
 8002aba:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	212c      	movs	r1, #44	; 0x2c
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3350      	adds	r3, #80	; 0x50
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	441a      	add	r2, r3
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	202c      	movs	r0, #44	; 0x2c
 8002ad6:	fb00 f303 	mul.w	r3, r0, r3
 8002ada:	440b      	add	r3, r1
 8002adc:	3350      	adds	r3, #80	; 0x50
 8002ade:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	0cdb      	lsrs	r3, r3, #19
 8002af0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002af4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	3340      	adds	r3, #64	; 0x40
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d13c      	bne.n	8002b88 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d039      	beq.n	8002b88 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b2a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b32:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	461a      	mov	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	212c      	movs	r1, #44	; 0x2c
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	3354      	adds	r3, #84	; 0x54
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	f083 0301 	eor.w	r3, r3, #1
 8002b5a:	b2d8      	uxtb	r0, r3
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	3354      	adds	r3, #84	; 0x54
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	701a      	strb	r2, [r3, #0]
      break;
 8002b6e:	e00b      	b.n	8002b88 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3360      	adds	r3, #96	; 0x60
 8002b7e:	2204      	movs	r2, #4
 8002b80:	701a      	strb	r2, [r3, #0]
      break;
 8002b82:	e001      	b.n	8002b88 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002b84:	bf00      	nop
 8002b86:	e000      	b.n	8002b8a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002b88:	bf00      	nop
  }
}
 8002b8a:	bf00      	nop
 8002b8c:	3728      	adds	r7, #40	; 0x28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002bbe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d10b      	bne.n	8002be2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d102      	bne.n	8002bda <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f004 fd21 	bl	800761c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f043 0302 	orr.w	r3, r3, #2
 8002be0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d132      	bne.n	8002c52 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f043 0308 	orr.w	r3, r3, #8
 8002bf2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d126      	bne.n	8002c4c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d113      	bne.n	8002c2e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c10:	d106      	bne.n	8002c20 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2102      	movs	r1, #2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 ff3d 	bl	8004a98 <USB_InitFSLSPClkSel>
 8002c1e:	e011      	b.n	8002c44 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2101      	movs	r1, #1
 8002c26:	4618      	mov	r0, r3
 8002c28:	f001 ff36 	bl	8004a98 <USB_InitFSLSPClkSel>
 8002c2c:	e00a      	b.n	8002c44 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d106      	bne.n	8002c44 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c42:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f004 fd13 	bl	8007670 <HAL_HCD_PortEnabled_Callback>
 8002c4a:	e002      	b.n	8002c52 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f004 fd1d 	bl	800768c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 0320 	and.w	r3, r3, #32
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d103      	bne.n	8002c64 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f043 0320 	orr.w	r3, r3, #32
 8002c62:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	6013      	str	r3, [r2, #0]
}
 8002c70:	bf00      	nop
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e12b      	b.n	8002ee2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7fd fd48 	bl	8000734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2224      	movs	r2, #36	; 0x24
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0201 	bic.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cdc:	f001 fa20 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 8002ce0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4a81      	ldr	r2, [pc, #516]	; (8002eec <HAL_I2C_Init+0x274>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d807      	bhi.n	8002cfc <HAL_I2C_Init+0x84>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4a80      	ldr	r2, [pc, #512]	; (8002ef0 <HAL_I2C_Init+0x278>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	bf94      	ite	ls
 8002cf4:	2301      	movls	r3, #1
 8002cf6:	2300      	movhi	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e006      	b.n	8002d0a <HAL_I2C_Init+0x92>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4a7d      	ldr	r2, [pc, #500]	; (8002ef4 <HAL_I2C_Init+0x27c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	bf94      	ite	ls
 8002d04:	2301      	movls	r3, #1
 8002d06:	2300      	movhi	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e0e7      	b.n	8002ee2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4a78      	ldr	r2, [pc, #480]	; (8002ef8 <HAL_I2C_Init+0x280>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	0c9b      	lsrs	r3, r3, #18
 8002d1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4a6a      	ldr	r2, [pc, #424]	; (8002eec <HAL_I2C_Init+0x274>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d802      	bhi.n	8002d4c <HAL_I2C_Init+0xd4>
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	e009      	b.n	8002d60 <HAL_I2C_Init+0xe8>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d52:	fb02 f303 	mul.w	r3, r2, r3
 8002d56:	4a69      	ldr	r2, [pc, #420]	; (8002efc <HAL_I2C_Init+0x284>)
 8002d58:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5c:	099b      	lsrs	r3, r3, #6
 8002d5e:	3301      	adds	r3, #1
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	430b      	orrs	r3, r1
 8002d66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	495c      	ldr	r1, [pc, #368]	; (8002eec <HAL_I2C_Init+0x274>)
 8002d7c:	428b      	cmp	r3, r1
 8002d7e:	d819      	bhi.n	8002db4 <HAL_I2C_Init+0x13c>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1e59      	subs	r1, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d8e:	1c59      	adds	r1, r3, #1
 8002d90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d94:	400b      	ands	r3, r1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_I2C_Init+0x138>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1e59      	subs	r1, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dae:	e051      	b.n	8002e54 <HAL_I2C_Init+0x1dc>
 8002db0:	2304      	movs	r3, #4
 8002db2:	e04f      	b.n	8002e54 <HAL_I2C_Init+0x1dc>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d111      	bne.n	8002de0 <HAL_I2C_Init+0x168>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1e58      	subs	r0, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	440b      	add	r3, r1
 8002dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	e012      	b.n	8002e06 <HAL_I2C_Init+0x18e>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1e58      	subs	r0, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6859      	ldr	r1, [r3, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	0099      	lsls	r1, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df6:	3301      	adds	r3, #1
 8002df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_Init+0x196>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e022      	b.n	8002e54 <HAL_I2C_Init+0x1dc>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10e      	bne.n	8002e34 <HAL_I2C_Init+0x1bc>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1e58      	subs	r0, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6859      	ldr	r1, [r3, #4]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	440b      	add	r3, r1
 8002e24:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e32:	e00f      	b.n	8002e54 <HAL_I2C_Init+0x1dc>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1e58      	subs	r0, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	0099      	lsls	r1, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	6809      	ldr	r1, [r1, #0]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69da      	ldr	r2, [r3, #28]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6911      	ldr	r1, [r2, #16]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	68d2      	ldr	r2, [r2, #12]
 8002e8e:	4311      	orrs	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	430b      	orrs	r3, r1
 8002e96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	000186a0 	.word	0x000186a0
 8002ef0:	001e847f 	.word	0x001e847f
 8002ef4:	003d08ff 	.word	0x003d08ff
 8002ef8:	431bde83 	.word	0x431bde83
 8002efc:	10624dd3 	.word	0x10624dd3

08002f00 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e128      	b.n	8003164 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a90      	ldr	r2, [pc, #576]	; (800316c <HAL_I2S_Init+0x26c>)
 8002f2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7fd fc79 	bl	8000824 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2202      	movs	r2, #2
 8002f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f48:	f023 030f 	bic.w	r3, r3, #15
 8002f4c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2202      	movs	r2, #2
 8002f54:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d060      	beq.n	8003020 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d102      	bne.n	8002f6c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f66:	2310      	movs	r3, #16
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	e001      	b.n	8002f70 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f6c:	2320      	movs	r3, #32
 8002f6e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d802      	bhi.n	8002f7e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f001 f9c4 	bl	800430c <HAL_RCCEx_GetPeriphCLKFreq>
 8002f84:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f8e:	d125      	bne.n	8002fdc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d010      	beq.n	8002fba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	461a      	mov	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb4:	3305      	adds	r3, #5
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	e01f      	b.n	8002ffa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	461a      	mov	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd6:	3305      	adds	r3, #5
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	e00e      	b.n	8002ffa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	461a      	mov	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff6:	3305      	adds	r3, #5
 8002ff8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4a5c      	ldr	r2, [pc, #368]	; (8003170 <HAL_I2S_Init+0x270>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	08db      	lsrs	r3, r3, #3
 8003004:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	085b      	lsrs	r3, r3, #1
 8003016:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	e003      	b.n	8003028 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003020:	2302      	movs	r3, #2
 8003022:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d902      	bls.n	8003034 <HAL_I2S_Init+0x134>
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	2bff      	cmp	r3, #255	; 0xff
 8003032:	d907      	bls.n	8003044 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003038:	f043 0210 	orr.w	r2, r3, #16
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e08f      	b.n	8003164 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	ea42 0103 	orr.w	r1, r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	430a      	orrs	r2, r1
 8003056:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003062:	f023 030f 	bic.w	r3, r3, #15
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6851      	ldr	r1, [r2, #4]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6892      	ldr	r2, [r2, #8]
 800306e:	4311      	orrs	r1, r2
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	68d2      	ldr	r2, [r2, #12]
 8003074:	4311      	orrs	r1, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6992      	ldr	r2, [r2, #24]
 800307a:	430a      	orrs	r2, r1
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003086:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d161      	bne.n	8003154 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a38      	ldr	r2, [pc, #224]	; (8003174 <HAL_I2S_Init+0x274>)
 8003094:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a37      	ldr	r2, [pc, #220]	; (8003178 <HAL_I2S_Init+0x278>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d101      	bne.n	80030a4 <HAL_I2S_Init+0x1a4>
 80030a0:	4b36      	ldr	r3, [pc, #216]	; (800317c <HAL_I2S_Init+0x27c>)
 80030a2:	e001      	b.n	80030a8 <HAL_I2S_Init+0x1a8>
 80030a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6812      	ldr	r2, [r2, #0]
 80030ae:	4932      	ldr	r1, [pc, #200]	; (8003178 <HAL_I2S_Init+0x278>)
 80030b0:	428a      	cmp	r2, r1
 80030b2:	d101      	bne.n	80030b8 <HAL_I2S_Init+0x1b8>
 80030b4:	4a31      	ldr	r2, [pc, #196]	; (800317c <HAL_I2S_Init+0x27c>)
 80030b6:	e001      	b.n	80030bc <HAL_I2S_Init+0x1bc>
 80030b8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80030bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030c0:	f023 030f 	bic.w	r3, r3, #15
 80030c4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a2b      	ldr	r2, [pc, #172]	; (8003178 <HAL_I2S_Init+0x278>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d101      	bne.n	80030d4 <HAL_I2S_Init+0x1d4>
 80030d0:	4b2a      	ldr	r3, [pc, #168]	; (800317c <HAL_I2S_Init+0x27c>)
 80030d2:	e001      	b.n	80030d8 <HAL_I2S_Init+0x1d8>
 80030d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030d8:	2202      	movs	r2, #2
 80030da:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a25      	ldr	r2, [pc, #148]	; (8003178 <HAL_I2S_Init+0x278>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d101      	bne.n	80030ea <HAL_I2S_Init+0x1ea>
 80030e6:	4b25      	ldr	r3, [pc, #148]	; (800317c <HAL_I2S_Init+0x27c>)
 80030e8:	e001      	b.n	80030ee <HAL_I2S_Init+0x1ee>
 80030ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030fa:	d003      	beq.n	8003104 <HAL_I2S_Init+0x204>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d103      	bne.n	800310c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003104:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	e001      	b.n	8003110 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800311a:	4313      	orrs	r3, r2
 800311c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003124:	4313      	orrs	r3, r2
 8003126:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800312e:	4313      	orrs	r3, r2
 8003130:	b29a      	uxth	r2, r3
 8003132:	897b      	ldrh	r3, [r7, #10]
 8003134:	4313      	orrs	r3, r2
 8003136:	b29b      	uxth	r3, r3
 8003138:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800313c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a0d      	ldr	r2, [pc, #52]	; (8003178 <HAL_I2S_Init+0x278>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d101      	bne.n	800314c <HAL_I2S_Init+0x24c>
 8003148:	4b0c      	ldr	r3, [pc, #48]	; (800317c <HAL_I2S_Init+0x27c>)
 800314a:	e001      	b.n	8003150 <HAL_I2S_Init+0x250>
 800314c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003150:	897a      	ldrh	r2, [r7, #10]
 8003152:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3720      	adds	r7, #32
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	08003277 	.word	0x08003277
 8003170:	cccccccd 	.word	0xcccccccd
 8003174:	0800338d 	.word	0x0800338d
 8003178:	40003800 	.word	0x40003800
 800317c:	40003400 	.word	0x40003400

08003180 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	881a      	ldrh	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	1c9a      	adds	r2, r3, #2
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10e      	bne.n	8003210 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003200:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff ffb8 	bl	8003180 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	b292      	uxth	r2, r2
 800322c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	1c9a      	adds	r2, r3, #2
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800323c:	b29b      	uxth	r3, r3
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10e      	bne.n	800326e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800325e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff ff93 	bl	8003194 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b086      	sub	sp, #24
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b04      	cmp	r3, #4
 8003290:	d13a      	bne.n	8003308 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b01      	cmp	r3, #1
 800329a:	d109      	bne.n	80032b0 <I2S_IRQHandler+0x3a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a6:	2b40      	cmp	r3, #64	; 0x40
 80032a8:	d102      	bne.n	80032b0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff ffb4 	bl	8003218 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b40      	cmp	r3, #64	; 0x40
 80032b8:	d126      	bne.n	8003308 <I2S_IRQHandler+0x92>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d11f      	bne.n	8003308 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80032d8:	2300      	movs	r3, #0
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	f043 0202 	orr.w	r2, r3, #2
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff ff50 	bl	80031a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b03      	cmp	r3, #3
 8003312:	d136      	bne.n	8003382 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b02      	cmp	r3, #2
 800331c:	d109      	bne.n	8003332 <I2S_IRQHandler+0xbc>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003328:	2b80      	cmp	r3, #128	; 0x80
 800332a:	d102      	bne.n	8003332 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ff45 	bl	80031bc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b08      	cmp	r3, #8
 800333a:	d122      	bne.n	8003382 <I2S_IRQHandler+0x10c>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b20      	cmp	r3, #32
 8003348:	d11b      	bne.n	8003382 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003358:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003374:	f043 0204 	orr.w	r2, r3, #4
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff ff13 	bl	80031a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003382:	bf00      	nop
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a92      	ldr	r2, [pc, #584]	; (80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d101      	bne.n	80033aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80033a6:	4b92      	ldr	r3, [pc, #584]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033a8:	e001      	b.n	80033ae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80033aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a8b      	ldr	r2, [pc, #556]	; (80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d101      	bne.n	80033c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80033c4:	4b8a      	ldr	r3, [pc, #552]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033c6:	e001      	b.n	80033cc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80033c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d8:	d004      	beq.n	80033e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f040 8099 	bne.w	8003516 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d107      	bne.n	80033fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f925 	bl	8003648 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b01      	cmp	r3, #1
 8003406:	d107      	bne.n	8003418 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f9c8 	bl	80037a8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341e:	2b40      	cmp	r3, #64	; 0x40
 8003420:	d13a      	bne.n	8003498 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d035      	beq.n	8003498 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a6e      	ldr	r2, [pc, #440]	; (80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d101      	bne.n	800343a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003436:	4b6e      	ldr	r3, [pc, #440]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003438:	e001      	b.n	800343e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800343a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4969      	ldr	r1, [pc, #420]	; (80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003446:	428b      	cmp	r3, r1
 8003448:	d101      	bne.n	800344e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800344a:	4b69      	ldr	r3, [pc, #420]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800344c:	e001      	b.n	8003452 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800344e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003452:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003456:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003466:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	f043 0202 	orr.w	r2, r3, #2
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7ff fe88 	bl	80031a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b08      	cmp	r3, #8
 80034a0:	f040 80c3 	bne.w	800362a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 80bd 	beq.w	800362a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a49      	ldr	r2, [pc, #292]	; (80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d101      	bne.n	80034ce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80034ca:	4b49      	ldr	r3, [pc, #292]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034cc:	e001      	b.n	80034d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80034ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4944      	ldr	r1, [pc, #272]	; (80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034da:	428b      	cmp	r3, r1
 80034dc:	d101      	bne.n	80034e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80034de:	4b44      	ldr	r3, [pc, #272]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034e0:	e001      	b.n	80034e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80034e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034ea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034ec:	2300      	movs	r3, #0
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	f043 0204 	orr.w	r2, r3, #4
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff fe4a 	bl	80031a8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003514:	e089      	b.n	800362a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b02      	cmp	r3, #2
 800351e:	d107      	bne.n	8003530 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f8be 	bl	80036ac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b01      	cmp	r3, #1
 8003538:	d107      	bne.n	800354a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f8fd 	bl	8003744 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003550:	2b40      	cmp	r3, #64	; 0x40
 8003552:	d12f      	bne.n	80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b00      	cmp	r3, #0
 800355c:	d02a      	beq.n	80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800356c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a1e      	ldr	r2, [pc, #120]	; (80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d101      	bne.n	800357c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003578:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800357a:	e001      	b.n	8003580 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800357c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4919      	ldr	r1, [pc, #100]	; (80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003588:	428b      	cmp	r3, r1
 800358a:	d101      	bne.n	8003590 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800358c:	4b18      	ldr	r3, [pc, #96]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800358e:	e001      	b.n	8003594 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003590:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003594:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003598:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	f043 0202 	orr.w	r2, r3, #2
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff fdfa 	bl	80031a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d136      	bne.n	800362c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d031      	beq.n	800362c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a07      	ldr	r2, [pc, #28]	; (80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d101      	bne.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80035d2:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035d4:	e001      	b.n	80035da <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80035d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4902      	ldr	r1, [pc, #8]	; (80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035e2:	428b      	cmp	r3, r1
 80035e4:	d106      	bne.n	80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80035e6:	4b02      	ldr	r3, [pc, #8]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035e8:	e006      	b.n	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80035ea:	bf00      	nop
 80035ec:	40003800 	.word	0x40003800
 80035f0:	40003400 	.word	0x40003400
 80035f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035fc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800360c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	f043 0204 	orr.w	r2, r3, #4
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff fdc0 	bl	80031a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003628:	e000      	b.n	800362c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800362a:	bf00      	nop
}
 800362c:	bf00      	nop
 800362e:	3720      	adds	r7, #32
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	1c99      	adds	r1, r3, #2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6251      	str	r1, [r2, #36]	; 0x24
 800365a:	881a      	ldrh	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d113      	bne.n	80036a2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003688:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ffc9 	bl	8003634 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	1c99      	adds	r1, r3, #2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6251      	str	r1, [r2, #36]	; 0x24
 80036be:	8819      	ldrh	r1, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a1d      	ldr	r2, [pc, #116]	; (800373c <I2SEx_TxISR_I2SExt+0x90>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d101      	bne.n	80036ce <I2SEx_TxISR_I2SExt+0x22>
 80036ca:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <I2SEx_TxISR_I2SExt+0x94>)
 80036cc:	e001      	b.n	80036d2 <I2SEx_TxISR_I2SExt+0x26>
 80036ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d2:	460a      	mov	r2, r1
 80036d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d121      	bne.n	8003732 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a12      	ldr	r2, [pc, #72]	; (800373c <I2SEx_TxISR_I2SExt+0x90>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d101      	bne.n	80036fc <I2SEx_TxISR_I2SExt+0x50>
 80036f8:	4b11      	ldr	r3, [pc, #68]	; (8003740 <I2SEx_TxISR_I2SExt+0x94>)
 80036fa:	e001      	b.n	8003700 <I2SEx_TxISR_I2SExt+0x54>
 80036fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	490d      	ldr	r1, [pc, #52]	; (800373c <I2SEx_TxISR_I2SExt+0x90>)
 8003708:	428b      	cmp	r3, r1
 800370a:	d101      	bne.n	8003710 <I2SEx_TxISR_I2SExt+0x64>
 800370c:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <I2SEx_TxISR_I2SExt+0x94>)
 800370e:	e001      	b.n	8003714 <I2SEx_TxISR_I2SExt+0x68>
 8003710:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003714:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003718:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d106      	bne.n	8003732 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ff81 	bl	8003634 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40003800 	.word	0x40003800
 8003740:	40003400 	.word	0x40003400

08003744 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68d8      	ldr	r0, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	1c99      	adds	r1, r3, #2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800375c:	b282      	uxth	r2, r0
 800375e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d113      	bne.n	80037a0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003786:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff ff4a 	bl	8003634 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a20      	ldr	r2, [pc, #128]	; (8003838 <I2SEx_RxISR_I2SExt+0x90>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d101      	bne.n	80037be <I2SEx_RxISR_I2SExt+0x16>
 80037ba:	4b20      	ldr	r3, [pc, #128]	; (800383c <I2SEx_RxISR_I2SExt+0x94>)
 80037bc:	e001      	b.n	80037c2 <I2SEx_RxISR_I2SExt+0x1a>
 80037be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c2:	68d8      	ldr	r0, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	1c99      	adds	r1, r3, #2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037ce:	b282      	uxth	r2, r0
 80037d0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d121      	bne.n	800382e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a12      	ldr	r2, [pc, #72]	; (8003838 <I2SEx_RxISR_I2SExt+0x90>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d101      	bne.n	80037f8 <I2SEx_RxISR_I2SExt+0x50>
 80037f4:	4b11      	ldr	r3, [pc, #68]	; (800383c <I2SEx_RxISR_I2SExt+0x94>)
 80037f6:	e001      	b.n	80037fc <I2SEx_RxISR_I2SExt+0x54>
 80037f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	490d      	ldr	r1, [pc, #52]	; (8003838 <I2SEx_RxISR_I2SExt+0x90>)
 8003804:	428b      	cmp	r3, r1
 8003806:	d101      	bne.n	800380c <I2SEx_RxISR_I2SExt+0x64>
 8003808:	4b0c      	ldr	r3, [pc, #48]	; (800383c <I2SEx_RxISR_I2SExt+0x94>)
 800380a:	e001      	b.n	8003810 <I2SEx_RxISR_I2SExt+0x68>
 800380c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003810:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003814:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d106      	bne.n	800382e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff ff03 	bl	8003634 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40003800 	.word	0x40003800
 800383c:	40003400 	.word	0x40003400

08003840 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e267      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d075      	beq.n	800394a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800385e:	4b88      	ldr	r3, [pc, #544]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b04      	cmp	r3, #4
 8003868:	d00c      	beq.n	8003884 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800386a:	4b85      	ldr	r3, [pc, #532]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003872:	2b08      	cmp	r3, #8
 8003874:	d112      	bne.n	800389c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003876:	4b82      	ldr	r3, [pc, #520]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003882:	d10b      	bne.n	800389c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003884:	4b7e      	ldr	r3, [pc, #504]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d05b      	beq.n	8003948 <HAL_RCC_OscConfig+0x108>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d157      	bne.n	8003948 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e242      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a4:	d106      	bne.n	80038b4 <HAL_RCC_OscConfig+0x74>
 80038a6:	4b76      	ldr	r3, [pc, #472]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a75      	ldr	r2, [pc, #468]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	e01d      	b.n	80038f0 <HAL_RCC_OscConfig+0xb0>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x98>
 80038be:	4b70      	ldr	r3, [pc, #448]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6f      	ldr	r2, [pc, #444]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b6d      	ldr	r3, [pc, #436]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a6c      	ldr	r2, [pc, #432]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e00b      	b.n	80038f0 <HAL_RCC_OscConfig+0xb0>
 80038d8:	4b69      	ldr	r3, [pc, #420]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a68      	ldr	r2, [pc, #416]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	4b66      	ldr	r3, [pc, #408]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a65      	ldr	r2, [pc, #404]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d013      	beq.n	8003920 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fd fa8c 	bl	8000e14 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003900:	f7fd fa88 	bl	8000e14 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b64      	cmp	r3, #100	; 0x64
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e207      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	4b5b      	ldr	r3, [pc, #364]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0xc0>
 800391e:	e014      	b.n	800394a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fd fa78 	bl	8000e14 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003928:	f7fd fa74 	bl	8000e14 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	; 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e1f3      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393a:	4b51      	ldr	r3, [pc, #324]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0xe8>
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d063      	beq.n	8003a1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003956:	4b4a      	ldr	r3, [pc, #296]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003962:	4b47      	ldr	r3, [pc, #284]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800396a:	2b08      	cmp	r3, #8
 800396c:	d11c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800396e:	4b44      	ldr	r3, [pc, #272]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d116      	bne.n	80039a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397a:	4b41      	ldr	r3, [pc, #260]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_RCC_OscConfig+0x152>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d001      	beq.n	8003992 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e1c7      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003992:	4b3b      	ldr	r3, [pc, #236]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4937      	ldr	r1, [pc, #220]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a6:	e03a      	b.n	8003a1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d020      	beq.n	80039f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b0:	4b34      	ldr	r3, [pc, #208]	; (8003a84 <HAL_RCC_OscConfig+0x244>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7fd fa2d 	bl	8000e14 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039be:	f7fd fa29 	bl	8000e14 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e1a8      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d0:	4b2b      	ldr	r3, [pc, #172]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039dc:	4b28      	ldr	r3, [pc, #160]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4925      	ldr	r1, [pc, #148]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	600b      	str	r3, [r1, #0]
 80039f0:	e015      	b.n	8003a1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f2:	4b24      	ldr	r3, [pc, #144]	; (8003a84 <HAL_RCC_OscConfig+0x244>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fd fa0c 	bl	8000e14 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a00:	f7fd fa08 	bl	8000e14 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e187      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a12:	4b1b      	ldr	r3, [pc, #108]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d036      	beq.n	8003a98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d016      	beq.n	8003a60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a32:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <HAL_RCC_OscConfig+0x248>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fd f9ec 	bl	8000e14 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a40:	f7fd f9e8 	bl	8000e14 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e167      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a52:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x200>
 8003a5e:	e01b      	b.n	8003a98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a60:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <HAL_RCC_OscConfig+0x248>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a66:	f7fd f9d5 	bl	8000e14 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6c:	e00e      	b.n	8003a8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a6e:	f7fd f9d1 	bl	8000e14 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d907      	bls.n	8003a8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e150      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
 8003a80:	40023800 	.word	0x40023800
 8003a84:	42470000 	.word	0x42470000
 8003a88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8c:	4b88      	ldr	r3, [pc, #544]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1ea      	bne.n	8003a6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8097 	beq.w	8003bd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aaa:	4b81      	ldr	r3, [pc, #516]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10f      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	4b7d      	ldr	r3, [pc, #500]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	4a7c      	ldr	r2, [pc, #496]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac6:	4b7a      	ldr	r3, [pc, #488]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad6:	4b77      	ldr	r3, [pc, #476]	; (8003cb4 <HAL_RCC_OscConfig+0x474>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d118      	bne.n	8003b14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae2:	4b74      	ldr	r3, [pc, #464]	; (8003cb4 <HAL_RCC_OscConfig+0x474>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a73      	ldr	r2, [pc, #460]	; (8003cb4 <HAL_RCC_OscConfig+0x474>)
 8003ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aee:	f7fd f991 	bl	8000e14 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af6:	f7fd f98d 	bl	8000e14 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e10c      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b08:	4b6a      	ldr	r3, [pc, #424]	; (8003cb4 <HAL_RCC_OscConfig+0x474>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d106      	bne.n	8003b2a <HAL_RCC_OscConfig+0x2ea>
 8003b1c:	4b64      	ldr	r3, [pc, #400]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b20:	4a63      	ldr	r2, [pc, #396]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	6713      	str	r3, [r2, #112]	; 0x70
 8003b28:	e01c      	b.n	8003b64 <HAL_RCC_OscConfig+0x324>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x30c>
 8003b32:	4b5f      	ldr	r3, [pc, #380]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	4a5e      	ldr	r2, [pc, #376]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b3e:	4b5c      	ldr	r3, [pc, #368]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b42:	4a5b      	ldr	r2, [pc, #364]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	6713      	str	r3, [r2, #112]	; 0x70
 8003b4a:	e00b      	b.n	8003b64 <HAL_RCC_OscConfig+0x324>
 8003b4c:	4b58      	ldr	r3, [pc, #352]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	4a57      	ldr	r2, [pc, #348]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	6713      	str	r3, [r2, #112]	; 0x70
 8003b58:	4b55      	ldr	r3, [pc, #340]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5c:	4a54      	ldr	r2, [pc, #336]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b5e:	f023 0304 	bic.w	r3, r3, #4
 8003b62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d015      	beq.n	8003b98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6c:	f7fd f952 	bl	8000e14 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b74:	f7fd f94e 	bl	8000e14 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e0cb      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8a:	4b49      	ldr	r3, [pc, #292]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0ee      	beq.n	8003b74 <HAL_RCC_OscConfig+0x334>
 8003b96:	e014      	b.n	8003bc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b98:	f7fd f93c 	bl	8000e14 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba0:	f7fd f938 	bl	8000e14 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e0b5      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb6:	4b3e      	ldr	r3, [pc, #248]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1ee      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d105      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc8:	4b39      	ldr	r3, [pc, #228]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	4a38      	ldr	r2, [pc, #224]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80a1 	beq.w	8003d20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bde:	4b34      	ldr	r3, [pc, #208]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d05c      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d141      	bne.n	8003c76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf2:	4b31      	ldr	r3, [pc, #196]	; (8003cb8 <HAL_RCC_OscConfig+0x478>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7fd f90c 	bl	8000e14 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fd f908 	bl	8000e14 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e087      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c12:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69da      	ldr	r2, [r3, #28]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	019b      	lsls	r3, r3, #6
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	085b      	lsrs	r3, r3, #1
 8003c36:	3b01      	subs	r3, #1
 8003c38:	041b      	lsls	r3, r3, #16
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	061b      	lsls	r3, r3, #24
 8003c42:	491b      	ldr	r1, [pc, #108]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c48:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <HAL_RCC_OscConfig+0x478>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4e:	f7fd f8e1 	bl	8000e14 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c56:	f7fd f8dd 	bl	8000e14 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e05c      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c68:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x416>
 8003c74:	e054      	b.n	8003d20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c76:	4b10      	ldr	r3, [pc, #64]	; (8003cb8 <HAL_RCC_OscConfig+0x478>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7fd f8ca 	bl	8000e14 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c84:	f7fd f8c6 	bl	8000e14 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e045      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c96:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x444>
 8003ca2:	e03d      	b.n	8003d20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d107      	bne.n	8003cbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e038      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40007000 	.word	0x40007000
 8003cb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <HAL_RCC_OscConfig+0x4ec>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d028      	beq.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d121      	bne.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d11a      	bne.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cec:	4013      	ands	r3, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d111      	bne.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	085b      	lsrs	r3, r3, #1
 8003d04:	3b01      	subs	r3, #1
 8003d06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d107      	bne.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800

08003d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0cc      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d44:	4b68      	ldr	r3, [pc, #416]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d90c      	bls.n	8003d6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d52:	4b65      	ldr	r3, [pc, #404]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5a:	4b63      	ldr	r3, [pc, #396]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0b8      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d020      	beq.n	8003dba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d84:	4b59      	ldr	r3, [pc, #356]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4a58      	ldr	r2, [pc, #352]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d9c:	4b53      	ldr	r3, [pc, #332]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	4a52      	ldr	r2, [pc, #328]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003da6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da8:	4b50      	ldr	r3, [pc, #320]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	494d      	ldr	r1, [pc, #308]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d044      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d107      	bne.n	8003dde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dce:	4b47      	ldr	r3, [pc, #284]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d119      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e07f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d003      	beq.n	8003dee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d107      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dee:	4b3f      	ldr	r3, [pc, #252]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e06f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfe:	4b3b      	ldr	r3, [pc, #236]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e067      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e0e:	4b37      	ldr	r3, [pc, #220]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f023 0203 	bic.w	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4934      	ldr	r1, [pc, #208]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e20:	f7fc fff8 	bl	8000e14 <HAL_GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e28:	f7fc fff4 	bl	8000e14 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e04f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3e:	4b2b      	ldr	r3, [pc, #172]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 020c 	and.w	r2, r3, #12
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d1eb      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e50:	4b25      	ldr	r3, [pc, #148]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d20c      	bcs.n	8003e78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5e:	4b22      	ldr	r3, [pc, #136]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e66:	4b20      	ldr	r3, [pc, #128]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d001      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e032      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e84:	4b19      	ldr	r3, [pc, #100]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4916      	ldr	r1, [pc, #88]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ea2:	4b12      	ldr	r3, [pc, #72]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	490e      	ldr	r1, [pc, #56]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eb6:	f000 f821 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	091b      	lsrs	r3, r3, #4
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	490a      	ldr	r1, [pc, #40]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec8:	5ccb      	ldrb	r3, [r1, r3]
 8003eca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ece:	4a09      	ldr	r2, [pc, #36]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ed2:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fc ff58 	bl	8000d8c <HAL_InitTick>

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40023c00 	.word	0x40023c00
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	08007d2c 	.word	0x08007d2c
 8003ef4:	20000000 	.word	0x20000000
 8003ef8:	20000004 	.word	0x20000004

08003efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f00:	b094      	sub	sp, #80	; 0x50
 8003f02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	647b      	str	r3, [r7, #68]	; 0x44
 8003f08:	2300      	movs	r3, #0
 8003f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f14:	4b79      	ldr	r3, [pc, #484]	; (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 030c 	and.w	r3, r3, #12
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d00d      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0x40>
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	f200 80e1 	bhi.w	80040e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x34>
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d003      	beq.n	8003f36 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f2e:	e0db      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f30:	4b73      	ldr	r3, [pc, #460]	; (8004100 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f34:	e0db      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f36:	4b73      	ldr	r3, [pc, #460]	; (8004104 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f3a:	e0d8      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f3c:	4b6f      	ldr	r3, [pc, #444]	; (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f46:	4b6d      	ldr	r3, [pc, #436]	; (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d063      	beq.n	800401a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f52:	4b6a      	ldr	r3, [pc, #424]	; (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	099b      	lsrs	r3, r3, #6
 8003f58:	2200      	movs	r2, #0
 8003f5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f64:	633b      	str	r3, [r7, #48]	; 0x30
 8003f66:	2300      	movs	r3, #0
 8003f68:	637b      	str	r3, [r7, #52]	; 0x34
 8003f6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f6e:	4622      	mov	r2, r4
 8003f70:	462b      	mov	r3, r5
 8003f72:	f04f 0000 	mov.w	r0, #0
 8003f76:	f04f 0100 	mov.w	r1, #0
 8003f7a:	0159      	lsls	r1, r3, #5
 8003f7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f80:	0150      	lsls	r0, r2, #5
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4621      	mov	r1, r4
 8003f88:	1a51      	subs	r1, r2, r1
 8003f8a:	6139      	str	r1, [r7, #16]
 8003f8c:	4629      	mov	r1, r5
 8003f8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fa0:	4659      	mov	r1, fp
 8003fa2:	018b      	lsls	r3, r1, #6
 8003fa4:	4651      	mov	r1, sl
 8003fa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003faa:	4651      	mov	r1, sl
 8003fac:	018a      	lsls	r2, r1, #6
 8003fae:	4651      	mov	r1, sl
 8003fb0:	ebb2 0801 	subs.w	r8, r2, r1
 8003fb4:	4659      	mov	r1, fp
 8003fb6:	eb63 0901 	sbc.w	r9, r3, r1
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fce:	4690      	mov	r8, r2
 8003fd0:	4699      	mov	r9, r3
 8003fd2:	4623      	mov	r3, r4
 8003fd4:	eb18 0303 	adds.w	r3, r8, r3
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	462b      	mov	r3, r5
 8003fdc:	eb49 0303 	adc.w	r3, r9, r3
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fee:	4629      	mov	r1, r5
 8003ff0:	024b      	lsls	r3, r1, #9
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	024a      	lsls	r2, r1, #9
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4619      	mov	r1, r3
 8004000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004002:	2200      	movs	r2, #0
 8004004:	62bb      	str	r3, [r7, #40]	; 0x28
 8004006:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004008:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800400c:	f7fc f8dc 	bl	80001c8 <__aeabi_uldivmod>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4613      	mov	r3, r2
 8004016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004018:	e058      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800401a:	4b38      	ldr	r3, [pc, #224]	; (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	099b      	lsrs	r3, r3, #6
 8004020:	2200      	movs	r2, #0
 8004022:	4618      	mov	r0, r3
 8004024:	4611      	mov	r1, r2
 8004026:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800402a:	623b      	str	r3, [r7, #32]
 800402c:	2300      	movs	r3, #0
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
 8004030:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004034:	4642      	mov	r2, r8
 8004036:	464b      	mov	r3, r9
 8004038:	f04f 0000 	mov.w	r0, #0
 800403c:	f04f 0100 	mov.w	r1, #0
 8004040:	0159      	lsls	r1, r3, #5
 8004042:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004046:	0150      	lsls	r0, r2, #5
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4641      	mov	r1, r8
 800404e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004052:	4649      	mov	r1, r9
 8004054:	eb63 0b01 	sbc.w	fp, r3, r1
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004064:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004068:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800406c:	ebb2 040a 	subs.w	r4, r2, sl
 8004070:	eb63 050b 	sbc.w	r5, r3, fp
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	00eb      	lsls	r3, r5, #3
 800407e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004082:	00e2      	lsls	r2, r4, #3
 8004084:	4614      	mov	r4, r2
 8004086:	461d      	mov	r5, r3
 8004088:	4643      	mov	r3, r8
 800408a:	18e3      	adds	r3, r4, r3
 800408c:	603b      	str	r3, [r7, #0]
 800408e:	464b      	mov	r3, r9
 8004090:	eb45 0303 	adc.w	r3, r5, r3
 8004094:	607b      	str	r3, [r7, #4]
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040a2:	4629      	mov	r1, r5
 80040a4:	028b      	lsls	r3, r1, #10
 80040a6:	4621      	mov	r1, r4
 80040a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040ac:	4621      	mov	r1, r4
 80040ae:	028a      	lsls	r2, r1, #10
 80040b0:	4610      	mov	r0, r2
 80040b2:	4619      	mov	r1, r3
 80040b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040b6:	2200      	movs	r2, #0
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	61fa      	str	r2, [r7, #28]
 80040bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040c0:	f7fc f882 	bl	80001c8 <__aeabi_uldivmod>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4613      	mov	r3, r2
 80040ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040cc:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	0c1b      	lsrs	r3, r3, #16
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	3301      	adds	r3, #1
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80040dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040e6:	e002      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <HAL_RCC_GetSysClockFreq+0x204>)
 80040ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3750      	adds	r7, #80	; 0x50
 80040f4:	46bd      	mov	sp, r7
 80040f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040fa:	bf00      	nop
 80040fc:	40023800 	.word	0x40023800
 8004100:	00f42400 	.word	0x00f42400
 8004104:	007a1200 	.word	0x007a1200

08004108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800410c:	4b03      	ldr	r3, [pc, #12]	; (800411c <HAL_RCC_GetHCLKFreq+0x14>)
 800410e:	681b      	ldr	r3, [r3, #0]
}
 8004110:	4618      	mov	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000000 	.word	0x20000000

08004120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004124:	f7ff fff0 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8004128:	4602      	mov	r2, r0
 800412a:	4b05      	ldr	r3, [pc, #20]	; (8004140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	0a9b      	lsrs	r3, r3, #10
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	4903      	ldr	r1, [pc, #12]	; (8004144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004136:	5ccb      	ldrb	r3, [r1, r3]
 8004138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800413c:	4618      	mov	r0, r3
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40023800 	.word	0x40023800
 8004144:	08007d3c 	.word	0x08007d3c

08004148 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d105      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800416c:	2b00      	cmp	r3, #0
 800416e:	d035      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004170:	4b62      	ldr	r3, [pc, #392]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004176:	f7fc fe4d 	bl	8000e14 <HAL_GetTick>
 800417a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800417c:	e008      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800417e:	f7fc fe49 	bl	8000e14 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e0b0      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004190:	4b5b      	ldr	r3, [pc, #364]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1f0      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	019a      	lsls	r2, r3, #6
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	071b      	lsls	r3, r3, #28
 80041a8:	4955      	ldr	r1, [pc, #340]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041b0:	4b52      	ldr	r3, [pc, #328]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041b6:	f7fc fe2d 	bl	8000e14 <HAL_GetTick>
 80041ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041bc:	e008      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041be:	f7fc fe29 	bl	8000e14 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e090      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041d0:	4b4b      	ldr	r3, [pc, #300]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8083 	beq.w	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	4b44      	ldr	r3, [pc, #272]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	4a43      	ldr	r2, [pc, #268]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f8:	6413      	str	r3, [r2, #64]	; 0x40
 80041fa:	4b41      	ldr	r3, [pc, #260]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004206:	4b3f      	ldr	r3, [pc, #252]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a3e      	ldr	r2, [pc, #248]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800420c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004210:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004212:	f7fc fdff 	bl	8000e14 <HAL_GetTick>
 8004216:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004218:	e008      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800421a:	f7fc fdfb 	bl	8000e14 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e062      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800422c:	4b35      	ldr	r3, [pc, #212]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004238:	4b31      	ldr	r3, [pc, #196]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004240:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d02f      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	429a      	cmp	r2, r3
 8004254:	d028      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004256:	4b2a      	ldr	r3, [pc, #168]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004260:	4b29      	ldr	r3, [pc, #164]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004262:	2201      	movs	r2, #1
 8004264:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004266:	4b28      	ldr	r3, [pc, #160]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800426c:	4a24      	ldr	r2, [pc, #144]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004272:	4b23      	ldr	r3, [pc, #140]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b01      	cmp	r3, #1
 800427c:	d114      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800427e:	f7fc fdc9 	bl	8000e14 <HAL_GetTick>
 8004282:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004284:	e00a      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004286:	f7fc fdc5 	bl	8000e14 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	f241 3288 	movw	r2, #5000	; 0x1388
 8004294:	4293      	cmp	r3, r2
 8004296:	d901      	bls.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e02a      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429c:	4b18      	ldr	r3, [pc, #96]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800429e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0ee      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042b4:	d10d      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80042b6:	4b12      	ldr	r3, [pc, #72]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ca:	490d      	ldr	r1, [pc, #52]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	608b      	str	r3, [r1, #8]
 80042d0:	e005      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x196>
 80042d2:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	4a0a      	ldr	r2, [pc, #40]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042dc:	6093      	str	r3, [r2, #8]
 80042de:	4b08      	ldr	r3, [pc, #32]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ea:	4905      	ldr	r1, [pc, #20]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	42470068 	.word	0x42470068
 8004300:	40023800 	.word	0x40023800
 8004304:	40007000 	.word	0x40007000
 8004308:	42470e40 	.word	0x42470e40

0800430c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d13e      	bne.n	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800432a:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d12f      	bne.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004340:	4b1e      	ldr	r3, [pc, #120]	; (80043bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004342:	617b      	str	r3, [r7, #20]
          break;
 8004344:	e02f      	b.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004346:	4b1c      	ldr	r3, [pc, #112]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004352:	d108      	bne.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004354:	4b18      	ldr	r3, [pc, #96]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800435c:	4a18      	ldr	r2, [pc, #96]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800435e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004362:	613b      	str	r3, [r7, #16]
 8004364:	e007      	b.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004366:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800436e:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004376:	4b10      	ldr	r3, [pc, #64]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800437c:	099b      	lsrs	r3, r3, #6
 800437e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	fb02 f303 	mul.w	r3, r2, r3
 8004388:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800438a:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800438c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004390:	0f1b      	lsrs	r3, r3, #28
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	617b      	str	r3, [r7, #20]
          break;
 800439e:	e002      	b.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
          break;
 80043a4:	bf00      	nop
        }
      }
      break;
 80043a6:	bf00      	nop
    }
  }
  return frequency;
 80043a8:	697b      	ldr	r3, [r7, #20]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40023800 	.word	0x40023800
 80043bc:	00bb8000 	.word	0x00bb8000
 80043c0:	007a1200 	.word	0x007a1200
 80043c4:	00f42400 	.word	0x00f42400

080043c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e07b      	b.n	80044d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d108      	bne.n	80043f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ea:	d009      	beq.n	8004400 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	61da      	str	r2, [r3, #28]
 80043f2:	e005      	b.n	8004400 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fc fb76 	bl	8000b0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004436:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004484:	ea42 0103 	orr.w	r1, r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	0c1b      	lsrs	r3, r3, #16
 800449e:	f003 0104 	and.w	r1, r3, #4
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	f003 0210 	and.w	r2, r3, #16
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044da:	b084      	sub	sp, #16
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	f107 001c 	add.w	r0, r7, #28
 80044e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d122      	bne.n	8004538 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800451a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800451c:	2b01      	cmp	r3, #1
 800451e:	d105      	bne.n	800452c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f9bf 	bl	80048b0 <USB_CoreReset>
 8004532:	4603      	mov	r3, r0
 8004534:	73fb      	strb	r3, [r7, #15]
 8004536:	e01a      	b.n	800456e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f9b3 	bl	80048b0 <USB_CoreReset>
 800454a:	4603      	mov	r3, r0
 800454c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800454e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004550:	2b00      	cmp	r3, #0
 8004552:	d106      	bne.n	8004562 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	639a      	str	r2, [r3, #56]	; 0x38
 8004560:	e005      	b.n	800456e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	2b01      	cmp	r3, #1
 8004572:	d10b      	bne.n	800458c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f043 0206 	orr.w	r2, r3, #6
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f043 0220 	orr.w	r2, r3, #32
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800458c:	7bfb      	ldrb	r3, [r7, #15]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004598:	b004      	add	sp, #16
 800459a:	4770      	bx	lr

0800459c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f043 0201 	orr.w	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f023 0201 	bic.w	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d115      	bne.n	800462e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800460e:	2001      	movs	r0, #1
 8004610:	f7fc fc0c 	bl	8000e2c <HAL_Delay>
      ms++;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	3301      	adds	r3, #1
 8004618:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f939 	bl	8004892 <USB_GetMode>
 8004620:	4603      	mov	r3, r0
 8004622:	2b01      	cmp	r3, #1
 8004624:	d01e      	beq.n	8004664 <USB_SetCurrentMode+0x84>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b31      	cmp	r3, #49	; 0x31
 800462a:	d9f0      	bls.n	800460e <USB_SetCurrentMode+0x2e>
 800462c:	e01a      	b.n	8004664 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800462e:	78fb      	ldrb	r3, [r7, #3]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d115      	bne.n	8004660 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004640:	2001      	movs	r0, #1
 8004642:	f7fc fbf3 	bl	8000e2c <HAL_Delay>
      ms++;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	3301      	adds	r3, #1
 800464a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f920 	bl	8004892 <USB_GetMode>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <USB_SetCurrentMode+0x84>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2b31      	cmp	r3, #49	; 0x31
 800465c:	d9f0      	bls.n	8004640 <USB_SetCurrentMode+0x60>
 800465e:	e001      	b.n	8004664 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e005      	b.n	8004670 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b32      	cmp	r3, #50	; 0x32
 8004668:	d101      	bne.n	800466e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3301      	adds	r3, #1
 800468a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a13      	ldr	r2, [pc, #76]	; (80046dc <USB_FlushTxFifo+0x64>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d901      	bls.n	8004698 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e01b      	b.n	80046d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	daf2      	bge.n	8004686 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	019b      	lsls	r3, r3, #6
 80046a8:	f043 0220 	orr.w	r2, r3, #32
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3301      	adds	r3, #1
 80046b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4a08      	ldr	r2, [pc, #32]	; (80046dc <USB_FlushTxFifo+0x64>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d901      	bls.n	80046c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e006      	b.n	80046d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d0f0      	beq.n	80046b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	00030d40 	.word	0x00030d40

080046e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3301      	adds	r3, #1
 80046f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4a11      	ldr	r2, [pc, #68]	; (800473c <USB_FlushRxFifo+0x5c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d901      	bls.n	80046fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e018      	b.n	8004730 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	daf2      	bge.n	80046ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2210      	movs	r2, #16
 800470e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	3301      	adds	r3, #1
 8004714:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a08      	ldr	r2, [pc, #32]	; (800473c <USB_FlushRxFifo+0x5c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d901      	bls.n	8004722 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e006      	b.n	8004730 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0310 	and.w	r3, r3, #16
 800472a:	2b10      	cmp	r3, #16
 800472c:	d0f0      	beq.n	8004710 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	00030d40 	.word	0x00030d40

08004740 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004740:	b480      	push	{r7}
 8004742:	b089      	sub	sp, #36	; 0x24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	4611      	mov	r1, r2
 800474c:	461a      	mov	r2, r3
 800474e:	460b      	mov	r3, r1
 8004750:	71fb      	strb	r3, [r7, #7]
 8004752:	4613      	mov	r3, r2
 8004754:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800475e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	d123      	bne.n	80047ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004766:	88bb      	ldrh	r3, [r7, #4]
 8004768:	3303      	adds	r3, #3
 800476a:	089b      	lsrs	r3, r3, #2
 800476c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800476e:	2300      	movs	r3, #0
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	e018      	b.n	80047a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	031a      	lsls	r2, r3, #12
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	4413      	add	r3, r2
 800477c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004780:	461a      	mov	r2, r3
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	3301      	adds	r3, #1
 800478c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	3301      	adds	r3, #1
 8004792:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	3301      	adds	r3, #1
 8004798:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	3301      	adds	r3, #1
 800479e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	3301      	adds	r3, #1
 80047a4:	61bb      	str	r3, [r7, #24]
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d3e2      	bcc.n	8004774 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3724      	adds	r7, #36	; 0x24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80047bc:	b480      	push	{r7}
 80047be:	b08b      	sub	sp, #44	; 0x2c
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	4613      	mov	r3, r2
 80047c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	089b      	lsrs	r3, r3, #2
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80047e2:	2300      	movs	r3, #0
 80047e4:	623b      	str	r3, [r7, #32]
 80047e6:	e014      	b.n	8004812 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	3301      	adds	r3, #1
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	3301      	adds	r3, #1
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	3301      	adds	r3, #1
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	3301      	adds	r3, #1
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	3301      	adds	r3, #1
 8004810:	623b      	str	r3, [r7, #32]
 8004812:	6a3a      	ldr	r2, [r7, #32]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	429a      	cmp	r2, r3
 8004818:	d3e6      	bcc.n	80047e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800481a:	8bfb      	ldrh	r3, [r7, #30]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01e      	beq.n	800485e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800482a:	461a      	mov	r2, r3
 800482c:	f107 0310 	add.w	r3, r7, #16
 8004830:	6812      	ldr	r2, [r2, #0]
 8004832:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
 8004840:	b2da      	uxtb	r2, r3
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	701a      	strb	r2, [r3, #0]
      i++;
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	3301      	adds	r3, #1
 800484a:	623b      	str	r3, [r7, #32]
      pDest++;
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	3301      	adds	r3, #1
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004852:	8bfb      	ldrh	r3, [r7, #30]
 8004854:	3b01      	subs	r3, #1
 8004856:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004858:	8bfb      	ldrh	r3, [r7, #30]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1ea      	bne.n	8004834 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004860:	4618      	mov	r0, r3
 8004862:	372c      	adds	r7, #44	; 0x2c
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4013      	ands	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004884:	68fb      	ldr	r3, [r7, #12]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f003 0301 	and.w	r3, r3, #1
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
	...

080048b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3301      	adds	r3, #1
 80048c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4a13      	ldr	r2, [pc, #76]	; (8004914 <USB_CoreReset+0x64>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e01b      	b.n	8004906 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	daf2      	bge.n	80048bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f043 0201 	orr.w	r2, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3301      	adds	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4a09      	ldr	r2, [pc, #36]	; (8004914 <USB_CoreReset+0x64>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d901      	bls.n	80048f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e006      	b.n	8004906 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b01      	cmp	r3, #1
 8004902:	d0f0      	beq.n	80048e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	00030d40 	.word	0x00030d40

08004918 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004918:	b084      	sub	sp, #16
 800491a:	b580      	push	{r7, lr}
 800491c:	b086      	sub	sp, #24
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004926:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004938:	461a      	mov	r2, r3
 800493a:	2300      	movs	r3, #0
 800493c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004942:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496a:	2b00      	cmp	r3, #0
 800496c:	d018      	beq.n	80049a0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800496e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004970:	2b01      	cmp	r3, #1
 8004972:	d10a      	bne.n	800498a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004982:	f043 0304 	orr.w	r3, r3, #4
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	e014      	b.n	80049b4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004998:	f023 0304 	bic.w	r3, r3, #4
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	e009      	b.n	80049b4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049ae:	f023 0304 	bic.w	r3, r3, #4
 80049b2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049b4:	2110      	movs	r1, #16
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7ff fe5e 	bl	8004678 <USB_FlushTxFifo>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff fe8a 	bl	80046e0 <USB_FlushRxFifo>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80049d6:	2300      	movs	r3, #0
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	e015      	b.n	8004a08 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e8:	461a      	mov	r2, r3
 80049ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049ee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fc:	461a      	mov	r2, r3
 80049fe:	2300      	movs	r3, #0
 8004a00:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	3301      	adds	r3, #1
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d3e5      	bcc.n	80049dc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a1c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00b      	beq.n	8004a42 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a30:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a13      	ldr	r2, [pc, #76]	; (8004a84 <USB_HostInit+0x16c>)
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a13      	ldr	r2, [pc, #76]	; (8004a88 <USB_HostInit+0x170>)
 8004a3c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004a40:	e009      	b.n	8004a56 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2280      	movs	r2, #128	; 0x80
 8004a46:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a10      	ldr	r2, [pc, #64]	; (8004a8c <USB_HostInit+0x174>)
 8004a4c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a0f      	ldr	r2, [pc, #60]	; (8004a90 <USB_HostInit+0x178>)
 8004a52:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d105      	bne.n	8004a68 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	f043 0210 	orr.w	r2, r3, #16
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699a      	ldr	r2, [r3, #24]
 8004a6c:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <USB_HostInit+0x17c>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a80:	b004      	add	sp, #16
 8004a82:	4770      	bx	lr
 8004a84:	01000200 	.word	0x01000200
 8004a88:	00e00300 	.word	0x00e00300
 8004a8c:	00600080 	.word	0x00600080
 8004a90:	004000e0 	.word	0x004000e0
 8004a94:	a3200008 	.word	0xa3200008

08004a98 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ab6:	f023 0303 	bic.w	r3, r3, #3
 8004aba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	68f9      	ldr	r1, [r7, #12]
 8004acc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d107      	bne.n	8004aea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004ae6:	6053      	str	r3, [r2, #4]
 8004ae8:	e009      	b.n	8004afe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d106      	bne.n	8004afe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004af6:	461a      	mov	r2, r3
 8004af8:	f241 7370 	movw	r3, #6000	; 0x1770
 8004afc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b2c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b3a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004b3c:	2064      	movs	r0, #100	; 0x64
 8004b3e:	f7fc f975 	bl	8000e2c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b4e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004b50:	200a      	movs	r0, #10
 8004b52:	f7fc f96b 	bl	8000e2c <HAL_Delay>

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b84:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d109      	bne.n	8004ba4 <USB_DriveVbus+0x44>
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d106      	bne.n	8004ba4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ba2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bae:	d109      	bne.n	8004bc4 <USB_DriveVbus+0x64>
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bc2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	0c5b      	lsrs	r3, r3, #17
 8004bf0:	f003 0303 	and.w	r3, r3, #3
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	b29b      	uxth	r3, r3
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	4608      	mov	r0, r1
 8004c2e:	4611      	mov	r1, r2
 8004c30:	461a      	mov	r2, r3
 8004c32:	4603      	mov	r3, r0
 8004c34:	70fb      	strb	r3, [r7, #3]
 8004c36:	460b      	mov	r3, r1
 8004c38:	70bb      	strb	r3, [r7, #2]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c52:	461a      	mov	r2, r3
 8004c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c58:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004c5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	d87e      	bhi.n	8004d60 <USB_HC_Init+0x13c>
 8004c62:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <USB_HC_Init+0x44>)
 8004c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c68:	08004c79 	.word	0x08004c79
 8004c6c:	08004d23 	.word	0x08004d23
 8004c70:	08004c79 	.word	0x08004c79
 8004c74:	08004ce5 	.word	0x08004ce5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c84:	461a      	mov	r2, r3
 8004c86:	f240 439d 	movw	r3, #1181	; 0x49d
 8004c8a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004c8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	da10      	bge.n	8004cb6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	78fa      	ldrb	r2, [r7, #3]
 8004ca4:	0151      	lsls	r1, r2, #5
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	440a      	add	r2, r1
 8004caa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004cb4:	e057      	b.n	8004d66 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d051      	beq.n	8004d66 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004cc2:	78fb      	ldrb	r3, [r7, #3]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	78fa      	ldrb	r2, [r7, #3]
 8004cd2:	0151      	lsls	r1, r2, #5
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	440a      	add	r2, r1
 8004cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cdc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ce0:	60d3      	str	r3, [r2, #12]
      break;
 8004ce2:	e040      	b.n	8004d66 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	f240 639d 	movw	r3, #1693	; 0x69d
 8004cf6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004cf8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	da34      	bge.n	8004d6a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	78fa      	ldrb	r2, [r7, #3]
 8004d10:	0151      	lsls	r1, r2, #5
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	440a      	add	r2, r1
 8004d16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d1e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004d20:	e023      	b.n	8004d6a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f240 2325 	movw	r3, #549	; 0x225
 8004d34:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	da17      	bge.n	8004d6e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	78fa      	ldrb	r2, [r7, #3]
 8004d4e:	0151      	lsls	r1, r2, #5
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	440a      	add	r2, r1
 8004d54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d58:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004d5c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004d5e:	e006      	b.n	8004d6e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	77fb      	strb	r3, [r7, #31]
      break;
 8004d64:	e004      	b.n	8004d70 <USB_HC_Init+0x14c>
      break;
 8004d66:	bf00      	nop
 8004d68:	e002      	b.n	8004d70 <USB_HC_Init+0x14c>
      break;
 8004d6a:	bf00      	nop
 8004d6c:	e000      	b.n	8004d70 <USB_HC_Init+0x14c>
      break;
 8004d6e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	78fa      	ldrb	r2, [r7, #3]
 8004d80:	0151      	lsls	r1, r2, #5
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	440a      	add	r2, r1
 8004d86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d8a:	f043 0302 	orr.w	r3, r3, #2
 8004d8e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d96:	699a      	ldr	r2, [r3, #24]
 8004d98:	78fb      	ldrb	r3, [r7, #3]
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	2101      	movs	r1, #1
 8004da0:	fa01 f303 	lsl.w	r3, r1, r3
 8004da4:	6939      	ldr	r1, [r7, #16]
 8004da6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004daa:	4313      	orrs	r3, r2
 8004dac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004dba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	da03      	bge.n	8004dca <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dc6:	61bb      	str	r3, [r7, #24]
 8004dc8:	e001      	b.n	8004dce <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff feff 	bl	8004bd2 <USB_GetHostSpeed>
 8004dd4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004dd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d106      	bne.n	8004dec <USB_HC_Init+0x1c8>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d003      	beq.n	8004dec <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	e001      	b.n	8004df0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004df0:	787b      	ldrb	r3, [r7, #1]
 8004df2:	059b      	lsls	r3, r3, #22
 8004df4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004df8:	78bb      	ldrb	r3, [r7, #2]
 8004dfa:	02db      	lsls	r3, r3, #11
 8004dfc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e00:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e06:	049b      	lsls	r3, r3, #18
 8004e08:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e0c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e0e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004e10:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e14:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e1a:	78fb      	ldrb	r3, [r7, #3]
 8004e1c:	0159      	lsls	r1, r3, #5
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	440b      	add	r3, r1
 8004e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e26:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e2c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004e2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d003      	beq.n	8004e3e <USB_HC_Init+0x21a>
 8004e36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d10f      	bne.n	8004e5e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004e3e:	78fb      	ldrb	r3, [r7, #3]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	78fa      	ldrb	r2, [r7, #3]
 8004e4e:	0151      	lsls	r1, r2, #5
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	440a      	add	r2, r1
 8004e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e5c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004e5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3720      	adds	r7, #32
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08c      	sub	sp, #48	; 0x30
 8004e6c:	af02      	add	r7, sp, #8
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	4613      	mov	r3, r2
 8004e74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	785b      	ldrb	r3, [r3, #1]
 8004e7e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e84:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d02d      	beq.n	8004eee <USB_HC_StartXfer+0x86>
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	791b      	ldrb	r3, [r3, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d129      	bne.n	8004eee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d117      	bne.n	8004ed0 <USB_HC_StartXfer+0x68>
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	79db      	ldrb	r3, [r3, #7]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <USB_HC_StartXfer+0x48>
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	79db      	ldrb	r3, [r3, #7]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d10f      	bne.n	8004ed0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	0151      	lsls	r1, r2, #5
 8004ec2:	6a3a      	ldr	r2, [r7, #32]
 8004ec4:	440a      	add	r2, r1
 8004ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ece:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10b      	bne.n	8004eee <USB_HC_StartXfer+0x86>
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	795b      	ldrb	r3, [r3, #5]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d107      	bne.n	8004eee <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	785b      	ldrb	r3, [r3, #1]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 fa0f 	bl	8005308 <USB_DoPing>
      return HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	e0f8      	b.n	80050e0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d018      	beq.n	8004f28 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	8912      	ldrh	r2, [r2, #8]
 8004efe:	4413      	add	r3, r2
 8004f00:	3b01      	subs	r3, #1
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	8912      	ldrh	r2, [r2, #8]
 8004f06:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f0a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004f0c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004f0e:	8b7b      	ldrh	r3, [r7, #26]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d90b      	bls.n	8004f2c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004f14:	8b7b      	ldrh	r3, [r7, #26]
 8004f16:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004f18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	8912      	ldrh	r2, [r2, #8]
 8004f1e:	fb03 f202 	mul.w	r2, r3, r2
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	611a      	str	r2, [r3, #16]
 8004f26:	e001      	b.n	8004f2c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	78db      	ldrb	r3, [r3, #3]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d007      	beq.n	8004f44 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004f34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	8912      	ldrh	r2, [r2, #8]
 8004f3a:	fb03 f202 	mul.w	r2, r3, r2
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	611a      	str	r2, [r3, #16]
 8004f42:	e003      	b.n	8004f4c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	695a      	ldr	r2, [r3, #20]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f56:	04d9      	lsls	r1, r3, #19
 8004f58:	4b63      	ldr	r3, [pc, #396]	; (80050e8 <USB_HC_StartXfer+0x280>)
 8004f5a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f5c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	7a9b      	ldrb	r3, [r3, #10]
 8004f62:	075b      	lsls	r3, r3, #29
 8004f64:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f68:	69f9      	ldr	r1, [r7, #28]
 8004f6a:	0148      	lsls	r0, r1, #5
 8004f6c:	6a39      	ldr	r1, [r7, #32]
 8004f6e:	4401      	add	r1, r0
 8004f70:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f74:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f76:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004f78:	79fb      	ldrb	r3, [r7, #7]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d009      	beq.n	8004f92 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	68d9      	ldr	r1, [r3, #12]
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f8e:	460a      	mov	r2, r1
 8004f90:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	bf0c      	ite	eq
 8004fa2:	2301      	moveq	r3, #1
 8004fa4:	2300      	movne	r3, #0
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	0151      	lsls	r1, r2, #5
 8004fbc:	6a3a      	ldr	r2, [r7, #32]
 8004fbe:	440a      	add	r2, r1
 8004fc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fc4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004fc8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	7e7b      	ldrb	r3, [r7, #25]
 8004fda:	075b      	lsls	r3, r3, #29
 8004fdc:	69f9      	ldr	r1, [r7, #28]
 8004fde:	0148      	lsls	r0, r1, #5
 8004fe0:	6a39      	ldr	r1, [r7, #32]
 8004fe2:	4401      	add	r1, r0
 8004fe4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005002:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	78db      	ldrb	r3, [r3, #3]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d004      	beq.n	8005016 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	e003      	b.n	800501e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800501c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005024:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	4413      	add	r3, r2
 800502e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005032:	461a      	mov	r2, r3
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005038:	79fb      	ldrb	r3, [r7, #7]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	e04e      	b.n	80050e0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	78db      	ldrb	r3, [r3, #3]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d149      	bne.n	80050de <USB_HC_StartXfer+0x276>
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d045      	beq.n	80050de <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	79db      	ldrb	r3, [r3, #7]
 8005056:	2b03      	cmp	r3, #3
 8005058:	d830      	bhi.n	80050bc <USB_HC_StartXfer+0x254>
 800505a:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <USB_HC_StartXfer+0x1f8>)
 800505c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005060:	08005071 	.word	0x08005071
 8005064:	08005095 	.word	0x08005095
 8005068:	08005071 	.word	0x08005071
 800506c:	08005095 	.word	0x08005095
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	3303      	adds	r3, #3
 8005076:	089b      	lsrs	r3, r3, #2
 8005078:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800507a:	8afa      	ldrh	r2, [r7, #22]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	b29b      	uxth	r3, r3
 8005082:	429a      	cmp	r2, r3
 8005084:	d91c      	bls.n	80050c0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	f043 0220 	orr.w	r2, r3, #32
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	619a      	str	r2, [r3, #24]
        }
        break;
 8005092:	e015      	b.n	80050c0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	3303      	adds	r3, #3
 800509a:	089b      	lsrs	r3, r3, #2
 800509c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800509e:	8afa      	ldrh	r2, [r7, #22]
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d90a      	bls.n	80050c4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	619a      	str	r2, [r3, #24]
        }
        break;
 80050ba:	e003      	b.n	80050c4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80050bc:	bf00      	nop
 80050be:	e002      	b.n	80050c6 <USB_HC_StartXfer+0x25e>
        break;
 80050c0:	bf00      	nop
 80050c2:	e000      	b.n	80050c6 <USB_HC_StartXfer+0x25e>
        break;
 80050c4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	68d9      	ldr	r1, [r3, #12]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	785a      	ldrb	r2, [r3, #1]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2000      	movs	r0, #0
 80050d6:	9000      	str	r0, [sp, #0]
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f7ff fb31 	bl	8004740 <USB_WritePacket>
  }

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3728      	adds	r7, #40	; 0x28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	1ff80000 	.word	0x1ff80000

080050ec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	b29b      	uxth	r3, r3
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800510e:	b480      	push	{r7}
 8005110:	b089      	sub	sp, #36	; 0x24
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	460b      	mov	r3, r1
 8005118:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800511e:	78fb      	ldrb	r3, [r7, #3]
 8005120:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	0c9b      	lsrs	r3, r3, #18
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	4413      	add	r3, r2
 8005144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	0fdb      	lsrs	r3, r3, #31
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 0320 	and.w	r3, r3, #32
 800515a:	2b20      	cmp	r3, #32
 800515c:	d104      	bne.n	8005168 <USB_HC_Halt+0x5a>
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	e0c8      	b.n	80052fa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <USB_HC_Halt+0x66>
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b02      	cmp	r3, #2
 8005172:	d163      	bne.n	800523c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	4413      	add	r3, r2
 800517c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	0151      	lsls	r1, r2, #5
 8005186:	69fa      	ldr	r2, [r7, #28]
 8005188:	440a      	add	r2, r1
 800518a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800518e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005192:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f003 0320 	and.w	r3, r3, #32
 800519c:	2b00      	cmp	r3, #0
 800519e:	f040 80ab 	bne.w	80052f8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d133      	bne.n	8005216 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	0151      	lsls	r1, r2, #5
 80051c0:	69fa      	ldr	r2, [r7, #28]
 80051c2:	440a      	add	r2, r1
 80051c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051cc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	0151      	lsls	r1, r2, #5
 80051e0:	69fa      	ldr	r2, [r7, #28]
 80051e2:	440a      	add	r2, r1
 80051e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051ec:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3301      	adds	r3, #1
 80051f2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051fa:	d81d      	bhi.n	8005238 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	4413      	add	r3, r2
 8005204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800520e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005212:	d0ec      	beq.n	80051ee <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005214:	e070      	b.n	80052f8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	0151      	lsls	r1, r2, #5
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	440a      	add	r2, r1
 800522c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005230:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005234:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005236:	e05f      	b.n	80052f8 <USB_HC_Halt+0x1ea>
            break;
 8005238:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800523a:	e05d      	b.n	80052f8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	4413      	add	r3, r2
 8005244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	0151      	lsls	r1, r2, #5
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	440a      	add	r2, r1
 8005252:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005256:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800525a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d133      	bne.n	80052d4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	4413      	add	r3, r2
 8005274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	0151      	lsls	r1, r2, #5
 800527e:	69fa      	ldr	r2, [r7, #28]
 8005280:	440a      	add	r2, r1
 8005282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005286:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800528a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	4413      	add	r3, r2
 8005294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	0151      	lsls	r1, r2, #5
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	440a      	add	r2, r1
 80052a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052aa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3301      	adds	r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052b8:	d81d      	bhi.n	80052f6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052d0:	d0ec      	beq.n	80052ac <USB_HC_Halt+0x19e>
 80052d2:	e011      	b.n	80052f8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	69fa      	ldr	r2, [r7, #28]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	e000      	b.n	80052f8 <USB_HC_Halt+0x1ea>
          break;
 80052f6:	bf00      	nop
    }
  }

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3724      	adds	r7, #36	; 0x24
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
	...

08005308 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800531c:	2301      	movs	r3, #1
 800531e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	04da      	lsls	r2, r3, #19
 8005324:	4b15      	ldr	r3, [pc, #84]	; (800537c <USB_DoPing+0x74>)
 8005326:	4013      	ands	r3, r2
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	0151      	lsls	r1, r2, #5
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	440a      	add	r2, r1
 8005330:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005334:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005338:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	4413      	add	r3, r2
 8005342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005350:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005358:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	4413      	add	r3, r2
 8005362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005366:	461a      	mov	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	1ff80000 	.word	0x1ff80000

08005380 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b088      	sub	sp, #32
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff f912 	bl	80045be <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800539a:	2110      	movs	r1, #16
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff f96b 	bl	8004678 <USB_FlushTxFifo>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7ff f997 	bl	80046e0 <USB_FlushRxFifo>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80053bc:	2300      	movs	r3, #0
 80053be:	61bb      	str	r3, [r7, #24]
 80053c0:	e01f      	b.n	8005402 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053e8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f6:	461a      	mov	r2, r3
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	3301      	adds	r3, #1
 8005400:	61bb      	str	r3, [r7, #24]
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	2b0f      	cmp	r3, #15
 8005406:	d9dc      	bls.n	80053c2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005408:	2300      	movs	r3, #0
 800540a:	61bb      	str	r3, [r7, #24]
 800540c:	e034      	b.n	8005478 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	4413      	add	r3, r2
 8005416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005424:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800542c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005434:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	4413      	add	r3, r2
 800543e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005442:	461a      	mov	r2, r3
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	3301      	adds	r3, #1
 800544c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005454:	d80c      	bhi.n	8005470 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	4413      	add	r3, r2
 800545e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800546c:	d0ec      	beq.n	8005448 <USB_StopHost+0xc8>
 800546e:	e000      	b.n	8005472 <USB_StopHost+0xf2>
        break;
 8005470:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	3301      	adds	r3, #1
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	2b0f      	cmp	r3, #15
 800547c:	d9c7      	bls.n	800540e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005484:	461a      	mov	r2, r3
 8005486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800548a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005492:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7ff f881 	bl	800459c <USB_EnableGlobalInt>

  return ret;
 800549a:	7ffb      	ldrb	r3, [r7, #31]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3720      	adds	r7, #32
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80054a4:	b590      	push	{r4, r7, lr}
 80054a6:	b089      	sub	sp, #36	; 0x24
 80054a8:	af04      	add	r7, sp, #16
 80054aa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80054ac:	2301      	movs	r3, #1
 80054ae:	2202      	movs	r2, #2
 80054b0:	2102      	movs	r1, #2
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fc66 	bl	8005d84 <USBH_FindInterface>
 80054b8:	4603      	mov	r3, r0
 80054ba:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
 80054be:	2bff      	cmp	r3, #255	; 0xff
 80054c0:	d002      	beq.n	80054c8 <USBH_CDC_InterfaceInit+0x24>
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d901      	bls.n	80054cc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80054c8:	2302      	movs	r3, #2
 80054ca:	e13d      	b.n	8005748 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	4619      	mov	r1, r3
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fc3b 	bl	8005d4c <USBH_SelectInterface>
 80054d6:	4603      	mov	r3, r0
 80054d8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80054da:	7bbb      	ldrb	r3, [r7, #14]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80054e0:	2302      	movs	r3, #2
 80054e2:	e131      	b.n	8005748 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80054ea:	2050      	movs	r0, #80	; 0x50
 80054ec:	f002 fafa 	bl	8007ae4 <malloc>
 80054f0:	4603      	mov	r3, r0
 80054f2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005504:	2302      	movs	r3, #2
 8005506:	e11f      	b.n	8005748 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005508:	2250      	movs	r2, #80	; 0x50
 800550a:	2100      	movs	r1, #0
 800550c:	68b8      	ldr	r0, [r7, #8]
 800550e:	f002 faf9 	bl	8007b04 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005512:	7bfb      	ldrb	r3, [r7, #15]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	211a      	movs	r1, #26
 8005518:	fb01 f303 	mul.w	r3, r1, r3
 800551c:	4413      	add	r3, r2
 800551e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	b25b      	sxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	da15      	bge.n	8005556 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	211a      	movs	r1, #26
 8005530:	fb01 f303 	mul.w	r3, r1, r3
 8005534:	4413      	add	r3, r2
 8005536:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800553a:	781a      	ldrb	r2, [r3, #0]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005540:	7bfb      	ldrb	r3, [r7, #15]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	211a      	movs	r1, #26
 8005546:	fb01 f303 	mul.w	r3, r1, r3
 800554a:	4413      	add	r3, r2
 800554c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005550:	881a      	ldrh	r2, [r3, #0]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	785b      	ldrb	r3, [r3, #1]
 800555a:	4619      	mov	r1, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f001 ff2c 	bl	80073ba <USBH_AllocPipe>
 8005562:	4603      	mov	r3, r0
 8005564:	461a      	mov	r2, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	7819      	ldrb	r1, [r3, #0]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	7858      	ldrb	r0, [r3, #1]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	8952      	ldrh	r2, [r2, #10]
 8005582:	9202      	str	r2, [sp, #8]
 8005584:	2203      	movs	r2, #3
 8005586:	9201      	str	r2, [sp, #4]
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	4623      	mov	r3, r4
 800558c:	4602      	mov	r2, r0
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f001 fee4 	bl	800735c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2200      	movs	r2, #0
 800559a:	4619      	mov	r1, r3
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f002 f9f3 	bl	8007988 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80055a2:	2300      	movs	r3, #0
 80055a4:	2200      	movs	r2, #0
 80055a6:	210a      	movs	r1, #10
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 fbeb 	bl	8005d84 <USBH_FindInterface>
 80055ae:	4603      	mov	r3, r0
 80055b0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	2bff      	cmp	r3, #255	; 0xff
 80055b6:	d002      	beq.n	80055be <USBH_CDC_InterfaceInit+0x11a>
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d901      	bls.n	80055c2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80055be:	2302      	movs	r3, #2
 80055c0:	e0c2      	b.n	8005748 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	211a      	movs	r1, #26
 80055c8:	fb01 f303 	mul.w	r3, r1, r3
 80055cc:	4413      	add	r3, r2
 80055ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	b25b      	sxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	da16      	bge.n	8005608 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80055da:	7bfb      	ldrb	r3, [r7, #15]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	211a      	movs	r1, #26
 80055e0:	fb01 f303 	mul.w	r3, r1, r3
 80055e4:	4413      	add	r3, r2
 80055e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80055ea:	781a      	ldrb	r2, [r3, #0]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	211a      	movs	r1, #26
 80055f6:	fb01 f303 	mul.w	r3, r1, r3
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005600:	881a      	ldrh	r2, [r3, #0]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	835a      	strh	r2, [r3, #26]
 8005606:	e015      	b.n	8005634 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	211a      	movs	r1, #26
 800560e:	fb01 f303 	mul.w	r3, r1, r3
 8005612:	4413      	add	r3, r2
 8005614:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005618:	781a      	ldrb	r2, [r3, #0]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	211a      	movs	r1, #26
 8005624:	fb01 f303 	mul.w	r3, r1, r3
 8005628:	4413      	add	r3, r2
 800562a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800562e:	881a      	ldrh	r2, [r3, #0]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005634:	7bfb      	ldrb	r3, [r7, #15]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	211a      	movs	r1, #26
 800563a:	fb01 f303 	mul.w	r3, r1, r3
 800563e:	4413      	add	r3, r2
 8005640:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	b25b      	sxtb	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	da16      	bge.n	800567a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800564c:	7bfb      	ldrb	r3, [r7, #15]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	211a      	movs	r1, #26
 8005652:	fb01 f303 	mul.w	r3, r1, r3
 8005656:	4413      	add	r3, r2
 8005658:	f203 3356 	addw	r3, r3, #854	; 0x356
 800565c:	781a      	ldrb	r2, [r3, #0]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005662:	7bfb      	ldrb	r3, [r7, #15]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	211a      	movs	r1, #26
 8005668:	fb01 f303 	mul.w	r3, r1, r3
 800566c:	4413      	add	r3, r2
 800566e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005672:	881a      	ldrh	r2, [r3, #0]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	835a      	strh	r2, [r3, #26]
 8005678:	e015      	b.n	80056a6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800567a:	7bfb      	ldrb	r3, [r7, #15]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	211a      	movs	r1, #26
 8005680:	fb01 f303 	mul.w	r3, r1, r3
 8005684:	4413      	add	r3, r2
 8005686:	f203 3356 	addw	r3, r3, #854	; 0x356
 800568a:	781a      	ldrb	r2, [r3, #0]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	211a      	movs	r1, #26
 8005696:	fb01 f303 	mul.w	r3, r1, r3
 800569a:	4413      	add	r3, r2
 800569c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80056a0:	881a      	ldrh	r2, [r3, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	7b9b      	ldrb	r3, [r3, #14]
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f001 fe84 	bl	80073ba <USBH_AllocPipe>
 80056b2:	4603      	mov	r3, r0
 80056b4:	461a      	mov	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	7bdb      	ldrb	r3, [r3, #15]
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f001 fe7a 	bl	80073ba <USBH_AllocPipe>
 80056c6:	4603      	mov	r3, r0
 80056c8:	461a      	mov	r2, r3
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	7b59      	ldrb	r1, [r3, #13]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	7b98      	ldrb	r0, [r3, #14]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	8b12      	ldrh	r2, [r2, #24]
 80056e6:	9202      	str	r2, [sp, #8]
 80056e8:	2202      	movs	r2, #2
 80056ea:	9201      	str	r2, [sp, #4]
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	4623      	mov	r3, r4
 80056f0:	4602      	mov	r2, r0
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f001 fe32 	bl	800735c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	7b19      	ldrb	r1, [r3, #12]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	7bd8      	ldrb	r0, [r3, #15]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	8b52      	ldrh	r2, [r2, #26]
 8005710:	9202      	str	r2, [sp, #8]
 8005712:	2202      	movs	r2, #2
 8005714:	9201      	str	r2, [sp, #4]
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	4623      	mov	r3, r4
 800571a:	4602      	mov	r2, r0
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f001 fe1d 	bl	800735c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	7b5b      	ldrb	r3, [r3, #13]
 800572e:	2200      	movs	r2, #0
 8005730:	4619      	mov	r1, r3
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f002 f928 	bl	8007988 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	7b1b      	ldrb	r3, [r3, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f002 f921 	bl	8007988 <USBH_LL_SetToggle>

  return USBH_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	bd90      	pop	{r4, r7, pc}

08005750 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00e      	beq.n	8005788 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	4619      	mov	r1, r3
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f001 fe12 	bl	800739a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	4619      	mov	r1, r3
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f001 fe3d 	bl	80073fc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	7b1b      	ldrb	r3, [r3, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00e      	beq.n	80057ae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	7b1b      	ldrb	r3, [r3, #12]
 8005794:	4619      	mov	r1, r3
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f001 fdff 	bl	800739a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	7b1b      	ldrb	r3, [r3, #12]
 80057a0:	4619      	mov	r1, r3
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f001 fe2a 	bl	80073fc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	7b5b      	ldrb	r3, [r3, #13]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00e      	beq.n	80057d4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	7b5b      	ldrb	r3, [r3, #13]
 80057ba:	4619      	mov	r1, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f001 fdec 	bl	800739a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	7b5b      	ldrb	r3, [r3, #13]
 80057c6:	4619      	mov	r1, r3
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f001 fe17 	bl	80073fc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00b      	beq.n	80057f8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f002 f983 	bl	8007af4 <free>
    phost->pActiveClass->pData = 0U;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057f4:	2200      	movs	r2, #0
 80057f6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3340      	adds	r3, #64	; 0x40
 8005818:	4619      	mov	r1, r3
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f8b1 	bl	8005982 <GetLineCoding>
 8005820:	4603      	mov	r3, r0
 8005822:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005824:	7afb      	ldrb	r3, [r7, #11]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d105      	bne.n	8005836 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005830:	2102      	movs	r1, #2
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005836:	7afb      	ldrb	r3, [r7, #11]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005848:	2301      	movs	r3, #1
 800584a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800584c:	2300      	movs	r3, #0
 800584e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005860:	2b04      	cmp	r3, #4
 8005862:	d877      	bhi.n	8005954 <USBH_CDC_Process+0x114>
 8005864:	a201      	add	r2, pc, #4	; (adr r2, 800586c <USBH_CDC_Process+0x2c>)
 8005866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586a:	bf00      	nop
 800586c:	08005881 	.word	0x08005881
 8005870:	08005887 	.word	0x08005887
 8005874:	080058b7 	.word	0x080058b7
 8005878:	0800592b 	.word	0x0800592b
 800587c:	08005939 	.word	0x08005939
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	73fb      	strb	r3, [r7, #15]
      break;
 8005884:	e06d      	b.n	8005962 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800588a:	4619      	mov	r1, r3
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f897 	bl	80059c0 <SetLineCoding>
 8005892:	4603      	mov	r3, r0
 8005894:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005896:	7bbb      	ldrb	r3, [r7, #14]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d104      	bne.n	80058a6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80058a4:	e058      	b.n	8005958 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80058a6:	7bbb      	ldrb	r3, [r7, #14]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d055      	beq.n	8005958 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2204      	movs	r2, #4
 80058b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80058b4:	e050      	b.n	8005958 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	3340      	adds	r3, #64	; 0x40
 80058ba:	4619      	mov	r1, r3
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f860 	bl	8005982 <GetLineCoding>
 80058c2:	4603      	mov	r3, r0
 80058c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80058c6:	7bbb      	ldrb	r3, [r7, #14]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d126      	bne.n	800591a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058de:	791b      	ldrb	r3, [r3, #4]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d13b      	bne.n	800595c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d133      	bne.n	800595c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058fe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005900:	429a      	cmp	r2, r3
 8005902:	d12b      	bne.n	800595c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800590c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800590e:	429a      	cmp	r2, r3
 8005910:	d124      	bne.n	800595c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f958 	bl	8005bc8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005918:	e020      	b.n	800595c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800591a:	7bbb      	ldrb	r3, [r7, #14]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d01d      	beq.n	800595c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2204      	movs	r2, #4
 8005924:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005928:	e018      	b.n	800595c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f867 	bl	80059fe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f8da 	bl	8005aea <CDC_ProcessReception>
      break;
 8005936:	e014      	b.n	8005962 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005938:	2100      	movs	r1, #0
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 ffef 	bl	800691e <USBH_ClrFeature>
 8005940:	4603      	mov	r3, r0
 8005942:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005944:	7bbb      	ldrb	r3, [r7, #14]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10a      	bne.n	8005960 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005952:	e005      	b.n	8005960 <USBH_CDC_Process+0x120>

    default:
      break;
 8005954:	bf00      	nop
 8005956:	e004      	b.n	8005962 <USBH_CDC_Process+0x122>
      break;
 8005958:	bf00      	nop
 800595a:	e002      	b.n	8005962 <USBH_CDC_Process+0x122>
      break;
 800595c:	bf00      	nop
 800595e:	e000      	b.n	8005962 <USBH_CDC_Process+0x122>
      break;
 8005960:	bf00      	nop

  }

  return status;
 8005962:	7bfb      	ldrb	r3, [r7, #15]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b082      	sub	sp, #8
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	22a1      	movs	r2, #161	; 0xa1
 8005990:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2221      	movs	r2, #33	; 0x21
 8005996:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2207      	movs	r2, #7
 80059a8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2207      	movs	r2, #7
 80059ae:	4619      	mov	r1, r3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f001 fa81 	bl	8006eb8 <USBH_CtlReq>
 80059b6:	4603      	mov	r3, r0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2221      	movs	r2, #33	; 0x21
 80059ce:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2220      	movs	r2, #32
 80059d4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2207      	movs	r2, #7
 80059e6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2207      	movs	r2, #7
 80059ec:	4619      	mov	r1, r3
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f001 fa62 	bl	8006eb8 <USBH_CtlReq>
 80059f4:	4603      	mov	r3, r0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b086      	sub	sp, #24
 8005a02:	af02      	add	r7, sp, #8
 8005a04:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005a10:	2300      	movs	r3, #0
 8005a12:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d002      	beq.n	8005a24 <CDC_ProcessTransmission+0x26>
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d023      	beq.n	8005a6a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005a22:	e05e      	b.n	8005ae2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	8b12      	ldrh	r2, [r2, #24]
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d90b      	bls.n	8005a48 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	69d9      	ldr	r1, [r3, #28]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8b1a      	ldrh	r2, [r3, #24]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	7b5b      	ldrb	r3, [r3, #13]
 8005a3c:	2001      	movs	r0, #1
 8005a3e:	9000      	str	r0, [sp, #0]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f001 fc48 	bl	80072d6 <USBH_BulkSendData>
 8005a46:	e00b      	b.n	8005a60 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	7b5b      	ldrb	r3, [r3, #13]
 8005a56:	2001      	movs	r0, #1
 8005a58:	9000      	str	r0, [sp, #0]
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f001 fc3b 	bl	80072d6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a68:	e03b      	b.n	8005ae2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	7b5b      	ldrb	r3, [r3, #13]
 8005a6e:	4619      	mov	r1, r3
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f001 ff5f 	bl	8007934 <USBH_LL_GetURBState>
 8005a76:	4603      	mov	r3, r0
 8005a78:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005a7a:	7afb      	ldrb	r3, [r7, #11]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d128      	bne.n	8005ad2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	8b12      	ldrh	r2, [r2, #24]
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d90e      	bls.n	8005aaa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	8b12      	ldrh	r2, [r2, #24]
 8005a94:	1a9a      	subs	r2, r3, r2
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	8b12      	ldrh	r2, [r2, #24]
 8005aa2:	441a      	add	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	61da      	str	r2, [r3, #28]
 8005aa8:	e002      	b.n	8005ab0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d004      	beq.n	8005ac2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005ac0:	e00e      	b.n	8005ae0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f868 	bl	8005ba0 <USBH_CDC_TransmitCallback>
      break;
 8005ad0:	e006      	b.n	8005ae0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005ad2:	7afb      	ldrb	r3, [r7, #11]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d103      	bne.n	8005ae0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005ae0:	bf00      	nop
  }
}
 8005ae2:	bf00      	nop
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b086      	sub	sp, #24
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d002      	beq.n	8005b10 <CDC_ProcessReception+0x26>
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d00e      	beq.n	8005b2c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005b0e:	e043      	b.n	8005b98 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	6a19      	ldr	r1, [r3, #32]
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	8b5a      	ldrh	r2, [r3, #26]
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	7b1b      	ldrb	r3, [r3, #12]
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f001 fbff 	bl	8007320 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2204      	movs	r2, #4
 8005b26:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005b2a:	e035      	b.n	8005b98 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	7b1b      	ldrb	r3, [r3, #12]
 8005b30:	4619      	mov	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f001 fefe 	bl	8007934 <USBH_LL_GetURBState>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005b3c:	7cfb      	ldrb	r3, [r7, #19]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d129      	bne.n	8005b96 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	7b1b      	ldrb	r3, [r3, #12]
 8005b46:	4619      	mov	r1, r3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f001 fe61 	bl	8007810 <USBH_LL_GetLastXferSize>
 8005b4e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d016      	beq.n	8005b88 <CDC_ProcessReception+0x9e>
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	8b5b      	ldrh	r3, [r3, #26]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d910      	bls.n	8005b88 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	1ad2      	subs	r2, r2, r3
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	6a1a      	ldr	r2, [r3, #32]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	441a      	add	r2, r3
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2203      	movs	r2, #3
 8005b82:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005b86:	e006      	b.n	8005b96 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f80f 	bl	8005bb4 <USBH_CDC_ReceiveCallback>
      break;
 8005b96:	bf00      	nop
  }
}
 8005b98:	bf00      	nop
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	4613      	mov	r3, r2
 8005be8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e029      	b.n	8005c48 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	79fa      	ldrb	r2, [r7, #7]
 8005bf8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 f81f 	bl	8005c50 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f001 fd31 	bl	80076a8 <USBH_LL_Init>

  return USBH_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	e009      	b.n	8005c76 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	33e0      	adds	r3, #224	; 0xe0
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3301      	adds	r3, #1
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b0f      	cmp	r3, #15
 8005c7a:	d9f2      	bls.n	8005c62 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	e009      	b.n	8005c96 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3301      	adds	r3, #1
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c9c:	d3f1      	bcc.n	8005c82 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2240      	movs	r2, #64	; 0x40
 8005cc2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d016      	beq.n	8005d3a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10e      	bne.n	8005d34 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005d1c:	1c59      	adds	r1, r3, #1
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	33de      	adds	r3, #222	; 0xde
 8005d28:	6839      	ldr	r1, [r7, #0]
 8005d2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	73fb      	strb	r3, [r7, #15]
 8005d32:	e004      	b.n	8005d3e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005d34:	2302      	movs	r3, #2
 8005d36:	73fb      	strb	r3, [r7, #15]
 8005d38:	e001      	b.n	8005d3e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	460b      	mov	r3, r1
 8005d56:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005d62:	78fa      	ldrb	r2, [r7, #3]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d204      	bcs.n	8005d72 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	78fa      	ldrb	r2, [r7, #3]
 8005d6c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005d70:	e001      	b.n	8005d76 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005d72:	2302      	movs	r3, #2
 8005d74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	4611      	mov	r1, r2
 8005d90:	461a      	mov	r2, r3
 8005d92:	4603      	mov	r3, r0
 8005d94:	70fb      	strb	r3, [r7, #3]
 8005d96:	460b      	mov	r3, r1
 8005d98:	70bb      	strb	r3, [r7, #2]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005da2:	2300      	movs	r3, #0
 8005da4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005dac:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005dae:	e025      	b.n	8005dfc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005db0:	7dfb      	ldrb	r3, [r7, #23]
 8005db2:	221a      	movs	r2, #26
 8005db4:	fb02 f303 	mul.w	r3, r2, r3
 8005db8:	3308      	adds	r3, #8
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	3302      	adds	r3, #2
 8005dc0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	795b      	ldrb	r3, [r3, #5]
 8005dc6:	78fa      	ldrb	r2, [r7, #3]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d002      	beq.n	8005dd2 <USBH_FindInterface+0x4e>
 8005dcc:	78fb      	ldrb	r3, [r7, #3]
 8005dce:	2bff      	cmp	r3, #255	; 0xff
 8005dd0:	d111      	bne.n	8005df6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005dd6:	78ba      	ldrb	r2, [r7, #2]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d002      	beq.n	8005de2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005ddc:	78bb      	ldrb	r3, [r7, #2]
 8005dde:	2bff      	cmp	r3, #255	; 0xff
 8005de0:	d109      	bne.n	8005df6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005de6:	787a      	ldrb	r2, [r7, #1]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d002      	beq.n	8005df2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005dec:	787b      	ldrb	r3, [r7, #1]
 8005dee:	2bff      	cmp	r3, #255	; 0xff
 8005df0:	d101      	bne.n	8005df6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005df2:	7dfb      	ldrb	r3, [r7, #23]
 8005df4:	e006      	b.n	8005e04 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005df6:	7dfb      	ldrb	r3, [r7, #23]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005dfc:	7dfb      	ldrb	r3, [r7, #23]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d9d6      	bls.n	8005db0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005e02:	23ff      	movs	r3, #255	; 0xff
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	371c      	adds	r7, #28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f001 fc81 	bl	8007720 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005e1e:	2101      	movs	r1, #1
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f001 fd9a 	bl	800795a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af04      	add	r7, sp, #16
 8005e36:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005e38:	2302      	movs	r3, #2
 8005e3a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d102      	bne.n	8005e52 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2203      	movs	r2, #3
 8005e50:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b0b      	cmp	r3, #11
 8005e5a:	f200 81be 	bhi.w	80061da <USBH_Process+0x3aa>
 8005e5e:	a201      	add	r2, pc, #4	; (adr r2, 8005e64 <USBH_Process+0x34>)
 8005e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e64:	08005e95 	.word	0x08005e95
 8005e68:	08005ec7 	.word	0x08005ec7
 8005e6c:	08005f2f 	.word	0x08005f2f
 8005e70:	08006175 	.word	0x08006175
 8005e74:	080061db 	.word	0x080061db
 8005e78:	08005fd3 	.word	0x08005fd3
 8005e7c:	0800611b 	.word	0x0800611b
 8005e80:	08006009 	.word	0x08006009
 8005e84:	08006029 	.word	0x08006029
 8005e88:	08006049 	.word	0x08006049
 8005e8c:	0800608d 	.word	0x0800608d
 8005e90:	0800615d 	.word	0x0800615d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 819e 	beq.w	80061de <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005ea8:	20c8      	movs	r0, #200	; 0xc8
 8005eaa:	f001 fd9d 	bl	80079e8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f001 fc93 	bl	80077da <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005ec4:	e18b      	b.n	80061de <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d107      	bne.n	8005ee0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005ede:	e18d      	b.n	80061fc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005ee6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eea:	d914      	bls.n	8005f16 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d903      	bls.n	8005f0e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	220d      	movs	r2, #13
 8005f0a:	701a      	strb	r2, [r3, #0]
      break;
 8005f0c:	e176      	b.n	80061fc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	701a      	strb	r2, [r3, #0]
      break;
 8005f14:	e172      	b.n	80061fc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005f1c:	f103 020a 	add.w	r2, r3, #10
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005f26:	200a      	movs	r0, #10
 8005f28:	f001 fd5e 	bl	80079e8 <USBH_Delay>
      break;
 8005f2c:	e166      	b.n	80061fc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f3e:	2104      	movs	r1, #4
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005f44:	2064      	movs	r0, #100	; 0x64
 8005f46:	f001 fd4f 	bl	80079e8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f001 fc1e 	bl	800778c <USBH_LL_GetSpeed>
 8005f50:	4603      	mov	r3, r0
 8005f52:	461a      	mov	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2205      	movs	r2, #5
 8005f5e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005f60:	2100      	movs	r1, #0
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f001 fa29 	bl	80073ba <USBH_AllocPipe>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005f70:	2180      	movs	r1, #128	; 0x80
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f001 fa21 	bl	80073ba <USBH_AllocPipe>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	7919      	ldrb	r1, [r3, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005f94:	b292      	uxth	r2, r2
 8005f96:	9202      	str	r2, [sp, #8]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	9201      	str	r2, [sp, #4]
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2280      	movs	r2, #128	; 0x80
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f001 f9da 	bl	800735c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	7959      	ldrb	r1, [r3, #5]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005fbc:	b292      	uxth	r2, r2
 8005fbe:	9202      	str	r2, [sp, #8]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	9201      	str	r2, [sp, #4]
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2200      	movs	r2, #0
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f001 f9c6 	bl	800735c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005fd0:	e114      	b.n	80061fc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f918 	bl	8006208 <USBH_HandleEnum>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005fdc:	7bbb      	ldrb	r3, [r7, #14]
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f040 80fe 	bne.w	80061e2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d103      	bne.n	8006000 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2208      	movs	r2, #8
 8005ffc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005ffe:	e0f0      	b.n	80061e2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2207      	movs	r2, #7
 8006004:	701a      	strb	r2, [r3, #0]
      break;
 8006006:	e0ec      	b.n	80061e2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 80e9 	beq.w	80061e6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800601a:	2101      	movs	r1, #1
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2208      	movs	r2, #8
 8006024:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006026:	e0de      	b.n	80061e6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800602e:	b29b      	uxth	r3, r3
 8006030:	4619      	mov	r1, r3
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fc2c 	bl	8006890 <USBH_SetCfg>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	f040 80d5 	bne.w	80061ea <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2209      	movs	r2, #9
 8006044:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006046:	e0d0      	b.n	80061ea <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800604e:	f003 0320 	and.w	r3, r3, #32
 8006052:	2b00      	cmp	r3, #0
 8006054:	d016      	beq.n	8006084 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006056:	2101      	movs	r1, #1
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fc3c 	bl	80068d6 <USBH_SetFeature>
 800605e:	4603      	mov	r3, r0
 8006060:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006062:	7bbb      	ldrb	r3, [r7, #14]
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d103      	bne.n	8006072 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	220a      	movs	r2, #10
 800606e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006070:	e0bd      	b.n	80061ee <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006072:	7bbb      	ldrb	r3, [r7, #14]
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b03      	cmp	r3, #3
 8006078:	f040 80b9 	bne.w	80061ee <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	220a      	movs	r2, #10
 8006080:	701a      	strb	r2, [r3, #0]
      break;
 8006082:	e0b4      	b.n	80061ee <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	220a      	movs	r2, #10
 8006088:	701a      	strb	r2, [r3, #0]
      break;
 800608a:	e0b0      	b.n	80061ee <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 80ad 	beq.w	80061f2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80060a0:	2300      	movs	r3, #0
 80060a2:	73fb      	strb	r3, [r7, #15]
 80060a4:	e016      	b.n	80060d4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80060a6:	7bfa      	ldrb	r2, [r7, #15]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	32de      	adds	r2, #222	; 0xde
 80060ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b0:	791a      	ldrb	r2, [r3, #4]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d108      	bne.n	80060ce <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80060bc:	7bfa      	ldrb	r2, [r7, #15]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	32de      	adds	r2, #222	; 0xde
 80060c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80060cc:	e005      	b.n	80060da <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	3301      	adds	r3, #1
 80060d2:	73fb      	strb	r3, [r7, #15]
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0e5      	beq.n	80060a6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d016      	beq.n	8006112 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	4798      	blx	r3
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d109      	bne.n	800610a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2206      	movs	r2, #6
 80060fa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006102:	2103      	movs	r1, #3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006108:	e073      	b.n	80061f2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	220d      	movs	r2, #13
 800610e:	701a      	strb	r2, [r3, #0]
      break;
 8006110:	e06f      	b.n	80061f2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	220d      	movs	r2, #13
 8006116:	701a      	strb	r2, [r3, #0]
      break;
 8006118:	e06b      	b.n	80061f2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006120:	2b00      	cmp	r3, #0
 8006122:	d017      	beq.n	8006154 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	4798      	blx	r3
 8006130:	4603      	mov	r3, r0
 8006132:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006134:	7bbb      	ldrb	r3, [r7, #14]
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d103      	bne.n	8006144 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	220b      	movs	r2, #11
 8006140:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006142:	e058      	b.n	80061f6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006144:	7bbb      	ldrb	r3, [r7, #14]
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d154      	bne.n	80061f6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	220d      	movs	r2, #13
 8006150:	701a      	strb	r2, [r3, #0]
      break;
 8006152:	e050      	b.n	80061f6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	220d      	movs	r2, #13
 8006158:	701a      	strb	r2, [r3, #0]
      break;
 800615a:	e04c      	b.n	80061f6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d049      	beq.n	80061fa <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	4798      	blx	r3
      }
      break;
 8006172:	e042      	b.n	80061fa <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f7ff fd67 	bl	8005c50 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006188:	2b00      	cmp	r3, #0
 800618a:	d009      	beq.n	80061a0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d005      	beq.n	80061b6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061b0:	2105      	movs	r1, #5
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d107      	bne.n	80061d2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7ff fe20 	bl	8005e10 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80061d0:	e014      	b.n	80061fc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f001 faa4 	bl	8007720 <USBH_LL_Start>
      break;
 80061d8:	e010      	b.n	80061fc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80061da:	bf00      	nop
 80061dc:	e00e      	b.n	80061fc <USBH_Process+0x3cc>
      break;
 80061de:	bf00      	nop
 80061e0:	e00c      	b.n	80061fc <USBH_Process+0x3cc>
      break;
 80061e2:	bf00      	nop
 80061e4:	e00a      	b.n	80061fc <USBH_Process+0x3cc>
    break;
 80061e6:	bf00      	nop
 80061e8:	e008      	b.n	80061fc <USBH_Process+0x3cc>
      break;
 80061ea:	bf00      	nop
 80061ec:	e006      	b.n	80061fc <USBH_Process+0x3cc>
      break;
 80061ee:	bf00      	nop
 80061f0:	e004      	b.n	80061fc <USBH_Process+0x3cc>
      break;
 80061f2:	bf00      	nop
 80061f4:	e002      	b.n	80061fc <USBH_Process+0x3cc>
      break;
 80061f6:	bf00      	nop
 80061f8:	e000      	b.n	80061fc <USBH_Process+0x3cc>
      break;
 80061fa:	bf00      	nop
  }
  return USBH_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop

08006208 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af04      	add	r7, sp, #16
 800620e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006210:	2301      	movs	r3, #1
 8006212:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006214:	2301      	movs	r3, #1
 8006216:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	785b      	ldrb	r3, [r3, #1]
 800621c:	2b07      	cmp	r3, #7
 800621e:	f200 81c1 	bhi.w	80065a4 <USBH_HandleEnum+0x39c>
 8006222:	a201      	add	r2, pc, #4	; (adr r2, 8006228 <USBH_HandleEnum+0x20>)
 8006224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006228:	08006249 	.word	0x08006249
 800622c:	08006307 	.word	0x08006307
 8006230:	08006371 	.word	0x08006371
 8006234:	080063ff 	.word	0x080063ff
 8006238:	08006469 	.word	0x08006469
 800623c:	080064d9 	.word	0x080064d9
 8006240:	0800651f 	.word	0x0800651f
 8006244:	08006565 	.word	0x08006565
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006248:	2108      	movs	r1, #8
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fa50 	bl	80066f0 <USBH_Get_DevDesc>
 8006250:	4603      	mov	r3, r0
 8006252:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006254:	7bbb      	ldrb	r3, [r7, #14]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d130      	bne.n	80062bc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	7919      	ldrb	r1, [r3, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800627e:	b292      	uxth	r2, r2
 8006280:	9202      	str	r2, [sp, #8]
 8006282:	2200      	movs	r2, #0
 8006284:	9201      	str	r2, [sp, #4]
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	4603      	mov	r3, r0
 800628a:	2280      	movs	r2, #128	; 0x80
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f001 f865 	bl	800735c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	7959      	ldrb	r1, [r3, #5]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80062a6:	b292      	uxth	r2, r2
 80062a8:	9202      	str	r2, [sp, #8]
 80062aa:	2200      	movs	r2, #0
 80062ac:	9201      	str	r2, [sp, #4]
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	4603      	mov	r3, r0
 80062b2:	2200      	movs	r2, #0
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f001 f851 	bl	800735c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80062ba:	e175      	b.n	80065a8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80062bc:	7bbb      	ldrb	r3, [r7, #14]
 80062be:	2b03      	cmp	r3, #3
 80062c0:	f040 8172 	bne.w	80065a8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80062ca:	3301      	adds	r3, #1
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d903      	bls.n	80062e6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	220d      	movs	r2, #13
 80062e2:	701a      	strb	r2, [r3, #0]
      break;
 80062e4:	e160      	b.n	80065a8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	795b      	ldrb	r3, [r3, #5]
 80062ea:	4619      	mov	r1, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f001 f885 	bl	80073fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	791b      	ldrb	r3, [r3, #4]
 80062f6:	4619      	mov	r1, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 f87f 	bl	80073fc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	701a      	strb	r2, [r3, #0]
      break;
 8006304:	e150      	b.n	80065a8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006306:	2112      	movs	r1, #18
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f9f1 	bl	80066f0 <USBH_Get_DevDesc>
 800630e:	4603      	mov	r3, r0
 8006310:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006312:	7bbb      	ldrb	r3, [r7, #14]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d103      	bne.n	8006320 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800631e:	e145      	b.n	80065ac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006320:	7bbb      	ldrb	r3, [r7, #14]
 8006322:	2b03      	cmp	r3, #3
 8006324:	f040 8142 	bne.w	80065ac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800632e:	3301      	adds	r3, #1
 8006330:	b2da      	uxtb	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800633e:	2b03      	cmp	r3, #3
 8006340:	d903      	bls.n	800634a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	220d      	movs	r2, #13
 8006346:	701a      	strb	r2, [r3, #0]
      break;
 8006348:	e130      	b.n	80065ac <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	795b      	ldrb	r3, [r3, #5]
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f001 f853 	bl	80073fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	791b      	ldrb	r3, [r3, #4]
 800635a:	4619      	mov	r1, r3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f001 f84d 	bl	80073fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	701a      	strb	r2, [r3, #0]
      break;
 800636e:	e11d      	b.n	80065ac <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006370:	2101      	movs	r1, #1
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fa68 	bl	8006848 <USBH_SetAddress>
 8006378:	4603      	mov	r3, r0
 800637a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800637c:	7bbb      	ldrb	r3, [r7, #14]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d132      	bne.n	80063e8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006382:	2002      	movs	r0, #2
 8006384:	f001 fb30 	bl	80079e8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2203      	movs	r2, #3
 8006394:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	7919      	ldrb	r1, [r3, #4]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80063aa:	b292      	uxth	r2, r2
 80063ac:	9202      	str	r2, [sp, #8]
 80063ae:	2200      	movs	r2, #0
 80063b0:	9201      	str	r2, [sp, #4]
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	4603      	mov	r3, r0
 80063b6:	2280      	movs	r2, #128	; 0x80
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 ffcf 	bl	800735c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	7959      	ldrb	r1, [r3, #5]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80063d2:	b292      	uxth	r2, r2
 80063d4:	9202      	str	r2, [sp, #8]
 80063d6:	2200      	movs	r2, #0
 80063d8:	9201      	str	r2, [sp, #4]
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	4603      	mov	r3, r0
 80063de:	2200      	movs	r2, #0
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 ffbb 	bl	800735c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80063e6:	e0e3      	b.n	80065b0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063e8:	7bbb      	ldrb	r3, [r7, #14]
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	f040 80e0 	bne.w	80065b0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	220d      	movs	r2, #13
 80063f4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	705a      	strb	r2, [r3, #1]
      break;
 80063fc:	e0d8      	b.n	80065b0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80063fe:	2109      	movs	r1, #9
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f99d 	bl	8006740 <USBH_Get_CfgDesc>
 8006406:	4603      	mov	r3, r0
 8006408:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800640a:	7bbb      	ldrb	r3, [r7, #14]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d103      	bne.n	8006418 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2204      	movs	r2, #4
 8006414:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006416:	e0cd      	b.n	80065b4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006418:	7bbb      	ldrb	r3, [r7, #14]
 800641a:	2b03      	cmp	r3, #3
 800641c:	f040 80ca 	bne.w	80065b4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006426:	3301      	adds	r3, #1
 8006428:	b2da      	uxtb	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006436:	2b03      	cmp	r3, #3
 8006438:	d903      	bls.n	8006442 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	220d      	movs	r2, #13
 800643e:	701a      	strb	r2, [r3, #0]
      break;
 8006440:	e0b8      	b.n	80065b4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	795b      	ldrb	r3, [r3, #5]
 8006446:	4619      	mov	r1, r3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 ffd7 	bl	80073fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	791b      	ldrb	r3, [r3, #4]
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 ffd1 	bl	80073fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	701a      	strb	r2, [r3, #0]
      break;
 8006466:	e0a5      	b.n	80065b4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f965 	bl	8006740 <USBH_Get_CfgDesc>
 8006476:	4603      	mov	r3, r0
 8006478:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800647a:	7bbb      	ldrb	r3, [r7, #14]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d103      	bne.n	8006488 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2205      	movs	r2, #5
 8006484:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006486:	e097      	b.n	80065b8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006488:	7bbb      	ldrb	r3, [r7, #14]
 800648a:	2b03      	cmp	r3, #3
 800648c:	f040 8094 	bne.w	80065b8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006496:	3301      	adds	r3, #1
 8006498:	b2da      	uxtb	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064a6:	2b03      	cmp	r3, #3
 80064a8:	d903      	bls.n	80064b2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	220d      	movs	r2, #13
 80064ae:	701a      	strb	r2, [r3, #0]
      break;
 80064b0:	e082      	b.n	80065b8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	795b      	ldrb	r3, [r3, #5]
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 ff9f 	bl	80073fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	791b      	ldrb	r3, [r3, #4]
 80064c2:	4619      	mov	r1, r3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 ff99 	bl	80073fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	701a      	strb	r2, [r3, #0]
      break;
 80064d6:	e06f      	b.n	80065b8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d019      	beq.n	8006516 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80064ee:	23ff      	movs	r3, #255	; 0xff
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f949 	bl	8006788 <USBH_Get_StringDesc>
 80064f6:	4603      	mov	r3, r0
 80064f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80064fa:	7bbb      	ldrb	r3, [r7, #14]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d103      	bne.n	8006508 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2206      	movs	r2, #6
 8006504:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006506:	e059      	b.n	80065bc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006508:	7bbb      	ldrb	r3, [r7, #14]
 800650a:	2b03      	cmp	r3, #3
 800650c:	d156      	bne.n	80065bc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2206      	movs	r2, #6
 8006512:	705a      	strb	r2, [r3, #1]
      break;
 8006514:	e052      	b.n	80065bc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2206      	movs	r2, #6
 800651a:	705a      	strb	r2, [r3, #1]
      break;
 800651c:	e04e      	b.n	80065bc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006524:	2b00      	cmp	r3, #0
 8006526:	d019      	beq.n	800655c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006534:	23ff      	movs	r3, #255	; 0xff
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f926 	bl	8006788 <USBH_Get_StringDesc>
 800653c:	4603      	mov	r3, r0
 800653e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006540:	7bbb      	ldrb	r3, [r7, #14]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d103      	bne.n	800654e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2207      	movs	r2, #7
 800654a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800654c:	e038      	b.n	80065c0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800654e:	7bbb      	ldrb	r3, [r7, #14]
 8006550:	2b03      	cmp	r3, #3
 8006552:	d135      	bne.n	80065c0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2207      	movs	r2, #7
 8006558:	705a      	strb	r2, [r3, #1]
      break;
 800655a:	e031      	b.n	80065c0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2207      	movs	r2, #7
 8006560:	705a      	strb	r2, [r3, #1]
      break;
 8006562:	e02d      	b.n	80065c0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800656a:	2b00      	cmp	r3, #0
 800656c:	d017      	beq.n	800659e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800657a:	23ff      	movs	r3, #255	; 0xff
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f903 	bl	8006788 <USBH_Get_StringDesc>
 8006582:	4603      	mov	r3, r0
 8006584:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006586:	7bbb      	ldrb	r3, [r7, #14]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d102      	bne.n	8006592 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800658c:	2300      	movs	r3, #0
 800658e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006590:	e018      	b.n	80065c4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006592:	7bbb      	ldrb	r3, [r7, #14]
 8006594:	2b03      	cmp	r3, #3
 8006596:	d115      	bne.n	80065c4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006598:	2300      	movs	r3, #0
 800659a:	73fb      	strb	r3, [r7, #15]
      break;
 800659c:	e012      	b.n	80065c4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	73fb      	strb	r3, [r7, #15]
      break;
 80065a2:	e00f      	b.n	80065c4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80065a4:	bf00      	nop
 80065a6:	e00e      	b.n	80065c6 <USBH_HandleEnum+0x3be>
      break;
 80065a8:	bf00      	nop
 80065aa:	e00c      	b.n	80065c6 <USBH_HandleEnum+0x3be>
      break;
 80065ac:	bf00      	nop
 80065ae:	e00a      	b.n	80065c6 <USBH_HandleEnum+0x3be>
      break;
 80065b0:	bf00      	nop
 80065b2:	e008      	b.n	80065c6 <USBH_HandleEnum+0x3be>
      break;
 80065b4:	bf00      	nop
 80065b6:	e006      	b.n	80065c6 <USBH_HandleEnum+0x3be>
      break;
 80065b8:	bf00      	nop
 80065ba:	e004      	b.n	80065c6 <USBH_HandleEnum+0x3be>
      break;
 80065bc:	bf00      	nop
 80065be:	e002      	b.n	80065c6 <USBH_HandleEnum+0x3be>
      break;
 80065c0:	bf00      	nop
 80065c2:	e000      	b.n	80065c6 <USBH_HandleEnum+0x3be>
      break;
 80065c4:	bf00      	nop
  }
  return Status;
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80065e2:	bf00      	nop
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b082      	sub	sp, #8
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80065fc:	1c5a      	adds	r2, r3, #1
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f804 	bl	8006612 <USBH_HandleSof>
}
 800660a:	bf00      	nop
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b082      	sub	sp, #8
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b0b      	cmp	r3, #11
 8006622:	d10a      	bne.n	800663a <USBH_HandleSof+0x28>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800662a:	2b00      	cmp	r3, #0
 800662c:	d005      	beq.n	800663a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	4798      	blx	r3
  }
}
 800663a:	bf00      	nop
 800663c:	3708      	adds	r7, #8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006652:	bf00      	nop
}
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800665e:	b480      	push	{r7}
 8006660:	b083      	sub	sp, #12
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800666e:	bf00      	nop
}
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800667a:	b480      	push	{r7}
 800667c:	b083      	sub	sp, #12
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f001 f844 	bl	8007756 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	791b      	ldrb	r3, [r3, #4]
 80066d2:	4619      	mov	r1, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fe91 	bl	80073fc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	795b      	ldrb	r3, [r3, #5]
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fe8b 	bl	80073fc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af02      	add	r7, sp, #8
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006702:	78fb      	ldrb	r3, [r7, #3]
 8006704:	b29b      	uxth	r3, r3
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	4613      	mov	r3, r2
 800670a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800670e:	2100      	movs	r1, #0
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f864 	bl	80067de <USBH_GetDescriptor>
 8006716:	4603      	mov	r3, r0
 8006718:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800671a:	7bfb      	ldrb	r3, [r7, #15]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800672c:	78fa      	ldrb	r2, [r7, #3]
 800672e:	b292      	uxth	r2, r2
 8006730:	4619      	mov	r1, r3
 8006732:	f000 f918 	bl	8006966 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006736:	7bfb      	ldrb	r3, [r7, #15]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af02      	add	r7, sp, #8
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	331c      	adds	r3, #28
 8006750:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006752:	887b      	ldrh	r3, [r7, #2]
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800675c:	2100      	movs	r1, #0
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f83d 	bl	80067de <USBH_GetDescriptor>
 8006764:	4603      	mov	r3, r0
 8006766:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006768:	7bfb      	ldrb	r3, [r7, #15]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d107      	bne.n	800677e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800676e:	887b      	ldrh	r3, [r7, #2]
 8006770:	461a      	mov	r2, r3
 8006772:	68b9      	ldr	r1, [r7, #8]
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f987 	bl	8006a88 <USBH_ParseCfgDesc>
 800677a:	4603      	mov	r3, r0
 800677c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800677e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b088      	sub	sp, #32
 800678c:	af02      	add	r7, sp, #8
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	607a      	str	r2, [r7, #4]
 8006792:	461a      	mov	r2, r3
 8006794:	460b      	mov	r3, r1
 8006796:	72fb      	strb	r3, [r7, #11]
 8006798:	4613      	mov	r3, r2
 800679a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800679c:	7afb      	ldrb	r3, [r7, #11]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80067a4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80067ac:	893b      	ldrh	r3, [r7, #8]
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	460b      	mov	r3, r1
 80067b2:	2100      	movs	r1, #0
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f812 	bl	80067de <USBH_GetDescriptor>
 80067ba:	4603      	mov	r3, r0
 80067bc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80067be:	7dfb      	ldrb	r3, [r7, #23]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d107      	bne.n	80067d4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80067ca:	893a      	ldrh	r2, [r7, #8]
 80067cc:	6879      	ldr	r1, [r7, #4]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 fb24 	bl	8006e1c <USBH_ParseStringDesc>
  }

  return status;
 80067d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b084      	sub	sp, #16
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	60f8      	str	r0, [r7, #12]
 80067e6:	607b      	str	r3, [r7, #4]
 80067e8:	460b      	mov	r3, r1
 80067ea:	72fb      	strb	r3, [r7, #11]
 80067ec:	4613      	mov	r3, r2
 80067ee:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	789b      	ldrb	r3, [r3, #2]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d11c      	bne.n	8006832 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80067f8:	7afb      	ldrb	r3, [r7, #11]
 80067fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2206      	movs	r2, #6
 8006808:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	893a      	ldrh	r2, [r7, #8]
 800680e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006810:	893b      	ldrh	r3, [r7, #8]
 8006812:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006816:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800681a:	d104      	bne.n	8006826 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f240 4209 	movw	r2, #1033	; 0x409
 8006822:	829a      	strh	r2, [r3, #20]
 8006824:	e002      	b.n	800682c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8b3a      	ldrh	r2, [r7, #24]
 8006830:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006832:	8b3b      	ldrh	r3, [r7, #24]
 8006834:	461a      	mov	r2, r3
 8006836:	6879      	ldr	r1, [r7, #4]
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 fb3d 	bl	8006eb8 <USBH_CtlReq>
 800683e:	4603      	mov	r3, r0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	789b      	ldrb	r3, [r3, #2]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d10f      	bne.n	800687c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2205      	movs	r2, #5
 8006866:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006868:	78fb      	ldrb	r3, [r7, #3]
 800686a:	b29a      	uxth	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800687c:	2200      	movs	r2, #0
 800687e:	2100      	movs	r1, #0
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fb19 	bl	8006eb8 <USBH_CtlReq>
 8006886:	4603      	mov	r3, r0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	789b      	ldrb	r3, [r3, #2]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d10e      	bne.n	80068c2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2209      	movs	r2, #9
 80068ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	887a      	ldrh	r2, [r7, #2]
 80068b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80068c2:	2200      	movs	r2, #0
 80068c4:	2100      	movs	r1, #0
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 faf6 	bl	8006eb8 <USBH_CtlReq>
 80068cc:	4603      	mov	r3, r0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b082      	sub	sp, #8
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	460b      	mov	r3, r1
 80068e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	789b      	ldrb	r3, [r3, #2]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d10f      	bne.n	800690a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2203      	movs	r2, #3
 80068f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80068f6:	78fb      	ldrb	r3, [r7, #3]
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800690a:	2200      	movs	r2, #0
 800690c:	2100      	movs	r1, #0
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fad2 	bl	8006eb8 <USBH_CtlReq>
 8006914:	4603      	mov	r3, r0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b082      	sub	sp, #8
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	460b      	mov	r3, r1
 8006928:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	789b      	ldrb	r3, [r3, #2]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d10f      	bne.n	8006952 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2202      	movs	r2, #2
 8006936:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006944:	78fb      	ldrb	r3, [r7, #3]
 8006946:	b29a      	uxth	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006952:	2200      	movs	r2, #0
 8006954:	2100      	movs	r1, #0
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 faae 	bl	8006eb8 <USBH_CtlReq>
 800695c:	4603      	mov	r3, r0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006966:	b480      	push	{r7}
 8006968:	b085      	sub	sp, #20
 800696a:	af00      	add	r7, sp, #0
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	4613      	mov	r3, r2
 8006972:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	781a      	ldrb	r2, [r3, #0]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	785a      	ldrb	r2, [r3, #1]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	3302      	adds	r3, #2
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	b29a      	uxth	r2, r3
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	3303      	adds	r3, #3
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	b29b      	uxth	r3, r3
 8006994:	021b      	lsls	r3, r3, #8
 8006996:	b29b      	uxth	r3, r3
 8006998:	4313      	orrs	r3, r2
 800699a:	b29a      	uxth	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	791a      	ldrb	r2, [r3, #4]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	795a      	ldrb	r2, [r3, #5]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	799a      	ldrb	r2, [r3, #6]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	79da      	ldrb	r2, [r3, #7]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	79db      	ldrb	r3, [r3, #7]
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	dc11      	bgt.n	80069ec <USBH_ParseDevDesc+0x86>
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	db16      	blt.n	80069fa <USBH_ParseDevDesc+0x94>
 80069cc:	3b08      	subs	r3, #8
 80069ce:	2201      	movs	r2, #1
 80069d0:	fa02 f303 	lsl.w	r3, r2, r3
 80069d4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80069d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	bf14      	ite	ne
 80069e0:	2301      	movne	r3, #1
 80069e2:	2300      	moveq	r3, #0
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d102      	bne.n	80069f0 <USBH_ParseDevDesc+0x8a>
 80069ea:	e006      	b.n	80069fa <USBH_ParseDevDesc+0x94>
 80069ec:	2b40      	cmp	r3, #64	; 0x40
 80069ee:	d104      	bne.n	80069fa <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	79da      	ldrb	r2, [r3, #7]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	71da      	strb	r2, [r3, #7]
      break;
 80069f8:	e003      	b.n	8006a02 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2240      	movs	r2, #64	; 0x40
 80069fe:	71da      	strb	r2, [r3, #7]
      break;
 8006a00:	bf00      	nop
  }

  if (length > 8U)
 8006a02:	88fb      	ldrh	r3, [r7, #6]
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d939      	bls.n	8006a7c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	3309      	adds	r3, #9
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	021b      	lsls	r3, r3, #8
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	330a      	adds	r3, #10
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	330b      	adds	r3, #11
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	021b      	lsls	r3, r3, #8
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	330c      	adds	r3, #12
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	330d      	adds	r3, #13
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	021b      	lsls	r3, r3, #8
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	4313      	orrs	r3, r2
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	7b9a      	ldrb	r2, [r3, #14]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	7bda      	ldrb	r2, [r3, #15]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	7c1a      	ldrb	r2, [r3, #16]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	7c5a      	ldrb	r2, [r3, #17]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	745a      	strb	r2, [r3, #17]
  }
}
 8006a7c:	bf00      	nop
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b08c      	sub	sp, #48	; 0x30
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	4613      	mov	r3, r2
 8006a94:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006a9c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	781a      	ldrb	r2, [r3, #0]
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	785a      	ldrb	r2, [r3, #1]
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	3302      	adds	r3, #2
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	3303      	adds	r3, #3
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	021b      	lsls	r3, r3, #8
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	4313      	orrs	r3, r2
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae4:	bf28      	it	cs
 8006ae6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	791a      	ldrb	r2, [r3, #4]
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	795a      	ldrb	r2, [r3, #5]
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	799a      	ldrb	r2, [r3, #6]
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	79da      	ldrb	r2, [r3, #7]
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	7a1a      	ldrb	r2, [r3, #8]
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	2b09      	cmp	r3, #9
 8006b1e:	d002      	beq.n	8006b26 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	2209      	movs	r2, #9
 8006b24:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006b26:	88fb      	ldrh	r3, [r7, #6]
 8006b28:	2b09      	cmp	r3, #9
 8006b2a:	f240 809d 	bls.w	8006c68 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006b2e:	2309      	movs	r3, #9
 8006b30:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006b36:	e081      	b.n	8006c3c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006b38:	f107 0316 	add.w	r3, r7, #22
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b40:	f000 f99f 	bl	8006e82 <USBH_GetNextDesc>
 8006b44:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d176      	bne.n	8006c3c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b09      	cmp	r3, #9
 8006b54:	d002      	beq.n	8006b5c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	2209      	movs	r2, #9
 8006b5a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b60:	221a      	movs	r2, #26
 8006b62:	fb02 f303 	mul.w	r3, r2, r3
 8006b66:	3308      	adds	r3, #8
 8006b68:	6a3a      	ldr	r2, [r7, #32]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	3302      	adds	r3, #2
 8006b6e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b72:	69f8      	ldr	r0, [r7, #28]
 8006b74:	f000 f87e 	bl	8006c74 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006b82:	e043      	b.n	8006c0c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006b84:	f107 0316 	add.w	r3, r7, #22
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b8c:	f000 f979 	bl	8006e82 <USBH_GetNextDesc>
 8006b90:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	785b      	ldrb	r3, [r3, #1]
 8006b96:	2b05      	cmp	r3, #5
 8006b98:	d138      	bne.n	8006c0c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	795b      	ldrb	r3, [r3, #5]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d10f      	bne.n	8006bc2 <USBH_ParseCfgDesc+0x13a>
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	799b      	ldrb	r3, [r3, #6]
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d10b      	bne.n	8006bc2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	79db      	ldrb	r3, [r3, #7]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10f      	bne.n	8006bd2 <USBH_ParseCfgDesc+0x14a>
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	2b09      	cmp	r3, #9
 8006bb8:	d00b      	beq.n	8006bd2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	2209      	movs	r2, #9
 8006bbe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006bc0:	e007      	b.n	8006bd2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	2b07      	cmp	r3, #7
 8006bc8:	d004      	beq.n	8006bd4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bcc:	2207      	movs	r2, #7
 8006bce:	701a      	strb	r2, [r3, #0]
 8006bd0:	e000      	b.n	8006bd4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006bd2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bd8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006bdc:	3201      	adds	r2, #1
 8006bde:	00d2      	lsls	r2, r2, #3
 8006be0:	211a      	movs	r1, #26
 8006be2:	fb01 f303 	mul.w	r3, r1, r3
 8006be6:	4413      	add	r3, r2
 8006be8:	3308      	adds	r3, #8
 8006bea:	6a3a      	ldr	r2, [r7, #32]
 8006bec:	4413      	add	r3, r2
 8006bee:	3304      	adds	r3, #4
 8006bf0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bf4:	69b9      	ldr	r1, [r7, #24]
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 f86b 	bl	8006cd2 <USBH_ParseEPDesc>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006c02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c06:	3301      	adds	r3, #1
 8006c08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	791b      	ldrb	r3, [r3, #4]
 8006c10:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d204      	bcs.n	8006c22 <USBH_ParseCfgDesc+0x19a>
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	885a      	ldrh	r2, [r3, #2]
 8006c1c:	8afb      	ldrh	r3, [r7, #22]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d8b0      	bhi.n	8006b84 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	791b      	ldrb	r3, [r3, #4]
 8006c26:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d201      	bcs.n	8006c32 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e01c      	b.n	8006c6c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006c32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c36:	3301      	adds	r3, #1
 8006c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d805      	bhi.n	8006c50 <USBH_ParseCfgDesc+0x1c8>
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	885a      	ldrh	r2, [r3, #2]
 8006c48:	8afb      	ldrh	r3, [r7, #22]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	f63f af74 	bhi.w	8006b38 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	791b      	ldrb	r3, [r3, #4]
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	bf28      	it	cs
 8006c58:	2302      	movcs	r3, #2
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d201      	bcs.n	8006c68 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e001      	b.n	8006c6c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006c68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3730      	adds	r7, #48	; 0x30
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	781a      	ldrb	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	785a      	ldrb	r2, [r3, #1]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	789a      	ldrb	r2, [r3, #2]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	78da      	ldrb	r2, [r3, #3]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	791a      	ldrb	r2, [r3, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	795a      	ldrb	r2, [r3, #5]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	799a      	ldrb	r2, [r3, #6]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	79da      	ldrb	r2, [r3, #7]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	7a1a      	ldrb	r2, [r3, #8]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	721a      	strb	r2, [r3, #8]
}
 8006cc6:	bf00      	nop
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b087      	sub	sp, #28
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	60f8      	str	r0, [r7, #12]
 8006cda:	60b9      	str	r1, [r7, #8]
 8006cdc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	781a      	ldrb	r2, [r3, #0]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	785a      	ldrb	r2, [r3, #1]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	789a      	ldrb	r2, [r3, #2]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	78da      	ldrb	r2, [r3, #3]
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3304      	adds	r3, #4
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	3305      	adds	r3, #5
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	021b      	lsls	r3, r3, #8
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	4313      	orrs	r3, r2
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	799a      	ldrb	r2, [r3, #6]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	889b      	ldrh	r3, [r3, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d102      	bne.n	8006d34 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	75fb      	strb	r3, [r7, #23]
 8006d32:	e033      	b.n	8006d9c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	889b      	ldrh	r3, [r3, #4]
 8006d38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d3c:	f023 0307 	bic.w	r3, r3, #7
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	889b      	ldrh	r3, [r3, #4]
 8006d4a:	b21a      	sxth	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	3304      	adds	r3, #4
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	b299      	uxth	r1, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3305      	adds	r3, #5
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	021b      	lsls	r3, r3, #8
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	430b      	orrs	r3, r1
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d110      	bne.n	8006d8e <USBH_ParseEPDesc+0xbc>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	b299      	uxth	r1, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3305      	adds	r3, #5
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	021b      	lsls	r3, r3, #8
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	430b      	orrs	r3, r1
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	b21b      	sxth	r3, r3
 8006d86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d8a:	b21b      	sxth	r3, r3
 8006d8c:	e001      	b.n	8006d92 <USBH_ParseEPDesc+0xc0>
 8006d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d92:	4313      	orrs	r3, r2
 8006d94:	b21b      	sxth	r3, r3
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d116      	bne.n	8006dd4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	78db      	ldrb	r3, [r3, #3]
 8006daa:	f003 0303 	and.w	r3, r3, #3
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d005      	beq.n	8006dbe <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	78db      	ldrb	r3, [r3, #3]
 8006db6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d127      	bne.n	8006e0e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	799b      	ldrb	r3, [r3, #6]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <USBH_ParseEPDesc+0xfc>
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	799b      	ldrb	r3, [r3, #6]
 8006dca:	2b10      	cmp	r3, #16
 8006dcc:	d91f      	bls.n	8006e0e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	75fb      	strb	r3, [r7, #23]
 8006dd2:	e01c      	b.n	8006e0e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	78db      	ldrb	r3, [r3, #3]
 8006dd8:	f003 0303 	and.w	r3, r3, #3
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d10a      	bne.n	8006df6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	799b      	ldrb	r3, [r3, #6]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <USBH_ParseEPDesc+0x11e>
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	799b      	ldrb	r3, [r3, #6]
 8006dec:	2b10      	cmp	r3, #16
 8006dee:	d90e      	bls.n	8006e0e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006df0:	2303      	movs	r3, #3
 8006df2:	75fb      	strb	r3, [r7, #23]
 8006df4:	e00b      	b.n	8006e0e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	78db      	ldrb	r3, [r3, #3]
 8006dfa:	f003 0303 	and.w	r3, r3, #3
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	d105      	bne.n	8006e0e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	799b      	ldrb	r3, [r3, #6]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	4613      	mov	r3, r2
 8006e28:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d120      	bne.n	8006e76 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	1e9a      	subs	r2, r3, #2
 8006e3a:	88fb      	ldrh	r3, [r7, #6]
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	bf28      	it	cs
 8006e40:	4613      	movcs	r3, r2
 8006e42:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3302      	adds	r3, #2
 8006e48:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	82fb      	strh	r3, [r7, #22]
 8006e4e:	e00b      	b.n	8006e68 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006e50:	8afb      	ldrh	r3, [r7, #22]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	4413      	add	r3, r2
 8006e56:	781a      	ldrb	r2, [r3, #0]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006e62:	8afb      	ldrh	r3, [r7, #22]
 8006e64:	3302      	adds	r3, #2
 8006e66:	82fb      	strh	r3, [r7, #22]
 8006e68:	8afa      	ldrh	r2, [r7, #22]
 8006e6a:	8abb      	ldrh	r3, [r7, #20]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d3ef      	bcc.n	8006e50 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2200      	movs	r2, #0
 8006e74:	701a      	strb	r2, [r3, #0]
  }
}
 8006e76:	bf00      	nop
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b085      	sub	sp, #20
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	881a      	ldrh	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	4413      	add	r3, r2
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	789b      	ldrb	r3, [r3, #2]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d002      	beq.n	8006ed8 <USBH_CtlReq+0x20>
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d00f      	beq.n	8006ef6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006ed6:	e027      	b.n	8006f28 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	88fa      	ldrh	r2, [r7, #6]
 8006ee2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2202      	movs	r2, #2
 8006eee:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef4:	e018      	b.n	8006f28 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 f81c 	bl	8006f34 <USBH_HandleControl>
 8006efc:	4603      	mov	r3, r0
 8006efe:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d002      	beq.n	8006f0c <USBH_CtlReq+0x54>
 8006f06:	7dfb      	ldrb	r3, [r7, #23]
 8006f08:	2b03      	cmp	r3, #3
 8006f0a:	d106      	bne.n	8006f1a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	761a      	strb	r2, [r3, #24]
      break;
 8006f18:	e005      	b.n	8006f26 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006f1a:	7dfb      	ldrb	r3, [r7, #23]
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d102      	bne.n	8006f26 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2201      	movs	r2, #1
 8006f24:	709a      	strb	r2, [r3, #2]
      break;
 8006f26:	bf00      	nop
  }
  return status;
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
	...

08006f34 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af02      	add	r7, sp, #8
 8006f3a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f40:	2300      	movs	r3, #0
 8006f42:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	7e1b      	ldrb	r3, [r3, #24]
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	2b0a      	cmp	r3, #10
 8006f4c:	f200 8156 	bhi.w	80071fc <USBH_HandleControl+0x2c8>
 8006f50:	a201      	add	r2, pc, #4	; (adr r2, 8006f58 <USBH_HandleControl+0x24>)
 8006f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f56:	bf00      	nop
 8006f58:	08006f85 	.word	0x08006f85
 8006f5c:	08006f9f 	.word	0x08006f9f
 8006f60:	08007009 	.word	0x08007009
 8006f64:	0800702f 	.word	0x0800702f
 8006f68:	08007067 	.word	0x08007067
 8006f6c:	08007091 	.word	0x08007091
 8006f70:	080070e3 	.word	0x080070e3
 8006f74:	08007105 	.word	0x08007105
 8006f78:	08007141 	.word	0x08007141
 8006f7c:	08007167 	.word	0x08007167
 8006f80:	080071a5 	.word	0x080071a5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f103 0110 	add.w	r1, r3, #16
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	795b      	ldrb	r3, [r3, #5]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f943 	bl	800721c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2202      	movs	r2, #2
 8006f9a:	761a      	strb	r2, [r3, #24]
      break;
 8006f9c:	e139      	b.n	8007212 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	795b      	ldrb	r3, [r3, #5]
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fcc5 	bl	8007934 <USBH_LL_GetURBState>
 8006faa:	4603      	mov	r3, r0
 8006fac:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006fae:	7bbb      	ldrb	r3, [r7, #14]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d11e      	bne.n	8006ff2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	7c1b      	ldrb	r3, [r3, #16]
 8006fb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fbc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	8adb      	ldrh	r3, [r3, #22]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00a      	beq.n	8006fdc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006fc6:	7b7b      	ldrb	r3, [r7, #13]
 8006fc8:	2b80      	cmp	r3, #128	; 0x80
 8006fca:	d103      	bne.n	8006fd4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2203      	movs	r2, #3
 8006fd0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006fd2:	e115      	b.n	8007200 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2205      	movs	r2, #5
 8006fd8:	761a      	strb	r2, [r3, #24]
      break;
 8006fda:	e111      	b.n	8007200 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006fdc:	7b7b      	ldrb	r3, [r7, #13]
 8006fde:	2b80      	cmp	r3, #128	; 0x80
 8006fe0:	d103      	bne.n	8006fea <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2209      	movs	r2, #9
 8006fe6:	761a      	strb	r2, [r3, #24]
      break;
 8006fe8:	e10a      	b.n	8007200 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2207      	movs	r2, #7
 8006fee:	761a      	strb	r2, [r3, #24]
      break;
 8006ff0:	e106      	b.n	8007200 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006ff2:	7bbb      	ldrb	r3, [r7, #14]
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	d003      	beq.n	8007000 <USBH_HandleControl+0xcc>
 8006ff8:	7bbb      	ldrb	r3, [r7, #14]
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	f040 8100 	bne.w	8007200 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	220b      	movs	r2, #11
 8007004:	761a      	strb	r2, [r3, #24]
      break;
 8007006:	e0fb      	b.n	8007200 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800700e:	b29a      	uxth	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6899      	ldr	r1, [r3, #8]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	899a      	ldrh	r2, [r3, #12]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	791b      	ldrb	r3, [r3, #4]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f93a 	bl	800729a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2204      	movs	r2, #4
 800702a:	761a      	strb	r2, [r3, #24]
      break;
 800702c:	e0f1      	b.n	8007212 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	791b      	ldrb	r3, [r3, #4]
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fc7d 	bl	8007934 <USBH_LL_GetURBState>
 800703a:	4603      	mov	r3, r0
 800703c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800703e:	7bbb      	ldrb	r3, [r7, #14]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d102      	bne.n	800704a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2209      	movs	r2, #9
 8007048:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800704a:	7bbb      	ldrb	r3, [r7, #14]
 800704c:	2b05      	cmp	r3, #5
 800704e:	d102      	bne.n	8007056 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007050:	2303      	movs	r3, #3
 8007052:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007054:	e0d6      	b.n	8007204 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007056:	7bbb      	ldrb	r3, [r7, #14]
 8007058:	2b04      	cmp	r3, #4
 800705a:	f040 80d3 	bne.w	8007204 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	220b      	movs	r2, #11
 8007062:	761a      	strb	r2, [r3, #24]
      break;
 8007064:	e0ce      	b.n	8007204 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6899      	ldr	r1, [r3, #8]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	899a      	ldrh	r2, [r3, #12]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	795b      	ldrb	r3, [r3, #5]
 8007072:	2001      	movs	r0, #1
 8007074:	9000      	str	r0, [sp, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f8ea 	bl	8007250 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007082:	b29a      	uxth	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2206      	movs	r2, #6
 800708c:	761a      	strb	r2, [r3, #24]
      break;
 800708e:	e0c0      	b.n	8007212 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	795b      	ldrb	r3, [r3, #5]
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fc4c 	bl	8007934 <USBH_LL_GetURBState>
 800709c:	4603      	mov	r3, r0
 800709e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80070a0:	7bbb      	ldrb	r3, [r7, #14]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d103      	bne.n	80070ae <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2207      	movs	r2, #7
 80070aa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80070ac:	e0ac      	b.n	8007208 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	2b05      	cmp	r3, #5
 80070b2:	d105      	bne.n	80070c0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	220c      	movs	r2, #12
 80070b8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80070ba:	2303      	movs	r3, #3
 80070bc:	73fb      	strb	r3, [r7, #15]
      break;
 80070be:	e0a3      	b.n	8007208 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80070c0:	7bbb      	ldrb	r3, [r7, #14]
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d103      	bne.n	80070ce <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2205      	movs	r2, #5
 80070ca:	761a      	strb	r2, [r3, #24]
      break;
 80070cc:	e09c      	b.n	8007208 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80070ce:	7bbb      	ldrb	r3, [r7, #14]
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	f040 8099 	bne.w	8007208 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	220b      	movs	r2, #11
 80070da:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80070dc:	2302      	movs	r3, #2
 80070de:	73fb      	strb	r3, [r7, #15]
      break;
 80070e0:	e092      	b.n	8007208 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	791b      	ldrb	r3, [r3, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	2100      	movs	r1, #0
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f8d5 	bl	800729a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2208      	movs	r2, #8
 8007100:	761a      	strb	r2, [r3, #24]

      break;
 8007102:	e086      	b.n	8007212 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	791b      	ldrb	r3, [r3, #4]
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fc12 	bl	8007934 <USBH_LL_GetURBState>
 8007110:	4603      	mov	r3, r0
 8007112:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007114:	7bbb      	ldrb	r3, [r7, #14]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d105      	bne.n	8007126 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	220d      	movs	r2, #13
 800711e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007124:	e072      	b.n	800720c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	2b04      	cmp	r3, #4
 800712a:	d103      	bne.n	8007134 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	220b      	movs	r2, #11
 8007130:	761a      	strb	r2, [r3, #24]
      break;
 8007132:	e06b      	b.n	800720c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007134:	7bbb      	ldrb	r3, [r7, #14]
 8007136:	2b05      	cmp	r3, #5
 8007138:	d168      	bne.n	800720c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800713a:	2303      	movs	r3, #3
 800713c:	73fb      	strb	r3, [r7, #15]
      break;
 800713e:	e065      	b.n	800720c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	795b      	ldrb	r3, [r3, #5]
 8007144:	2201      	movs	r2, #1
 8007146:	9200      	str	r2, [sp, #0]
 8007148:	2200      	movs	r2, #0
 800714a:	2100      	movs	r1, #0
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f87f 	bl	8007250 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007158:	b29a      	uxth	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	220a      	movs	r2, #10
 8007162:	761a      	strb	r2, [r3, #24]
      break;
 8007164:	e055      	b.n	8007212 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	795b      	ldrb	r3, [r3, #5]
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fbe1 	bl	8007934 <USBH_LL_GetURBState>
 8007172:	4603      	mov	r3, r0
 8007174:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007176:	7bbb      	ldrb	r3, [r7, #14]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d105      	bne.n	8007188 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	220d      	movs	r2, #13
 8007184:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007186:	e043      	b.n	8007210 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007188:	7bbb      	ldrb	r3, [r7, #14]
 800718a:	2b02      	cmp	r3, #2
 800718c:	d103      	bne.n	8007196 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2209      	movs	r2, #9
 8007192:	761a      	strb	r2, [r3, #24]
      break;
 8007194:	e03c      	b.n	8007210 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007196:	7bbb      	ldrb	r3, [r7, #14]
 8007198:	2b04      	cmp	r3, #4
 800719a:	d139      	bne.n	8007210 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	220b      	movs	r2, #11
 80071a0:	761a      	strb	r2, [r3, #24]
      break;
 80071a2:	e035      	b.n	8007210 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	7e5b      	ldrb	r3, [r3, #25]
 80071a8:	3301      	adds	r3, #1
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	765a      	strb	r2, [r3, #25]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	7e5b      	ldrb	r3, [r3, #25]
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d806      	bhi.n	80071c6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80071c4:	e025      	b.n	8007212 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071cc:	2106      	movs	r1, #6
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	795b      	ldrb	r3, [r3, #5]
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f90c 	bl	80073fc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	791b      	ldrb	r3, [r3, #4]
 80071e8:	4619      	mov	r1, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f906 	bl	80073fc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80071f6:	2302      	movs	r3, #2
 80071f8:	73fb      	strb	r3, [r7, #15]
      break;
 80071fa:	e00a      	b.n	8007212 <USBH_HandleControl+0x2de>

    default:
      break;
 80071fc:	bf00      	nop
 80071fe:	e008      	b.n	8007212 <USBH_HandleControl+0x2de>
      break;
 8007200:	bf00      	nop
 8007202:	e006      	b.n	8007212 <USBH_HandleControl+0x2de>
      break;
 8007204:	bf00      	nop
 8007206:	e004      	b.n	8007212 <USBH_HandleControl+0x2de>
      break;
 8007208:	bf00      	nop
 800720a:	e002      	b.n	8007212 <USBH_HandleControl+0x2de>
      break;
 800720c:	bf00      	nop
 800720e:	e000      	b.n	8007212 <USBH_HandleControl+0x2de>
      break;
 8007210:	bf00      	nop
  }

  return status;
 8007212:	7bfb      	ldrb	r3, [r7, #15]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b088      	sub	sp, #32
 8007220:	af04      	add	r7, sp, #16
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	4613      	mov	r3, r2
 8007228:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800722a:	79f9      	ldrb	r1, [r7, #7]
 800722c:	2300      	movs	r3, #0
 800722e:	9303      	str	r3, [sp, #12]
 8007230:	2308      	movs	r3, #8
 8007232:	9302      	str	r3, [sp, #8]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	9301      	str	r3, [sp, #4]
 8007238:	2300      	movs	r3, #0
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	2300      	movs	r3, #0
 800723e:	2200      	movs	r2, #0
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 fb46 	bl	80078d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b088      	sub	sp, #32
 8007254:	af04      	add	r7, sp, #16
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	4611      	mov	r1, r2
 800725c:	461a      	mov	r2, r3
 800725e:	460b      	mov	r3, r1
 8007260:	80fb      	strh	r3, [r7, #6]
 8007262:	4613      	mov	r3, r2
 8007264:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007274:	7979      	ldrb	r1, [r7, #5]
 8007276:	7e3b      	ldrb	r3, [r7, #24]
 8007278:	9303      	str	r3, [sp, #12]
 800727a:	88fb      	ldrh	r3, [r7, #6]
 800727c:	9302      	str	r3, [sp, #8]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	9301      	str	r3, [sp, #4]
 8007282:	2301      	movs	r3, #1
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	2300      	movs	r3, #0
 8007288:	2200      	movs	r2, #0
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 fb21 	bl	80078d2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b088      	sub	sp, #32
 800729e:	af04      	add	r7, sp, #16
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	60b9      	str	r1, [r7, #8]
 80072a4:	4611      	mov	r1, r2
 80072a6:	461a      	mov	r2, r3
 80072a8:	460b      	mov	r3, r1
 80072aa:	80fb      	strh	r3, [r7, #6]
 80072ac:	4613      	mov	r3, r2
 80072ae:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80072b0:	7979      	ldrb	r1, [r7, #5]
 80072b2:	2300      	movs	r3, #0
 80072b4:	9303      	str	r3, [sp, #12]
 80072b6:	88fb      	ldrh	r3, [r7, #6]
 80072b8:	9302      	str	r3, [sp, #8]
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	9301      	str	r3, [sp, #4]
 80072be:	2301      	movs	r3, #1
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	2300      	movs	r3, #0
 80072c4:	2201      	movs	r2, #1
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 fb03 	bl	80078d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80072cc:	2300      	movs	r3, #0

}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b088      	sub	sp, #32
 80072da:	af04      	add	r7, sp, #16
 80072dc:	60f8      	str	r0, [r7, #12]
 80072de:	60b9      	str	r1, [r7, #8]
 80072e0:	4611      	mov	r1, r2
 80072e2:	461a      	mov	r2, r3
 80072e4:	460b      	mov	r3, r1
 80072e6:	80fb      	strh	r3, [r7, #6]
 80072e8:	4613      	mov	r3, r2
 80072ea:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80072fa:	7979      	ldrb	r1, [r7, #5]
 80072fc:	7e3b      	ldrb	r3, [r7, #24]
 80072fe:	9303      	str	r3, [sp, #12]
 8007300:	88fb      	ldrh	r3, [r7, #6]
 8007302:	9302      	str	r3, [sp, #8]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	2301      	movs	r3, #1
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	2302      	movs	r3, #2
 800730e:	2200      	movs	r2, #0
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 fade 	bl	80078d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af04      	add	r7, sp, #16
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	4611      	mov	r1, r2
 800732c:	461a      	mov	r2, r3
 800732e:	460b      	mov	r3, r1
 8007330:	80fb      	strh	r3, [r7, #6]
 8007332:	4613      	mov	r3, r2
 8007334:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007336:	7979      	ldrb	r1, [r7, #5]
 8007338:	2300      	movs	r3, #0
 800733a:	9303      	str	r3, [sp, #12]
 800733c:	88fb      	ldrh	r3, [r7, #6]
 800733e:	9302      	str	r3, [sp, #8]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	9301      	str	r3, [sp, #4]
 8007344:	2301      	movs	r3, #1
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	2302      	movs	r3, #2
 800734a:	2201      	movs	r2, #1
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 fac0 	bl	80078d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af04      	add	r7, sp, #16
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	4608      	mov	r0, r1
 8007366:	4611      	mov	r1, r2
 8007368:	461a      	mov	r2, r3
 800736a:	4603      	mov	r3, r0
 800736c:	70fb      	strb	r3, [r7, #3]
 800736e:	460b      	mov	r3, r1
 8007370:	70bb      	strb	r3, [r7, #2]
 8007372:	4613      	mov	r3, r2
 8007374:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007376:	7878      	ldrb	r0, [r7, #1]
 8007378:	78ba      	ldrb	r2, [r7, #2]
 800737a:	78f9      	ldrb	r1, [r7, #3]
 800737c:	8b3b      	ldrh	r3, [r7, #24]
 800737e:	9302      	str	r3, [sp, #8]
 8007380:	7d3b      	ldrb	r3, [r7, #20]
 8007382:	9301      	str	r3, [sp, #4]
 8007384:	7c3b      	ldrb	r3, [r7, #16]
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	4603      	mov	r3, r0
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fa53 	bl	8007836 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b082      	sub	sp, #8
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	460b      	mov	r3, r1
 80073a4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80073a6:	78fb      	ldrb	r3, [r7, #3]
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fa72 	bl	8007894 <USBH_LL_ClosePipe>

  return USBH_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	460b      	mov	r3, r1
 80073c4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f836 	bl	8007438 <USBH_GetFreePipe>
 80073cc:	4603      	mov	r3, r0
 80073ce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80073d0:	89fb      	ldrh	r3, [r7, #14]
 80073d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d00a      	beq.n	80073f0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80073da:	78fa      	ldrb	r2, [r7, #3]
 80073dc:	89fb      	ldrh	r3, [r7, #14]
 80073de:	f003 030f 	and.w	r3, r3, #15
 80073e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073e6:	6879      	ldr	r1, [r7, #4]
 80073e8:	33e0      	adds	r3, #224	; 0xe0
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	440b      	add	r3, r1
 80073ee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80073f0:	89fb      	ldrh	r3, [r7, #14]
 80073f2:	b2db      	uxtb	r3, r3
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007408:	78fb      	ldrb	r3, [r7, #3]
 800740a:	2b0f      	cmp	r3, #15
 800740c:	d80d      	bhi.n	800742a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800740e:	78fb      	ldrb	r3, [r7, #3]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	33e0      	adds	r3, #224	; 0xe0
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4413      	add	r3, r2
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	78fb      	ldrb	r3, [r7, #3]
 800741c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007420:	6879      	ldr	r1, [r7, #4]
 8007422:	33e0      	adds	r3, #224	; 0xe0
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	440b      	add	r3, r1
 8007428:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007440:	2300      	movs	r3, #0
 8007442:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007444:	2300      	movs	r3, #0
 8007446:	73fb      	strb	r3, [r7, #15]
 8007448:	e00f      	b.n	800746a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800744a:	7bfb      	ldrb	r3, [r7, #15]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	33e0      	adds	r3, #224	; 0xe0
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d102      	bne.n	8007464 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	b29b      	uxth	r3, r3
 8007462:	e007      	b.n	8007474 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007464:	7bfb      	ldrb	r3, [r7, #15]
 8007466:	3301      	adds	r3, #1
 8007468:	73fb      	strb	r3, [r7, #15]
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	2b0f      	cmp	r3, #15
 800746e:	d9ec      	bls.n	800744a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007470:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007484:	2201      	movs	r2, #1
 8007486:	490e      	ldr	r1, [pc, #56]	; (80074c0 <MX_USB_HOST_Init+0x40>)
 8007488:	480e      	ldr	r0, [pc, #56]	; (80074c4 <MX_USB_HOST_Init+0x44>)
 800748a:	f7fe fba7 	bl	8005bdc <USBH_Init>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007494:	f7f9 fafe 	bl	8000a94 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007498:	490b      	ldr	r1, [pc, #44]	; (80074c8 <MX_USB_HOST_Init+0x48>)
 800749a:	480a      	ldr	r0, [pc, #40]	; (80074c4 <MX_USB_HOST_Init+0x44>)
 800749c:	f7fe fc2c 	bl	8005cf8 <USBH_RegisterClass>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80074a6:	f7f9 faf5 	bl	8000a94 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80074aa:	4806      	ldr	r0, [pc, #24]	; (80074c4 <MX_USB_HOST_Init+0x44>)
 80074ac:	f7fe fcb0 	bl	8005e10 <USBH_Start>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80074b6:	f7f9 faed 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80074ba:	bf00      	nop
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	080074e1 	.word	0x080074e1
 80074c4:	200001b0 	.word	0x200001b0
 80074c8:	2000000c 	.word	0x2000000c

080074cc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80074d0:	4802      	ldr	r0, [pc, #8]	; (80074dc <MX_USB_HOST_Process+0x10>)
 80074d2:	f7fe fcad 	bl	8005e30 <USBH_Process>
}
 80074d6:	bf00      	nop
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	200001b0 	.word	0x200001b0

080074e0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	460b      	mov	r3, r1
 80074ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80074ec:	78fb      	ldrb	r3, [r7, #3]
 80074ee:	3b01      	subs	r3, #1
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d819      	bhi.n	8007528 <USBH_UserProcess+0x48>
 80074f4:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <USBH_UserProcess+0x1c>)
 80074f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fa:	bf00      	nop
 80074fc:	08007529 	.word	0x08007529
 8007500:	08007519 	.word	0x08007519
 8007504:	08007529 	.word	0x08007529
 8007508:	08007521 	.word	0x08007521
 800750c:	08007511 	.word	0x08007511
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007510:	4b09      	ldr	r3, [pc, #36]	; (8007538 <USBH_UserProcess+0x58>)
 8007512:	2203      	movs	r2, #3
 8007514:	701a      	strb	r2, [r3, #0]
  break;
 8007516:	e008      	b.n	800752a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007518:	4b07      	ldr	r3, [pc, #28]	; (8007538 <USBH_UserProcess+0x58>)
 800751a:	2202      	movs	r2, #2
 800751c:	701a      	strb	r2, [r3, #0]
  break;
 800751e:	e004      	b.n	800752a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007520:	4b05      	ldr	r3, [pc, #20]	; (8007538 <USBH_UserProcess+0x58>)
 8007522:	2201      	movs	r2, #1
 8007524:	701a      	strb	r2, [r3, #0]
  break;
 8007526:	e000      	b.n	800752a <USBH_UserProcess+0x4a>

  default:
  break;
 8007528:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	20000588 	.word	0x20000588

0800753c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08a      	sub	sp, #40	; 0x28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007544:	f107 0314 	add.w	r3, r7, #20
 8007548:	2200      	movs	r2, #0
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	605a      	str	r2, [r3, #4]
 800754e:	609a      	str	r2, [r3, #8]
 8007550:	60da      	str	r2, [r3, #12]
 8007552:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800755c:	d147      	bne.n	80075ee <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800755e:	2300      	movs	r3, #0
 8007560:	613b      	str	r3, [r7, #16]
 8007562:	4b25      	ldr	r3, [pc, #148]	; (80075f8 <HAL_HCD_MspInit+0xbc>)
 8007564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007566:	4a24      	ldr	r2, [pc, #144]	; (80075f8 <HAL_HCD_MspInit+0xbc>)
 8007568:	f043 0301 	orr.w	r3, r3, #1
 800756c:	6313      	str	r3, [r2, #48]	; 0x30
 800756e:	4b22      	ldr	r3, [pc, #136]	; (80075f8 <HAL_HCD_MspInit+0xbc>)
 8007570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	613b      	str	r3, [r7, #16]
 8007578:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800757a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800757e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007580:	2300      	movs	r3, #0
 8007582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007584:	2300      	movs	r3, #0
 8007586:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007588:	f107 0314 	add.w	r3, r7, #20
 800758c:	4619      	mov	r1, r3
 800758e:	481b      	ldr	r0, [pc, #108]	; (80075fc <HAL_HCD_MspInit+0xc0>)
 8007590:	f7f9 fd82 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007594:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800759a:	2302      	movs	r3, #2
 800759c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800759e:	2300      	movs	r3, #0
 80075a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075a2:	2300      	movs	r3, #0
 80075a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80075a6:	230a      	movs	r3, #10
 80075a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075aa:	f107 0314 	add.w	r3, r7, #20
 80075ae:	4619      	mov	r1, r3
 80075b0:	4812      	ldr	r0, [pc, #72]	; (80075fc <HAL_HCD_MspInit+0xc0>)
 80075b2:	f7f9 fd71 	bl	8001098 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80075b6:	4b10      	ldr	r3, [pc, #64]	; (80075f8 <HAL_HCD_MspInit+0xbc>)
 80075b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ba:	4a0f      	ldr	r2, [pc, #60]	; (80075f8 <HAL_HCD_MspInit+0xbc>)
 80075bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c0:	6353      	str	r3, [r2, #52]	; 0x34
 80075c2:	2300      	movs	r3, #0
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	4b0c      	ldr	r3, [pc, #48]	; (80075f8 <HAL_HCD_MspInit+0xbc>)
 80075c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ca:	4a0b      	ldr	r2, [pc, #44]	; (80075f8 <HAL_HCD_MspInit+0xbc>)
 80075cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075d0:	6453      	str	r3, [r2, #68]	; 0x44
 80075d2:	4b09      	ldr	r3, [pc, #36]	; (80075f8 <HAL_HCD_MspInit+0xbc>)
 80075d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80075de:	2200      	movs	r2, #0
 80075e0:	2100      	movs	r1, #0
 80075e2:	2043      	movs	r0, #67	; 0x43
 80075e4:	f7f9 fd21 	bl	800102a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80075e8:	2043      	movs	r0, #67	; 0x43
 80075ea:	f7f9 fd3a 	bl	8001062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80075ee:	bf00      	nop
 80075f0:	3728      	adds	r7, #40	; 0x28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	40023800 	.word	0x40023800
 80075fc:	40020000 	.word	0x40020000

08007600 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800760e:	4618      	mov	r0, r3
 8007610:	f7fe ffed 	bl	80065ee <USBH_LL_IncTimer>
}
 8007614:	bf00      	nop
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff f825 	bl	800667a <USBH_LL_Connect>
}
 8007630:	bf00      	nop
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007646:	4618      	mov	r0, r3
 8007648:	f7ff f82e 	bl	80066a8 <USBH_LL_Disconnect>
}
 800764c:	bf00      	nop
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	460b      	mov	r3, r1
 800765e:	70fb      	strb	r3, [r7, #3]
 8007660:	4613      	mov	r3, r2
 8007662:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe ffdf 	bl	8006642 <USBH_LL_PortEnabled>
}
 8007684:	bf00      	nop
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800769a:	4618      	mov	r0, r3
 800769c:	f7fe ffdf 	bl	800665e <USBH_LL_PortDisabled>
}
 80076a0:	bf00      	nop
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d12a      	bne.n	8007710 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80076ba:	4a18      	ldr	r2, [pc, #96]	; (800771c <USBH_LL_Init+0x74>)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a15      	ldr	r2, [pc, #84]	; (800771c <USBH_LL_Init+0x74>)
 80076c6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80076ca:	4b14      	ldr	r3, [pc, #80]	; (800771c <USBH_LL_Init+0x74>)
 80076cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80076d0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80076d2:	4b12      	ldr	r3, [pc, #72]	; (800771c <USBH_LL_Init+0x74>)
 80076d4:	2208      	movs	r2, #8
 80076d6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80076d8:	4b10      	ldr	r3, [pc, #64]	; (800771c <USBH_LL_Init+0x74>)
 80076da:	2201      	movs	r2, #1
 80076dc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80076de:	4b0f      	ldr	r3, [pc, #60]	; (800771c <USBH_LL_Init+0x74>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80076e4:	4b0d      	ldr	r3, [pc, #52]	; (800771c <USBH_LL_Init+0x74>)
 80076e6:	2202      	movs	r2, #2
 80076e8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80076ea:	4b0c      	ldr	r3, [pc, #48]	; (800771c <USBH_LL_Init+0x74>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80076f0:	480a      	ldr	r0, [pc, #40]	; (800771c <USBH_LL_Init+0x74>)
 80076f2:	f7f9 feb7 	bl	8001464 <HAL_HCD_Init>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80076fc:	f7f9 f9ca 	bl	8000a94 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007700:	4806      	ldr	r0, [pc, #24]	; (800771c <USBH_LL_Init+0x74>)
 8007702:	f7fa fa9a 	bl	8001c3a <HAL_HCD_GetCurrentFrame>
 8007706:	4603      	mov	r3, r0
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7fe ff60 	bl	80065d0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	2000058c 	.word	0x2000058c

08007720 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007728:	2300      	movs	r3, #0
 800772a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007736:	4618      	mov	r0, r3
 8007738:	f7fa fa09 	bl	8001b4e <HAL_HCD_Start>
 800773c:	4603      	mov	r3, r0
 800773e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	4618      	mov	r0, r3
 8007744:	f000 f95c 	bl	8007a00 <USBH_Get_USB_Status>
 8007748:	4603      	mov	r3, r0
 800774a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800774c:	7bbb      	ldrb	r3, [r7, #14]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b084      	sub	sp, #16
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800776c:	4618      	mov	r0, r3
 800776e:	f7fa fa11 	bl	8001b94 <HAL_HCD_Stop>
 8007772:	4603      	mov	r3, r0
 8007774:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007776:	7bfb      	ldrb	r3, [r7, #15]
 8007778:	4618      	mov	r0, r3
 800777a:	f000 f941 	bl	8007a00 <USBH_Get_USB_Status>
 800777e:	4603      	mov	r3, r0
 8007780:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007782:	7bbb      	ldrb	r3, [r7, #14]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007794:	2301      	movs	r3, #1
 8007796:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fa fa59 	bl	8001c56 <HAL_HCD_GetCurrentSpeed>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d00c      	beq.n	80077c4 <USBH_LL_GetSpeed+0x38>
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d80d      	bhi.n	80077ca <USBH_LL_GetSpeed+0x3e>
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d002      	beq.n	80077b8 <USBH_LL_GetSpeed+0x2c>
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d003      	beq.n	80077be <USBH_LL_GetSpeed+0x32>
 80077b6:	e008      	b.n	80077ca <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73fb      	strb	r3, [r7, #15]
    break;
 80077bc:	e008      	b.n	80077d0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80077be:	2301      	movs	r3, #1
 80077c0:	73fb      	strb	r3, [r7, #15]
    break;
 80077c2:	e005      	b.n	80077d0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80077c4:	2302      	movs	r3, #2
 80077c6:	73fb      	strb	r3, [r7, #15]
    break;
 80077c8:	e002      	b.n	80077d0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80077ca:	2301      	movs	r3, #1
 80077cc:	73fb      	strb	r3, [r7, #15]
    break;
 80077ce:	bf00      	nop
  }
  return  speed;
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fa f9ec 	bl	8001bce <HAL_HCD_ResetPort>
 80077f6:	4603      	mov	r3, r0
 80077f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 f8ff 	bl	8007a00 <USBH_Get_USB_Status>
 8007802:	4603      	mov	r3, r0
 8007804:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007806:	7bbb      	ldrb	r3, [r7, #14]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	460b      	mov	r3, r1
 800781a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007822:	78fa      	ldrb	r2, [r7, #3]
 8007824:	4611      	mov	r1, r2
 8007826:	4618      	mov	r0, r3
 8007828:	f7fa f9f3 	bl	8001c12 <HAL_HCD_HC_GetXferCount>
 800782c:	4603      	mov	r3, r0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007836:	b590      	push	{r4, r7, lr}
 8007838:	b089      	sub	sp, #36	; 0x24
 800783a:	af04      	add	r7, sp, #16
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	4608      	mov	r0, r1
 8007840:	4611      	mov	r1, r2
 8007842:	461a      	mov	r2, r3
 8007844:	4603      	mov	r3, r0
 8007846:	70fb      	strb	r3, [r7, #3]
 8007848:	460b      	mov	r3, r1
 800784a:	70bb      	strb	r3, [r7, #2]
 800784c:	4613      	mov	r3, r2
 800784e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007850:	2300      	movs	r3, #0
 8007852:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800785e:	787c      	ldrb	r4, [r7, #1]
 8007860:	78ba      	ldrb	r2, [r7, #2]
 8007862:	78f9      	ldrb	r1, [r7, #3]
 8007864:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007866:	9302      	str	r3, [sp, #8]
 8007868:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800786c:	9301      	str	r3, [sp, #4]
 800786e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	4623      	mov	r3, r4
 8007876:	f7f9 fe57 	bl	8001528 <HAL_HCD_HC_Init>
 800787a:	4603      	mov	r3, r0
 800787c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800787e:	7bfb      	ldrb	r3, [r7, #15]
 8007880:	4618      	mov	r0, r3
 8007882:	f000 f8bd 	bl	8007a00 <USBH_Get_USB_Status>
 8007886:	4603      	mov	r3, r0
 8007888:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800788a:	7bbb      	ldrb	r3, [r7, #14]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	bd90      	pop	{r4, r7, pc}

08007894 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	460b      	mov	r3, r1
 800789e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078ae:	78fa      	ldrb	r2, [r7, #3]
 80078b0:	4611      	mov	r1, r2
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7f9 fec7 	bl	8001646 <HAL_HCD_HC_Halt>
 80078b8:	4603      	mov	r3, r0
 80078ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 f89e 	bl	8007a00 <USBH_Get_USB_Status>
 80078c4:	4603      	mov	r3, r0
 80078c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80078d2:	b590      	push	{r4, r7, lr}
 80078d4:	b089      	sub	sp, #36	; 0x24
 80078d6:	af04      	add	r7, sp, #16
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	4608      	mov	r0, r1
 80078dc:	4611      	mov	r1, r2
 80078de:	461a      	mov	r2, r3
 80078e0:	4603      	mov	r3, r0
 80078e2:	70fb      	strb	r3, [r7, #3]
 80078e4:	460b      	mov	r3, r1
 80078e6:	70bb      	strb	r3, [r7, #2]
 80078e8:	4613      	mov	r3, r2
 80078ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80078fa:	787c      	ldrb	r4, [r7, #1]
 80078fc:	78ba      	ldrb	r2, [r7, #2]
 80078fe:	78f9      	ldrb	r1, [r7, #3]
 8007900:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007904:	9303      	str	r3, [sp, #12]
 8007906:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007908:	9302      	str	r3, [sp, #8]
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	9301      	str	r3, [sp, #4]
 800790e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	4623      	mov	r3, r4
 8007916:	f7f9 feb9 	bl	800168c <HAL_HCD_HC_SubmitRequest>
 800791a:	4603      	mov	r3, r0
 800791c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800791e:	7bfb      	ldrb	r3, [r7, #15]
 8007920:	4618      	mov	r0, r3
 8007922:	f000 f86d 	bl	8007a00 <USBH_Get_USB_Status>
 8007926:	4603      	mov	r3, r0
 8007928:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800792a:	7bbb      	ldrb	r3, [r7, #14]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	bd90      	pop	{r4, r7, pc}

08007934 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	460b      	mov	r3, r1
 800793e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007946:	78fa      	ldrb	r2, [r7, #3]
 8007948:	4611      	mov	r1, r2
 800794a:	4618      	mov	r0, r3
 800794c:	f7fa f94d 	bl	8001bea <HAL_HCD_HC_GetURBState>
 8007950:	4603      	mov	r3, r0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b082      	sub	sp, #8
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	460b      	mov	r3, r1
 8007964:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800796c:	2b01      	cmp	r3, #1
 800796e:	d103      	bne.n	8007978 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007970:	78fb      	ldrb	r3, [r7, #3]
 8007972:	4618      	mov	r0, r3
 8007974:	f000 f870 	bl	8007a58 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007978:	20c8      	movs	r0, #200	; 0xc8
 800797a:	f7f9 fa57 	bl	8000e2c <HAL_Delay>
  return USBH_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]
 8007994:	4613      	mov	r3, r2
 8007996:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800799e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	212c      	movs	r1, #44	; 0x2c
 80079a6:	fb01 f303 	mul.w	r3, r1, r3
 80079aa:	4413      	add	r3, r2
 80079ac:	333b      	adds	r3, #59	; 0x3b
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d009      	beq.n	80079c8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80079b4:	78fb      	ldrb	r3, [r7, #3]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	212c      	movs	r1, #44	; 0x2c
 80079ba:	fb01 f303 	mul.w	r3, r1, r3
 80079be:	4413      	add	r3, r2
 80079c0:	3354      	adds	r3, #84	; 0x54
 80079c2:	78ba      	ldrb	r2, [r7, #2]
 80079c4:	701a      	strb	r2, [r3, #0]
 80079c6:	e008      	b.n	80079da <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80079c8:	78fb      	ldrb	r3, [r7, #3]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	212c      	movs	r1, #44	; 0x2c
 80079ce:	fb01 f303 	mul.w	r3, r1, r3
 80079d2:	4413      	add	r3, r2
 80079d4:	3355      	adds	r3, #85	; 0x55
 80079d6:	78ba      	ldrb	r2, [r7, #2]
 80079d8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3714      	adds	r7, #20
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f7f9 fa1b 	bl	8000e2c <HAL_Delay>
}
 80079f6:	bf00      	nop
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	4603      	mov	r3, r0
 8007a08:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a0e:	79fb      	ldrb	r3, [r7, #7]
 8007a10:	2b03      	cmp	r3, #3
 8007a12:	d817      	bhi.n	8007a44 <USBH_Get_USB_Status+0x44>
 8007a14:	a201      	add	r2, pc, #4	; (adr r2, 8007a1c <USBH_Get_USB_Status+0x1c>)
 8007a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1a:	bf00      	nop
 8007a1c:	08007a2d 	.word	0x08007a2d
 8007a20:	08007a33 	.word	0x08007a33
 8007a24:	08007a39 	.word	0x08007a39
 8007a28:	08007a3f 	.word	0x08007a3f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a30:	e00b      	b.n	8007a4a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007a32:	2302      	movs	r3, #2
 8007a34:	73fb      	strb	r3, [r7, #15]
    break;
 8007a36:	e008      	b.n	8007a4a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a3c:	e005      	b.n	8007a4a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007a3e:	2302      	movs	r3, #2
 8007a40:	73fb      	strb	r3, [r7, #15]
    break;
 8007a42:	e002      	b.n	8007a4a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007a44:	2302      	movs	r3, #2
 8007a46:	73fb      	strb	r3, [r7, #15]
    break;
 8007a48:	bf00      	nop
  }
  return usb_status;
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007a62:	79fb      	ldrb	r3, [r7, #7]
 8007a64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007a66:	79fb      	ldrb	r3, [r7, #7]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d102      	bne.n	8007a72 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	73fb      	strb	r3, [r7, #15]
 8007a70:	e001      	b.n	8007a76 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007a72:	2301      	movs	r3, #1
 8007a74:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	4803      	ldr	r0, [pc, #12]	; (8007a8c <MX_DriverVbusFS+0x34>)
 8007a7e:	f7f9 fcbf 	bl	8001400 <HAL_GPIO_WritePin>
}
 8007a82:	bf00      	nop
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	40020800 	.word	0x40020800

08007a90 <__errno>:
 8007a90:	4b01      	ldr	r3, [pc, #4]	; (8007a98 <__errno+0x8>)
 8007a92:	6818      	ldr	r0, [r3, #0]
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	2000002c 	.word	0x2000002c

08007a9c <__libc_init_array>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	4d0d      	ldr	r5, [pc, #52]	; (8007ad4 <__libc_init_array+0x38>)
 8007aa0:	4c0d      	ldr	r4, [pc, #52]	; (8007ad8 <__libc_init_array+0x3c>)
 8007aa2:	1b64      	subs	r4, r4, r5
 8007aa4:	10a4      	asrs	r4, r4, #2
 8007aa6:	2600      	movs	r6, #0
 8007aa8:	42a6      	cmp	r6, r4
 8007aaa:	d109      	bne.n	8007ac0 <__libc_init_array+0x24>
 8007aac:	4d0b      	ldr	r5, [pc, #44]	; (8007adc <__libc_init_array+0x40>)
 8007aae:	4c0c      	ldr	r4, [pc, #48]	; (8007ae0 <__libc_init_array+0x44>)
 8007ab0:	f000 f92e 	bl	8007d10 <_init>
 8007ab4:	1b64      	subs	r4, r4, r5
 8007ab6:	10a4      	asrs	r4, r4, #2
 8007ab8:	2600      	movs	r6, #0
 8007aba:	42a6      	cmp	r6, r4
 8007abc:	d105      	bne.n	8007aca <__libc_init_array+0x2e>
 8007abe:	bd70      	pop	{r4, r5, r6, pc}
 8007ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ac4:	4798      	blx	r3
 8007ac6:	3601      	adds	r6, #1
 8007ac8:	e7ee      	b.n	8007aa8 <__libc_init_array+0xc>
 8007aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ace:	4798      	blx	r3
 8007ad0:	3601      	adds	r6, #1
 8007ad2:	e7f2      	b.n	8007aba <__libc_init_array+0x1e>
 8007ad4:	08007d4c 	.word	0x08007d4c
 8007ad8:	08007d4c 	.word	0x08007d4c
 8007adc:	08007d4c 	.word	0x08007d4c
 8007ae0:	08007d50 	.word	0x08007d50

08007ae4 <malloc>:
 8007ae4:	4b02      	ldr	r3, [pc, #8]	; (8007af0 <malloc+0xc>)
 8007ae6:	4601      	mov	r1, r0
 8007ae8:	6818      	ldr	r0, [r3, #0]
 8007aea:	f000 b87f 	b.w	8007bec <_malloc_r>
 8007aee:	bf00      	nop
 8007af0:	2000002c 	.word	0x2000002c

08007af4 <free>:
 8007af4:	4b02      	ldr	r3, [pc, #8]	; (8007b00 <free+0xc>)
 8007af6:	4601      	mov	r1, r0
 8007af8:	6818      	ldr	r0, [r3, #0]
 8007afa:	f000 b80b 	b.w	8007b14 <_free_r>
 8007afe:	bf00      	nop
 8007b00:	2000002c 	.word	0x2000002c

08007b04 <memset>:
 8007b04:	4402      	add	r2, r0
 8007b06:	4603      	mov	r3, r0
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d100      	bne.n	8007b0e <memset+0xa>
 8007b0c:	4770      	bx	lr
 8007b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b12:	e7f9      	b.n	8007b08 <memset+0x4>

08007b14 <_free_r>:
 8007b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b16:	2900      	cmp	r1, #0
 8007b18:	d044      	beq.n	8007ba4 <_free_r+0x90>
 8007b1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b1e:	9001      	str	r0, [sp, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f1a1 0404 	sub.w	r4, r1, #4
 8007b26:	bfb8      	it	lt
 8007b28:	18e4      	addlt	r4, r4, r3
 8007b2a:	f000 f8e3 	bl	8007cf4 <__malloc_lock>
 8007b2e:	4a1e      	ldr	r2, [pc, #120]	; (8007ba8 <_free_r+0x94>)
 8007b30:	9801      	ldr	r0, [sp, #4]
 8007b32:	6813      	ldr	r3, [r2, #0]
 8007b34:	b933      	cbnz	r3, 8007b44 <_free_r+0x30>
 8007b36:	6063      	str	r3, [r4, #4]
 8007b38:	6014      	str	r4, [r2, #0]
 8007b3a:	b003      	add	sp, #12
 8007b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b40:	f000 b8de 	b.w	8007d00 <__malloc_unlock>
 8007b44:	42a3      	cmp	r3, r4
 8007b46:	d908      	bls.n	8007b5a <_free_r+0x46>
 8007b48:	6825      	ldr	r5, [r4, #0]
 8007b4a:	1961      	adds	r1, r4, r5
 8007b4c:	428b      	cmp	r3, r1
 8007b4e:	bf01      	itttt	eq
 8007b50:	6819      	ldreq	r1, [r3, #0]
 8007b52:	685b      	ldreq	r3, [r3, #4]
 8007b54:	1949      	addeq	r1, r1, r5
 8007b56:	6021      	streq	r1, [r4, #0]
 8007b58:	e7ed      	b.n	8007b36 <_free_r+0x22>
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	b10b      	cbz	r3, 8007b64 <_free_r+0x50>
 8007b60:	42a3      	cmp	r3, r4
 8007b62:	d9fa      	bls.n	8007b5a <_free_r+0x46>
 8007b64:	6811      	ldr	r1, [r2, #0]
 8007b66:	1855      	adds	r5, r2, r1
 8007b68:	42a5      	cmp	r5, r4
 8007b6a:	d10b      	bne.n	8007b84 <_free_r+0x70>
 8007b6c:	6824      	ldr	r4, [r4, #0]
 8007b6e:	4421      	add	r1, r4
 8007b70:	1854      	adds	r4, r2, r1
 8007b72:	42a3      	cmp	r3, r4
 8007b74:	6011      	str	r1, [r2, #0]
 8007b76:	d1e0      	bne.n	8007b3a <_free_r+0x26>
 8007b78:	681c      	ldr	r4, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	6053      	str	r3, [r2, #4]
 8007b7e:	4421      	add	r1, r4
 8007b80:	6011      	str	r1, [r2, #0]
 8007b82:	e7da      	b.n	8007b3a <_free_r+0x26>
 8007b84:	d902      	bls.n	8007b8c <_free_r+0x78>
 8007b86:	230c      	movs	r3, #12
 8007b88:	6003      	str	r3, [r0, #0]
 8007b8a:	e7d6      	b.n	8007b3a <_free_r+0x26>
 8007b8c:	6825      	ldr	r5, [r4, #0]
 8007b8e:	1961      	adds	r1, r4, r5
 8007b90:	428b      	cmp	r3, r1
 8007b92:	bf04      	itt	eq
 8007b94:	6819      	ldreq	r1, [r3, #0]
 8007b96:	685b      	ldreq	r3, [r3, #4]
 8007b98:	6063      	str	r3, [r4, #4]
 8007b9a:	bf04      	itt	eq
 8007b9c:	1949      	addeq	r1, r1, r5
 8007b9e:	6021      	streq	r1, [r4, #0]
 8007ba0:	6054      	str	r4, [r2, #4]
 8007ba2:	e7ca      	b.n	8007b3a <_free_r+0x26>
 8007ba4:	b003      	add	sp, #12
 8007ba6:	bd30      	pop	{r4, r5, pc}
 8007ba8:	20000890 	.word	0x20000890

08007bac <sbrk_aligned>:
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	4e0e      	ldr	r6, [pc, #56]	; (8007be8 <sbrk_aligned+0x3c>)
 8007bb0:	460c      	mov	r4, r1
 8007bb2:	6831      	ldr	r1, [r6, #0]
 8007bb4:	4605      	mov	r5, r0
 8007bb6:	b911      	cbnz	r1, 8007bbe <sbrk_aligned+0x12>
 8007bb8:	f000 f88c 	bl	8007cd4 <_sbrk_r>
 8007bbc:	6030      	str	r0, [r6, #0]
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	f000 f887 	bl	8007cd4 <_sbrk_r>
 8007bc6:	1c43      	adds	r3, r0, #1
 8007bc8:	d00a      	beq.n	8007be0 <sbrk_aligned+0x34>
 8007bca:	1cc4      	adds	r4, r0, #3
 8007bcc:	f024 0403 	bic.w	r4, r4, #3
 8007bd0:	42a0      	cmp	r0, r4
 8007bd2:	d007      	beq.n	8007be4 <sbrk_aligned+0x38>
 8007bd4:	1a21      	subs	r1, r4, r0
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f000 f87c 	bl	8007cd4 <_sbrk_r>
 8007bdc:	3001      	adds	r0, #1
 8007bde:	d101      	bne.n	8007be4 <sbrk_aligned+0x38>
 8007be0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007be4:	4620      	mov	r0, r4
 8007be6:	bd70      	pop	{r4, r5, r6, pc}
 8007be8:	20000894 	.word	0x20000894

08007bec <_malloc_r>:
 8007bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf0:	1ccd      	adds	r5, r1, #3
 8007bf2:	f025 0503 	bic.w	r5, r5, #3
 8007bf6:	3508      	adds	r5, #8
 8007bf8:	2d0c      	cmp	r5, #12
 8007bfa:	bf38      	it	cc
 8007bfc:	250c      	movcc	r5, #12
 8007bfe:	2d00      	cmp	r5, #0
 8007c00:	4607      	mov	r7, r0
 8007c02:	db01      	blt.n	8007c08 <_malloc_r+0x1c>
 8007c04:	42a9      	cmp	r1, r5
 8007c06:	d905      	bls.n	8007c14 <_malloc_r+0x28>
 8007c08:	230c      	movs	r3, #12
 8007c0a:	603b      	str	r3, [r7, #0]
 8007c0c:	2600      	movs	r6, #0
 8007c0e:	4630      	mov	r0, r6
 8007c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c14:	4e2e      	ldr	r6, [pc, #184]	; (8007cd0 <_malloc_r+0xe4>)
 8007c16:	f000 f86d 	bl	8007cf4 <__malloc_lock>
 8007c1a:	6833      	ldr	r3, [r6, #0]
 8007c1c:	461c      	mov	r4, r3
 8007c1e:	bb34      	cbnz	r4, 8007c6e <_malloc_r+0x82>
 8007c20:	4629      	mov	r1, r5
 8007c22:	4638      	mov	r0, r7
 8007c24:	f7ff ffc2 	bl	8007bac <sbrk_aligned>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	d14d      	bne.n	8007cca <_malloc_r+0xde>
 8007c2e:	6834      	ldr	r4, [r6, #0]
 8007c30:	4626      	mov	r6, r4
 8007c32:	2e00      	cmp	r6, #0
 8007c34:	d140      	bne.n	8007cb8 <_malloc_r+0xcc>
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	4631      	mov	r1, r6
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	eb04 0803 	add.w	r8, r4, r3
 8007c40:	f000 f848 	bl	8007cd4 <_sbrk_r>
 8007c44:	4580      	cmp	r8, r0
 8007c46:	d13a      	bne.n	8007cbe <_malloc_r+0xd2>
 8007c48:	6821      	ldr	r1, [r4, #0]
 8007c4a:	3503      	adds	r5, #3
 8007c4c:	1a6d      	subs	r5, r5, r1
 8007c4e:	f025 0503 	bic.w	r5, r5, #3
 8007c52:	3508      	adds	r5, #8
 8007c54:	2d0c      	cmp	r5, #12
 8007c56:	bf38      	it	cc
 8007c58:	250c      	movcc	r5, #12
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	f7ff ffa5 	bl	8007bac <sbrk_aligned>
 8007c62:	3001      	adds	r0, #1
 8007c64:	d02b      	beq.n	8007cbe <_malloc_r+0xd2>
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	442b      	add	r3, r5
 8007c6a:	6023      	str	r3, [r4, #0]
 8007c6c:	e00e      	b.n	8007c8c <_malloc_r+0xa0>
 8007c6e:	6822      	ldr	r2, [r4, #0]
 8007c70:	1b52      	subs	r2, r2, r5
 8007c72:	d41e      	bmi.n	8007cb2 <_malloc_r+0xc6>
 8007c74:	2a0b      	cmp	r2, #11
 8007c76:	d916      	bls.n	8007ca6 <_malloc_r+0xba>
 8007c78:	1961      	adds	r1, r4, r5
 8007c7a:	42a3      	cmp	r3, r4
 8007c7c:	6025      	str	r5, [r4, #0]
 8007c7e:	bf18      	it	ne
 8007c80:	6059      	strne	r1, [r3, #4]
 8007c82:	6863      	ldr	r3, [r4, #4]
 8007c84:	bf08      	it	eq
 8007c86:	6031      	streq	r1, [r6, #0]
 8007c88:	5162      	str	r2, [r4, r5]
 8007c8a:	604b      	str	r3, [r1, #4]
 8007c8c:	4638      	mov	r0, r7
 8007c8e:	f104 060b 	add.w	r6, r4, #11
 8007c92:	f000 f835 	bl	8007d00 <__malloc_unlock>
 8007c96:	f026 0607 	bic.w	r6, r6, #7
 8007c9a:	1d23      	adds	r3, r4, #4
 8007c9c:	1af2      	subs	r2, r6, r3
 8007c9e:	d0b6      	beq.n	8007c0e <_malloc_r+0x22>
 8007ca0:	1b9b      	subs	r3, r3, r6
 8007ca2:	50a3      	str	r3, [r4, r2]
 8007ca4:	e7b3      	b.n	8007c0e <_malloc_r+0x22>
 8007ca6:	6862      	ldr	r2, [r4, #4]
 8007ca8:	42a3      	cmp	r3, r4
 8007caa:	bf0c      	ite	eq
 8007cac:	6032      	streq	r2, [r6, #0]
 8007cae:	605a      	strne	r2, [r3, #4]
 8007cb0:	e7ec      	b.n	8007c8c <_malloc_r+0xa0>
 8007cb2:	4623      	mov	r3, r4
 8007cb4:	6864      	ldr	r4, [r4, #4]
 8007cb6:	e7b2      	b.n	8007c1e <_malloc_r+0x32>
 8007cb8:	4634      	mov	r4, r6
 8007cba:	6876      	ldr	r6, [r6, #4]
 8007cbc:	e7b9      	b.n	8007c32 <_malloc_r+0x46>
 8007cbe:	230c      	movs	r3, #12
 8007cc0:	603b      	str	r3, [r7, #0]
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	f000 f81c 	bl	8007d00 <__malloc_unlock>
 8007cc8:	e7a1      	b.n	8007c0e <_malloc_r+0x22>
 8007cca:	6025      	str	r5, [r4, #0]
 8007ccc:	e7de      	b.n	8007c8c <_malloc_r+0xa0>
 8007cce:	bf00      	nop
 8007cd0:	20000890 	.word	0x20000890

08007cd4 <_sbrk_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	4d06      	ldr	r5, [pc, #24]	; (8007cf0 <_sbrk_r+0x1c>)
 8007cd8:	2300      	movs	r3, #0
 8007cda:	4604      	mov	r4, r0
 8007cdc:	4608      	mov	r0, r1
 8007cde:	602b      	str	r3, [r5, #0]
 8007ce0:	f7f8 ffc0 	bl	8000c64 <_sbrk>
 8007ce4:	1c43      	adds	r3, r0, #1
 8007ce6:	d102      	bne.n	8007cee <_sbrk_r+0x1a>
 8007ce8:	682b      	ldr	r3, [r5, #0]
 8007cea:	b103      	cbz	r3, 8007cee <_sbrk_r+0x1a>
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	bd38      	pop	{r3, r4, r5, pc}
 8007cf0:	20000898 	.word	0x20000898

08007cf4 <__malloc_lock>:
 8007cf4:	4801      	ldr	r0, [pc, #4]	; (8007cfc <__malloc_lock+0x8>)
 8007cf6:	f000 b809 	b.w	8007d0c <__retarget_lock_acquire_recursive>
 8007cfa:	bf00      	nop
 8007cfc:	2000089c 	.word	0x2000089c

08007d00 <__malloc_unlock>:
 8007d00:	4801      	ldr	r0, [pc, #4]	; (8007d08 <__malloc_unlock+0x8>)
 8007d02:	f000 b804 	b.w	8007d0e <__retarget_lock_release_recursive>
 8007d06:	bf00      	nop
 8007d08:	2000089c 	.word	0x2000089c

08007d0c <__retarget_lock_acquire_recursive>:
 8007d0c:	4770      	bx	lr

08007d0e <__retarget_lock_release_recursive>:
 8007d0e:	4770      	bx	lr

08007d10 <_init>:
 8007d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d12:	bf00      	nop
 8007d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d16:	bc08      	pop	{r3}
 8007d18:	469e      	mov	lr, r3
 8007d1a:	4770      	bx	lr

08007d1c <_fini>:
 8007d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1e:	bf00      	nop
 8007d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d22:	bc08      	pop	{r3}
 8007d24:	469e      	mov	lr, r3
 8007d26:	4770      	bx	lr
